/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "DropzoneComp",
    imports: [{
        type: "module",
        from: "dropzone",
        take: {
            what: "default",
            as: "Dropzone"
        }
    }, {
        type: "css",
        from: "dropzone/dist/dropzone.css"
    }],
    variables: [{
        name: "config",
        type: "object",
        defaultValue: {},
        scope: "private"
    }, {
        name: "files",
        type: "array",
        defaultValue: [],
        scope: "public"
    }, {
        name: "url",
        type: "string",
        defaultValue: "/random/url",
        scope: "public"
    }, {
        name: "addRemoveLinks",
        type: "boolean",
        defaultValue: true,
        scope: "public"
    }, {
        name: "params",
        type: "object",
        defaultValue: {},
        scope: "public"
    }, {
        name: "headers",
        type: "object",
        defaultValue: {},
        scope: "public"
    }, {
        name: "maxFiles",
        type: "number",
        defaultValue: null,
        scope: "public"
    }, {
        name: "autoProcessQueue",
        type: "boolean",
        defaultValue: true,
        scope: "public"
    }, {
        name: "defaultMessage",
        type: "string",
        defaultValue: "Drop files to upload or Click Here",
        scope: "public"
    }, {
        name: "acceptedFiles",
        type: "string",
        defaultValue: null,
        scope: "public"
    }, {
        name: "maxfilesexceeded",
        type: "function",
        defaultValue: file => {},
        scope: "public"
    }],
    structure: {
        type: "div",
        id: "dropzone",
        props: {
            className: "dropzone"
        }
    },
    lifecycleHooks: {
        init: {
            after: () => {
                Dropzone.autoDiscover = false;
                __fn__setConfig();
                this.dropzone = new Dropzone(__elId__dropzone, __var__config);
                __wf__setupEvents();
            }
        },
        reRender: {},
    },
    functions: {
        setConfig: () => {
            let conf = __var__config;
            conf['url'] = __var__url;
            conf['addRemoveLinks'] = __var__addRemoveLinks;
            conf['params'] = __var__params;
            conf['headers'] = __var__headers;
            conf['maxFiles'] = __var__maxFiles;
            conf['autoProcessQueue'] = __var__autoProcessQueue;
            conf['dictDefaultMessage'] = __var__defaultMessage;
            conf["acceptedFiles"] = __var__acceptedFiles;
            __utils__setPrivateVars({
                config: conf
            }, true);
        },
        removeAllFiles: function() {
            this.dropzone.removeAllFiles();
            this.dropzone.removeAllFiles(true);
        },
        removeFile: function(file) {
            this.dropzone.removeFile(file);
        },
        getAllFiles: function() {
            return this.dropzone.files;
        },
        getAcceptedFiles: function() {
            return this.dropzone.getAcceptedFiles();
        },
        getRejectedFiles: function() {
            return this.dropzone.getRejectedFiles();
        },
        getQueuedFiles: function() {
            return this.dropzone.getQueuedFiles();
        },
        getUploadingFiles: function() {
            return this.dropzone.getUploadingFiles();
        }
    },
    eventHandlers: [],
    eventEmitters: [],
    localTemplates: {},
    actions: [],
    workflows: {
        setupEvents: () => {
            this.dropzone.on("maxfilesexceeded", function(file) {
                __evt__maxfilesexceeded({}, file, {});
            });
            this.dropzone.on("addedfile", function(file) {
                __evt__addedfile({}, file, {});
            });
            this.dropzone.on("removedfile", function(file) {
                __evt__removedfile({}, file, {});
            });
            this.dropzone.on("error", function(evt, file) {
                __evt__error(evt, file, {});
            });
            this.dropzone.on("processing", function(file) {
                __evt__processing({}, file, {});
            });
            this.dropzone.on("uploadprogress", function(file) {
                __evt__uploadprogress({}, file, {});
            });
            this.dropzone.on("complete", function(evt, file) {
                __evt__complete(evt, file, {});
            });
            this.dropzone.on("sending", function(file) {
                __evt__sending({}, file, {});
            });
            this.dropzone.on("success", function(evt, file) {
                __evt__success(evt, file, {});
            });
        }
    }
};