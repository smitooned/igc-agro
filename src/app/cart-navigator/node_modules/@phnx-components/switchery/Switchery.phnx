/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "Switchery",
    imports: [],
    includesDef: "@phnx-components/basedef/baseAPI.phnxdef",
    defVarMap: {
        class: "theme",
        style: "compStyle"
    },
    variables: [{
        name: "alias",
        type: "string",
        defaultValue: "switch",
        metadata: [{
            displayName: "Alias",
            widget: "INPUT",
            widgetData: {},
            grouping: "Name",
            target: "alias"
        }],
        isMandatory: false,
        scope: "public"

    },{
        name: "theme",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: {},
            thumbClass: ""
        },
        scope: "public"
    }, {
        name: "compStyle",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: {},
            thumbStyle: {}
        },
        scope: "public"
    }, {
        name: "baseStyle",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: {
                cursor: "pointer",
                display: "inline-block",
                position: "inherit",
                "verticalAlign": "middle",
                "userSelect": "none",
                "boxSizing": "content-box",
                "backgroundClip": "content-box",
                transition: "border 0.4s, box-shadow 0.4s, background-color 0.5s",
                border: "1px solid rgb(223, 223, 223)",
                "boxShadow": "rgb(223, 223, 223) 0 0 0 0 inset"
            },
            thumbStyle: {
                "borderRadius": "100%",
                "boxShadow": "0 1px 3px rgba(0, 0, 0, 0.4)",
                position: "inherit",
                transition: "left 0.3s"
            }
        },
        scope: "private"
    }, {
        name: "disabled",
        type: "boolean",
        defaultValue: false,
        scope: "public",
        metadata: [{
            displayName: "Disabled",
            widget: "SWITCHERY",
            widgetData: {},
            grouping: "GENERAL",
            target: "disabled"
        }]
    }, {
        name: "state",
        type: "boolean",
        defaultValue: false,
        scope: "private"
    }, {
        name: "size",
        type: "string",
        defaultValue: "20px",
        scope: "public",
        metadata: [{
            displayName: "Size",
            widget: "COMBOBOX",
            widgetData: {},
            grouping: "GENERAL",
            target: "size"
        }]
    }, {
        name: "activeColor",
        type: "string",
        defaultValue: "#10CFBD",
        scope: "public",
        metadata: [{
            displayName: "Active Color",
            widget: "COLOR_PICKER",
            widgetData: {},
            grouping: "GENERAL",
            target: "activeColor"
        }]
    }, {
        name: "defaultColor",
        type: "string",
        defaultValue: "#FFFFFF",
        scope: "public",
        metadata: [{
            displayName: "Default Color",
            widget: "COLOR_PICKER",
            widgetData: {},
            grouping: "GENERAL",
            target: "defaultColor"
        }]
    }, {
        name: "thumbColor",
        type: "string",
        defaultValue: "#FFFFFF",
        scope: "public",
        metadata: [{
            displayName: "Color",
            widget: "COLOR_PICKER",
            widgetData: {},
            grouping: "THUMB",
            target: "thumbColor"
        }]
    }, {
        name: "thumbSwitchedColor",
        type: "string",
        defaultValue: "#FFFFFF",
        scope: "public",
        metadata: [{
            displayName: "Switched Color",
            widget: "COLOR_PICKER",
            widgetData: {},
            grouping: "THUMB",
            target: "thumbSwitchedColor"
        }]
    }, {
        name: "target",
        type: "string",
        defaultValue: "",
        scope: "public"
    },{
        name: "publicDefaults",
        type: "object",
        defaultValue: {},
        scope: "public"
    }],
    functions: {
        getStatus: () => {
            return __var__state;
        },
        setStatus: data => {
            __utils__setPrivateVars({
                state: data
            });
        },
        enableSwitchery: () => {
            const switchObj = {
                'cursor': 'pointer'
            };
            __utils__setPrivateVars({
                baseStyle: {
                    __root: switchObj
                }
            });
            __utils__setPublicVars({
                disabled: false
            });
        },
        disableSwitchery: () => {
            const switchObj = {
                'cursor': 'not-allowed'
            };
            __utils__setPrivateVars({
                baseStyle: {
                    __root: switchObj
                }
            });
            __utils__setPublicVars({
                disabled: true
            });
        },
        toOnState: () => {
            __utils__setPrivateVars({
                baseStyle: {
                    __root: Object.assign({}, __var__baseStyle.__root, {
                        'backgroundColor': __var__activeColor
                    }),
                    thumbStyle: Object.assign({}, __var__baseStyle.thumbStyle, {
                        'float': 'right',
                        'backgroundColor': __var__thumbSwitchedColor
                    })
                },
                state: true
            }, true, {
                erase: true
            });
        },
        toOffState: () => {
            __utils__setPrivateVars({
                baseStyle: {
                    __root: Object.assign({}, __var__baseStyle.__root, {
                        'backgroundColor': __var__defaultColor
                    }),
                    thumbStyle: Object.assign({}, __var__baseStyle.thumbStyle, {
                        'float': 'none',
                        'backgroundColor': __var__thumbColor
                    })
                },
                state: false
            }, true, {
                erase: true
            });
        },
        toggleState: () => {
            if (!__var__state) {
                __fn__toOnState();
            } else {
                __fn__toOffState();
            }
        },
        setSize: data => {
            __utils__setPublicVars({
                size: data
            });
            __fn__updateSize();
        },
        getSize: () => {
            return __var__size;
        },
        updateSize: () => {
            const sz = __var__size;
            const val = 2 * parseInt(sz);
            const unit = sz.replace(parseInt(sz), '');
            const switchObj = Object.assign({}, __var__baseStyle.__root, {
                'borderRadius': sz,
                'width': val + unit,
                'height': sz
            });
            const thumbObj = Object.assign({}, __var__baseStyle.thumbStyle, {
                'width': sz,
                'height': sz
            });
            const updatedStyleObj = {};
            updatedStyleObj['__root'] = switchObj;
            updatedStyleObj['thumbStyle'] = thumbObj;
            __utils__setPrivateVars({
                baseStyle: updatedStyleObj
            });
        }
    },
    eventHandlers: [{
        id: "switcheryMouseUpHandler",
        from: {
            switchery: "onMouseUp"
        },
        workflow: ["switcheryMouseUpHandler"]
    }],
    eventEmitters: [{
        id: "click",
        from: {
            switchery: "onClick"
        },
        emit: {
            switcheryClick: {
                payload: [{
                    what: "click",
                    as: "status"
                }]
            }
        }
    }, {
        id: "dblclick",
        from: {
            switchery: "onDoubleClick"
        },
        emit: {
            switcheryDoubleClick: {
                payload: [{
                    what: "dblclick",
                    as: "status"
                }]
            }
        }
    }, {
        id: "mouseenter",
        from: {
            switchery: "onMouseEnter"
        },
        emit: {
            switcheryMouseEnter: {
                payload: [{
                    what: "mouseenter",
                    as: "status"
                }]
            }
        }
    }, {
        id: "mouseleave",
        from: {
            switchery: "onMouseLeave"
        },
        emit: {
            switcheryMouseLeave: {
                payload: [{
                    what: "mouseleave",
                    as: "status"
                }]
            }
        }
    }, {
        id: "mousemove",
        from: {
            switchery: "onMouseMove"
        },
        emit: {
            switcheryMouseMove: {
                payload: [{
                    what: "mousemove",
                    as: "status"
                }]
            }
        }
    }, {
        id: "mousedown",
        from: {
            switchery: "onMouseDown"
        },
        emit: {
            switcheryMouseDown: {
                payload: [{
                    what: "mousedown",
                    as: "status"
                }]
            }
        }
    }, {
        id: "mouseover",
        from: {
            switchery: "onMouseOver"
        },
        emit: {
            switcheryMouseOver: {
                payload: [{
                    what: "mousemove",
                    as: "status"
                }]
            }
        }
    }, {
        id: "mouseout",
        from: {
            switchery: "onMouseOut"
        },
        emit: {
            switcheryMouseOut: {
                payload: [{
                    what: "mouseout",
                    as: "status"
                }]
            }
        }
    }, {
        id: "drag",
        from: {
            switchery: "onDrag"
        },
        emit: {
            switcheryDrag: {
                payload: [{
                    what: "drag",
                    as: "status"
                }]
            }
        }
    }, {
        id: "drop",
        from: {
            switchery: "onDrop"
        },
        emit: {
            switcheryDrop: {
                payload: [{
                    what: "drop",
                    as: "status"
                }]
            }
        }
    }, {
        id: "dragend",
        from: {
            switchery: "onDragEnd"
        },
        emit: {
            switcheryDragEnd: {
                payload: [{
                    what: "dragend",
                    as: "status"
                }]
            }
        }
    }, {
        id: "dragenter",
        from: {
            switchery: "onDragEnter"
        },
        emit: {
            switcheryDragEnter: {
                payload: [{
                    what: "dragenter",
                    as: "status"
                }]
            }
        }
    }, {
        id: "dragleave",
        from: {
            switchery: "onDragLeave"
        },
        emit: {
            switcheryDragLeave: {
                payload: [{
                    what: "dragleave",
                    as: "status"
                }]
            }
        }
    }, {
        id: "dragover",
        from: {
            switchery: "onDragOver"
        },
        emit: {
            switcheryDragOver: {
                payload: [{
                    what: "dragover",
                    as: "status"
                }]
            }
        }
    }, {
        id: "dragstart",
        from: {
            switchery: "onDragStart"
        },
        emit: {
            switcheryDragStart: {
                payload: [{
                    what: "dragstart",
                    as: "status"
                }]
            }
        }
    }, {
        id: "mousewheel",
        from: {
            switchery: "onWheel"
        },
        emit: {
            switcheryWheel: {
                payload: [{
                    what: "mousewheel",
                    as: "status"
                }]
            }
        }
    }, {
        id: "keydown",
        from: {
            switchery: "onKeyDown"
        },
        emit: {
            switcheryKeydown: {
                payload: [{
                    what: "keydown",
                    as: "status"
                }]
            }
        }
    }, {
        id: "keypress",
        from: {
            switchery: "onKeyPress"
        },
        emit: {
            switcheryKeypress: {
                payload: [{
                    what: "keypress",
                    as: "status"
                }]
            }
        }
    }, {
        id: "keyup",
        from: {
            switchery: "onKeyUp"
        },
        emit: {
            switcheryKeyup: {
                payload: [{
                    what: "keyup",
                    as: "status"
                }]
            }
        }
    }, {
        id: "touchstart",
        from: {
            switchery: "onTouchStart"
        },
        emit: {
            switcheryTouchStart: {
                payload: [{
                    what: "touchstart",
                    as: "status"
                }]
            }
        }
    }, {
        id: "touchend",
        from: {
            switchery: "onTouchEnd"
        },
        emit: {
            switcheryTouchEnd: {
                payload: [{
                    what: "touchend",
                    as: "status"
                }]
            }
        }
    }, {
        id: "touchmove",
        from: {
            switchery: "onTouchMove"
        },
        emit: {
            switcheryTouchMove: {
                payload: [{
                    what: "touchmove",
                    as: "status"
                }]
            }
        }
    }, {
        id: "touchcancel",
        from: {
            switchery: "onTouchCancel"
        },
        emit: {
            switcheryTouchCancel: {
                payload: [{
                    what: "touchcancel",
                    as: "status"
                }]
            }
        }
    }],
    localTemplates: {},
    structure: {
        type: "span",
        id: "switchery",
        props: {
            className: "__var__theme.__root",
            style: "Object.assign({},__var__baseStyle.__root,__var__compStyle.__root)"
        },
        children: [{
            type: "div",
            props: {
                style: "Object.assign({},__var__baseStyle.thumbStyle,__var__compStyle.thumbStyle)",
                className: "__var__theme.thumbClass"
            }
        }]
    },
    actions: [],
    workflows: {
        switcheryMouseUpHandler: (evtObj, payload, properties) => {
            if (!__var__disabled) {
                __fn__toggleState();
            }
            __evt__switcheryMouseUp({
                target: __var__target
            }, __var__state, properties);
        }
    },
    lifecycleHooks: {
        init: {
            before: () => {
                if (__var__publicDefaults != undefined) {
                    if (typeof __var__publicDefaults == "boolean") {
                        __utils__setPrivateVars({ state: __var__publicDefaults }, false);
                    }
                }
                if (__var__disabled == true) {
                    const switchObj = {
                        'cursor': 'not-allowed'
                    };
                    __utils__setPrivateVars({
                        baseStyle: {
                            __root: switchObj
                        }
                    });
                }
                __fn__updateSize();
                if (__var__state == true) {
                    __fn__toOnState();
                } else {
                    __fn__toOffState();
                }
            }
        },
        onModelChange: newExternalVariables => {
            if (newExternalVariables.size)
                if (__var__size != newExternalVariables.size)
                    __fn__updateSize();
            if (newExternalVariables.disabled != undefined) {
                if (__var__disabled != newExternalVariables.disabled) {
                    if (newExternalVariables.disabled) {
                        const switchObj = {
                            'cursor': 'not-allowed'
                        };
                        __utils__setPrivateVars({
                            baseStyle: {
                                __root: switchObj
                            }
                        });
                    } else {
                        const switchObj = {
                            'cursor': 'pointer'
                        };
                        __utils__setPrivateVars({
                            baseStyle: {
                                __root: switchObj
                            }
                        });
                    }
                }
            }
            if (newExternalVariables.state != undefined) {
                if (__var__state != newExternalVariables.state) {
                    if (newExternalVariables.state == true) {
                        __fn__toOnState();
                    } else {
                        __fn__toOffState();
                    }
                }
            }

        }
    }
};