/**
 * Shapes
 * Line
 * Project: Phoenix UI creator
 * Author: Debashish
 */


"use strict";

module.exports = {
    name: "shapeLine",
    imports: [
    ],
    variables: [{
        name: "alias",
        type: "string",
        defaultValue: "Line",
        metadata: [{
            displayName: "Alias",
            widget: "INPUT",
            widgetData: {},
            grouping: "General",
            target: "alias"
        }],
        isMandatory: false,
        scope: "public"

    },
        {
            name: "compStyle",
            type: "object",
            defaultValue: {
                __root: {
                    "width": 200,
                    "height": 25,
                    "stroke": "rgba(0,0,0,1)",
                    "strokeDasharray":0,
                    "strokeWidth": 1
                }
            },
            metadata: [{
                displayName: 'Line',
                widget: 'SHAPE_PROPERTIES',
                widgetData: {
                    hyperlinkTarget: 'hyperlink'
                },
                grouping: '',
                tab: 'Style',
                target: 'compStyle.__root'
            },{
                displayName: "Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.width"
            },
                {
                    displayName: "Stroke",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "General",
                    target: "compStyle.__root.stroke"
                },
                {
                    displayName: "Line-Width",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {},
                    grouping: "General",
                    target: "compStyle.__root.strokeWidth"
                },
                {
                    displayName: "Line Dash Width",
                    widget: "SLIDER",
                    widgetData: {
                        maxValue: 30,
                        minValue:0,
                        stepCount:1
                    },
                    grouping: "General",
                    target: "compStyle.__root.strokeDasharray"
                }
            ],
            scope: "public"
        },{
            name:"strokeOpacity",
            type: "number",
            defaultValue: 1,
            metadata: [
                {
                    displayName: "Stroke-Opacity",
                    widget: "SLIDER",
                    widgetData: {
                        maxValue: 1,
                        minValue:0,
                        stepCount:0.1
                    },
                    grouping: "General",
                    target: "strokeOpacity"
                }
            ],
            scope: "public"
        }
    ],
    functions: {},
    eventHandlers: [],
    eventEmitters: [],
    actions: [],
    workflows: {},
    localTemplates: {},
    structure: {

        type: "svg",
        props: {
            width: "__var__compStyle.__root.width",
            height: "__var__compStyle.__root.height",
        },
        children: [
            {
                type: "line",
                props: {
                    x1: 0,
                    x2: "__var__compStyle.__root.width",
                    y1: "__var__compStyle.__root.height/ 2",
                    y2: "__var__compStyle.__root.height / 2",
                    stroke: "__var__compStyle.__root.stroke",
                    strokeWidth: "__var__compStyle.__root.strokeWidth",
                    strokeDasharray: "__var__compStyle.__root.strokeDasharray",
                    strokeOpacity: "__var__strokeOpacity",
                    opacity:"__var__compStyle.__root.opacity"
                }

            }
        ]



    },
    lifecycleHooks: {
        init: {
            before: function() {

            },
            after: function() {}
        },
        onModelChange: function(newExternalVariables) {

        },
        reRender: {
            shouldAllow: function(newExternalVariables) {
                return true;
            },
            before: function(newExternalVariables) {

            },
            after: function(newExternalVariables) {

            }
        },
        cleanup: function() {

        }
    }

};
