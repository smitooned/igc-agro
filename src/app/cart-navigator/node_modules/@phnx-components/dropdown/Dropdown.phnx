/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "DropDown",
    includesDef: "@phnx-components/basedef/baseAPI.phnxdef",
    defVarMap: {
        class: "dropdownClassname",
        style: "style"
    },
    imports: [{
        type: "component",
        take: "textComp",
        from: "@phnx-components/text"
    }, {
        type: "component",
        take: "inputComp",
        from: "@phnx-components/input"
    }, {
        type: "css",
        from: "./css/dropdown.css"
    }],
    variables: [{
        name: "Data",
        defaultValue: [{
            name: "A"
        }, {
            name: "B"
        }, {
            name: "C"
        }, {
            name: "D"
        }],
        type: "array",
        scope: "public"
    }, {
        name: "DataMap",
        defaultValue: {
            key: "name",
            propSuffix: "content_",
            propMap: [{
                textContent: "content_name"
            }],
            eventList: ["textClick"]
        },
        type: "object",
        scope: "public"
    }, {
        name: "DisableDropDown",
        defaultValue: false,
        type: "boolean",
        scope: "public"
    }, {
        name: "Component",
        defaultValue: "__imports__textComp",
        type: "definition",
        scope: "public"
    }, {
        name: "style",
        properties: { erase: false },
        defaultValue: {
            __root: {},
            __OptionSelected: {},
            __OptionWrapper: {},
            __OptionList: {},
            __DropDownIcon: {},
            __SearchBoxWrapper: {},
            __DropDownWrapper: {
                top: "20px"
            },
            __SearchIcon: {}
        },
        type: "object",
        scope: "public"
    }, {
        name: "dropdownClassname",
        properties: { erase: false },
        defaultValue: {
            __root: "DropDownCompWrapper col-md-12 no-padding minWidth50",
            __OptionSelected: "DropDownSelectedWrapper bg-complete-darker col-md-12 p-t-0 p-r-0 p-b-0 p-l-5",
            __OptionWrapper: "DropDownOptionWrapper col-md-12 p-t-5 no-margin b-grey b-b",
            __OptionList: "DropDownOptionList col-md-12 no-padding",
            __DropDownIcon: "DropDownIcon text-master-light fa fa-caret-down",
            __SearchBoxWrapper: "DropDownSearchBoxWrapper col-md-12 p-t-5 p-r-0 p-b-5 p-l-5 b-b",
            __SearchField: "DropDownSearchField col-md-11 p-t-5",
            __SearchIcon: "DropDownSearchIcon fa fa-times-circle text-center col-md-1 no-margin",
            __DropDownWrapper: "DropDownWrapper col-md-12 no-padding bg-white b-a Close"
        },
        type: "object",
        scope: "public"
    }, {
        name: "DropDownOpen",
        type: "boolean",
        defaultValue: false,
        scope: "private"
    }, {
        name: "Handlers",
        defaultValue: {},
        type: "object",
        scope: "private"
    }, {
        name: "DisabledIndices",
        defaultValue: [],
        type: "array",
        scope: "private"
    }, {
        name: "Selected",
        type: "object",
        defaultValue: {
            index: 0,
            value: ""
        },
        scope: "public"
    }, {
        name: "NoSelectionMadeOnUI",
        type: "boolean",
        defaultValue: true,
        scope: "private"
    }, {
        name: "searchString",
        defaultValue: "",
        scope: "private"
    }, {
        name: "DisplayData",
        defaultValue: [],
        scope: "private"
    }, {
        name: "SearchPlaceHolder",
        type: "string",
        defaultValue: "",
        scope: "public"
    }, {
        name: "ToolTip",
        type: "string",
        defaultValue: "",
        scope: "public"
    }, {
        name: "SearchEnable",
        type: "boolean",
        defaultValue: false,
        scope: "public"
    }, {
        name: "PlaceHolderPropertyMap",
        type: "array",
        defaultValue: [{
            textContent: "Select an Option"
        }, {
            textClass: "col-md-12 no-padding no-margin full-height text-white h2 bg-complete-darker"
        }],
        scope: "public"
    }, {
        name: "SelectedPropertyMap",
        type: "array",
        defaultValue: [{
            textContent: "content_name",
            textTitle: "content_name"
        }, {
            textClass: "col-md-12 no-padding no-margin full-height text-white h2 bg-complete-darker"
        }],
        scope: "public"
    }, {
        name: "EnablePlaceHolder",
        type: "boolean",
        defaultValue: false,
        scope: "public"
    }, {
        name: "DisabledOptions",
        type: "object",
        defaultValue: {
            indices: [],
            value: [],
            expression: {
                fn: {},
                args: []
            },
            className: "DropDownDisabled",
            enable: false
        },
        scope: "public"
    }, {
        name: "HideOptions",
        type: "object",
        defaultValue: {
            indices: [],
            value: [],
            enable: false
        },
        scope: "public"
    }, {
        name: "Sort",
        type: "object",
        defaultValue: {
            enable: false,
            type: "ascending"
        },
        scope: "public"
    }, {
        name: "MaximumDisplaySize",
        type: "number",
        defaultValue: -1,
        scope: "public"
    }, {
        name: "hiddenOptions",
        type: "array",
        defaultValue: [],
        scope: "private"
    }],
    functions: {
        _getVisibility: Id_number => {
            return __var__hiddenOptions.find(index => {
                return index == Id_number;
            }) != undefined;
        },
        _getOptionSelectedClass: () => {
            if (__var__DisableDropDown)
                __fn__addClass('__OptionSelected', __var__DisabledOptions.className);
            else if (!__var__DisableDropDown && __fn__hasClass('__DropDownWrapper', __var__DisabledOptions.className))
                __fn__removeClass('__DropDownWrapper', __var__DisabledOptions.className);
            return __var__dropdownClassname.__OptionSelected;
        },
        _getOptionWrapperClass: index_number => {
            const hasClass = (currentClass, data_string) => {
                return currentClass.split(' ').indexOf(data_string) > -1;
            };
            const addClass = (currentClass, data_string) => {
                let newClass = currentClass;
                if (!hasClass(currentClass, data_string))
                    newClass += ' ' + data_string;
                return newClass;
            };
            const removeClass = (currentClass, data_string) => {
                let removedClass = currentClass;
                if (!hasClass(currentClass, data_string)) {
                    removedClass = removedClass.replace(data_string, '');
                    removedClass = removedClass.trim();
                }
                return removedClass;
            };
            let tempclass = __var__dropdownClassname.__OptionWrapper;
            if (__var__DisabledIndices.find(number => {
                    return number == index_number;
                }) != undefined && __var__DisabledOptions.enable)
                tempclass = addClass(tempclass, __var__DisabledOptions.className);
            else
                tempclass = removeClass(tempclass, __var__DisabledOptions.className);
            return tempclass;
        },
        _generateDropDown: () => {
            let Data = JSON.parse(JSON.stringify(__var__Data));
            __utils__setPrivateVars({
                DisplayData: Data
            }, false, {
                concat: false,
                erase: true
            });
            Data = __fn___sort(Data);
            let hidden = [];
            if (__var__HideOptions.enable) {
                hidden = __fn___hideOptions();
            }
            if (__var__SearchEnable && __var__searchString != '') {
                Data.map((obj, index) => {
                    if (obj[__var__DataMap.key].toUpperCase().search(__var__searchString.toUpperCase()) == -1 && hidden.find(temp => {
                            return temp == index;
                        }) == undefined)
                        hidden.push(index);
                });
            }
            __utils__setPrivateVars({
                hiddenOptions: hidden
            }, false, {
                concat: false,
                erase: true
            });
            __fn___disableOptions();
            __fn___generateHandlers();
            __fn___generateEvents();
            __utils__setPrivateVars({
                DisplayData: Data
            }, false, {
                concat: false,
                erase: true
            });
            return Data.map((data, uid) => {
                return __tmpl__Option;
            });
        },
        _generateProps: (uid_number, from_string) => {
            const prop = {};
            if (uid_number == -1)
                __var__PlaceHolderPropertyMap.forEach(obj => {
                    prop[Object.keys(obj)[0]] = __fn___generatePropValue(obj, uid_number);
                });
            else if (__var__SelectedPropertyMap && from_string == 'selected') {
                if (uid_number < __var__DisplayData.length) {
                    __var__SelectedPropertyMap.forEach(obj => {
                        prop[Object.keys(obj)[0]] = __fn___generatePropValue(obj, uid_number);
                    });
                } else if (__var__EnablePlaceHolder)
                    __var__PlaceHolderPropertyMap.forEach(obj => {
                        prop[Object.keys(obj)[0]] = __fn___generatePropValue(obj, -1);
                    });
                else if (__var__DisplayData.length > 0) {
                    __var__SelectedPropertyMap.forEach(obj => {
                        prop[Object.keys(obj)[0]] = __fn___generatePropValue(obj, 0);
                    });
                } else return {};

            } else {
                __var__DataMap.propMap.forEach(obj => {
                    prop[Object.keys(obj)[0]] = __fn___generatePropValue(obj, uid_number);
                });
            }
            return prop;
        },
        _generatePropValue: (obj_object, uid_number) => {
            const key = Object.keys(obj_object)[0];
            let val = obj_object[key];
            if (new RegExp('^' + __var__DataMap.propSuffix).test(val))
                val = __var__DisplayData[uid_number][val.substring(__var__DataMap.propSuffix.length)];
            return val;
        },
        _generateArguments: (obj_object, uid_number) => {
            return obj_object.args.map(arg => {
                if (new RegExp('^' + __var__DataMap.propSuffix).test(arg))
                    return __var__DisplayData[uid_number][arg.substring(__var__DataMap.propSuffix.length)];
                return arg;
            });
        },
        _generateEvents: () => {
            const Handlers = __var__Handlers;
            const EventMapOptionKey = Object.keys(this.__finalEventMap).filter(key => {
                return (/^Option/.test(key));
            });
            if (EventMapOptionKey.length > __var__DisplayData.length)
                for (let index = __var__DisplayData.length; index < EventMapOptionKey.length; index++) {
                    delete this.__finalEventMap['Option' + index];
                }
            __var__DisplayData.map((data, index) => {
                __var__DataMap.eventList.forEach(evt => {
                    this.__finalEventMap['Option' + index] = {};
                    this.__finalEventMap['Option' + index][evt] = (eventObj, payload, properties) => {
                        payload = Object.assign(payload, {
                            data: data,
                            id: 'Option' + index
                        });
                        if (Handlers[evt]) {
                            Handlers[evt](eventObj, payload, properties);
                        }
                    };
                });
            });
        },
        _generateHandlers: () => {
            const Handlers = __var__Handlers;
            Object.keys(__prop__).forEach(item => {
                if (typeof __prop__[item] == 'function' && item != 'dispatch') {
                    Handlers[item] = __prop__[item];
                }
            });
            __utils__setPrivateVars({
                Handlers: Handlers
            }, false, {
                concat: false,
                erase: true
            });
        },
        _getSelected: () => {
            let index = __var__Selected.index;
            if (__var__EnablePlaceHolder && __var__NoSelectionMadeOnUI) {
                index = -1;
            }
            return __tmpl__Selected;
        },
        _callComponentFunction: (array_array, uid_number) => {
            array_array.forEach(action => {
                __elId__['Option' + uid_number][action.fn].apply(null, __fn___generateArguments(action, uid_number));
            });
        },
        toggleDropDown: () => {
            if (__var__DropDownOpen) {
                __fn__closeDropDown();
            } else
                __fn__openDropDown();
        },
        openDropDown: update_boolean => {
            if (__var__DisableDropDown)
                return;
            __fn__addClass('__OptionSelected', 'Open');
            __fn__addClass('__DropDownWrapper', 'Open');
            __fn__removeClass('__DropDownWrapper', 'Close');
            __utils__setPrivateVars({
                DropDownOpen: true,
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
            setTimeout(() => {
                __fn__setMaximumDisplaySize();
                __fn__setTop();
            }, 0); //remove this hack
        },
        closeDropDown: update_boolean => {
            if (!__var__DropDownOpen)
                return;
            __fn__addClass('__OptionSelected', 'Close');
            __fn__removeClass('__DropDownWrapper', 'Open');
            __fn__addClass('__DropDownWrapper', 'Close');
            __utils__setPrivateVars({
                DropDownOpen: false,
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        setTop: update_boolean => {
            const style = __var__style;
            const SelectedWrapper = __elId__SelectedWrapper;
            style.__DropDownWrapper.top = +window.getComputedStyle(SelectedWrapper)['height'].split('px')[0] + +window.getComputedStyle(SelectedWrapper)['margin-bottom'].split('px')[0] + +window.getComputedStyle(SelectedWrapper)['margin-top'].split('px')[0] + +window.getComputedStyle(SelectedWrapper)['padding-bottom'].split('px')[0] + +window.getComputedStyle(SelectedWrapper)['padding-top'].split('px')[0];
            __utils__setPublicVars({
                style: style
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        _setSelected: (input_object, type_string) => {
            const Selected = __var__Selected;
            if (type_string == 'index') {
                if (input_object.index >= 0 && input_object.index < __var__DisplayData.length) {
                    Selected.index = input_object.index;
                    Selected.value = __var__DisplayData[Selected.index][__var__DataMap.key];
                    __wf__TempEmitOptionSelected(null, {
                        index: Selected.index,
                        value: Selected.value
                    }, null);
                    __utils__setPrivateVars({
                        Selected: Selected,
                        NoSelectionMadeOnUI: false
                    }, true, {
                        concat: false,
                        erase: true
                    });
                } else {
                    console.warn('Incorrect Index');
                }
            } else {
                const temp = __var__DisplayData.findIndex(obj => {
                    return obj[__var__DataMap.key] == input_object.value;
                });
                if (temp != -1) {
                    Selected.index = temp;
                    Selected.value = input_object.value;
                    __wf__TempEmitOptionSelected(null, {
                        index: Selected.index,
                        value: Selected.value
                    }, null);
                    __utils__setPrivateVars({
                        Selected: Selected,
                        NoSelectionMadeOnUI: false
                    }, true, {
                        concat: false,
                        erase: true
                    });
                } else {
                    console.warn('Invalid Value');
                }
            }
            __fn__closeDropDown(false);
        },
        _disableOptions: () => {
            const DisabledOptions = __var__DisabledOptions;
            if (!DisabledOptions.enable)
                return;

            let indices = [];
            let flag = true;
            if (DisabledOptions.indices.length) {
                indices = DisabledOptions.indices;
                flag = indices.filter(index => {
                    return index < 0 || index >= __var__DisplayData.length;
                }).length > 0 ? false : true;
            } else if (DisabledOptions.value.length) {
                indices = DisabledOptions.value.map(value => {
                    const index = __var__DisplayData.findIndex(obj => {
                        return obj[__var__DataMap.key] == value;
                    });
                    flag = index >= 0 || flag;
                });
            } else if (DisabledOptions.expression) {
                const fn = DisabledOptions.expression.fn;
                flag = typeof fn != 'function' ? false : flag;
                if (flag)
                    __var__DisplayData.map((obj, index) => {
                        if (fn.apply(null, __fn___generateArguments(DisabledOptions.expression, index)))
                            indices = indices.concat([index]);
                    });
            }
            if (!flag) {
                console.warn('Invalid index or value');
                return;
            }
            __utils__setPrivateVars({
                DisabledIndices: indices
            }, false, {
                concat: false,
                erase: true
            });

        },
        _hideOptions: () => {
            const hiddenOptions = __var__HideOptions;
            if (!hiddenOptions.enable)
                return;
            let indices = [];
            let flag = true;
            if (hiddenOptions.indices.length) {
                indices = hiddenOptions.indices;
                flag = indices.filter(index => {
                    return index < 0 || index >= __var__Data.length;
                }).length > 0 ? false : true;
            } else if (hiddenOptions.value.length) {
                indices = hiddenOptions.value.map(value => {
                    const index = __var__Data.findIndex(obj => {
                        return obj[__var__DataMap.key] == value;
                    });
                    flag = index >= 0 || flag;
                    return index;
                });
            } else if (hiddenOptions.expression) {
                const fn = hiddenOptions.expression.fn;
                flag = typeof fn != 'function' ? false : flag;
                if (flag) {
                    __var__Data.map((obj, index) => {
                        if (fn.apply(null, __fn___generateArguments(hiddenOptions.expression, index))) {
                            indices = indices.concat([index]);
                        }
                    });
                }
            }
            if (!flag) {
                console.warn('Invalid index or value');
                return [];
            }
            return indices;

        },
        disableDropDown: () => {
            /*Set class of selected wrapper and call fn of  repeated  component with style cursor: not-allowed;*/
            if (!__var__DisableDropDown)
                __utils__setPrivateVars({
                    DisableDropDown: true
                }, true);
        },
        enableDropDown: () => {
            /*Set class of selected wrapper and call fn of  repeated  component with style cursor: not-allowed;*/
            if (__var__DisableDropDown)
                __utils__setPrivateVars({
                    DisableDropDown: false
                }, false);
        },
        setMaximumDisplaySize: () => {
            const MaximumDisplaySize = __var__MaximumDisplaySize;
            if (!MaximumDisplaySize >= 0)
                return;
            let Option;
            let height = 0;
            for (let index = 0; index < MaximumDisplaySize; index++) {
                Option = __elId__['OptionWrapper' + index];
                if (Option) {
                    height += +window.getComputedStyle(Option)['height'].split('px')[0] +
                        +window.getComputedStyle(Option)['margin-bottom'].split('px')[0] +
                        +window.getComputedStyle(Option)['margin-top'].split('px')[0] +
                        +window.getComputedStyle(Option)['padding-bottom'].split('px')[0] +
                        +window.getComputedStyle(Option)['padding-top'].split('px')[0];
                }
            }
            const style = __var__style;
            Object.assign(style.__OptionList, {
                'overflowY': 'scroll',
                'overflowX': 'hidden',
                'maxHeight': height + 'px'
            });
            __utils__setPublicVars({
                style: style
            }, true, {
                erase: false
            });

        },
        _sort: Data_object => {
            const Sort = __var__Sort;
            let Sorted = [];
            if (!(Sort.enable && (Sort.type == 'ascending' || Sort.type == 'descending'))) {
                return Data_object;
            }
            const key = __var__DataMap.key;
            if (__var__DataMap.type == 'number') {
                Data_object.sort((a, b) => {
                    return a[key] - b[key];
                });
            } else if (__var__DataMap.type == 'string') {
                Sorted = Data_object.sort((a, b) => {
                    return a[key].toUpperCase().localeCompare(b[key].toUpperCase());
                });
            } else if (__var__DataMap.type == 'date') {
                Sorted = Data_object.sort((a, b) => {
                    const dateA = new Date(a[key]).getTime();
                    const dateB = new Date(b[key]).getTime();
                    return dateA > dateB ? 1 : -1;
                });
            }
            if (Sort.type == 'descending') {
                Sorted.reverse();
            }
            return Sorted;
        },
        getSearchPlaceHolder: () => {
            return __var__SearchPlaceHolder || ('Search ' + __var__DataMap.key);
        },
        SetData: (val_object, update_boolean) => {
            __utils__setPrivateVars({
                Data: val_object
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetDataMap: (val_object, update_boolean) => {
            __utils__setPrivateVars({
                DataMap: val_object
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetComponent: (val_definition, update_boolean) => {
            __utils__setPrivateVars({
                Component: val_definition
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetSelected: (val_object) => {
            if (val_object.index != undefined) {
                __fn___setSelected({
                    index: val_object.index
                }, 'index');
            } else if (val_object.value != undefined) {
                __fn___setSelected({
                    index: val_object.value
                }, 'value');
            }
        },
        SetToolTip: (val_string, update_boolean) => {
            __utils__setPrivateVars({
                ToolTip: val_string
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetSearchEnable: (val_boolean, update_boolean) => {
            __utils__setPrivateVars({
                SearchEnable: val_boolean
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetPlaceHolderPropertyMap: (val_array, update_boolean) => {
            __utils__setPrivateVars({
                PlaceHolderPropertyMap: val_array
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetSelectedPropertyMap: (val_array, update_boolean) => {
            __utils__setPrivateVars({
                SelectedPropertyMap: val_array
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetEnablePlaceHolder: (val_boolean, update_boolean) => {
            __utils__setPrivateVars({
                EnablePlaceHolder: val_boolean
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetDisabledOptions: (val_object, update_boolean) => {
            __utils__setPrivateVars({
                DisabledOptions: val_object
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetHideOptions: (val_object, update_boolean) => {
            __utils__setPrivateVars({
                HideOptions: val_object
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetSort: (val_object, update_boolean) => {
            __utils__setPrivateVars({
                Sort: val_object
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        SetMaximumDisplaySize: (val_number, update_boolean) => {
            __utils__setPrivateVars({
                MaximumDisplaySize: val_number
            }, update_boolean == undefined ? true : update_boolean, {
                concat: false,
                erase: false
            });
        },
        GetData: () => {
            return __var__Data;
        },
        GetDataMap: () => {
            return __var__DataMap;
        },
        GetComponent: () => {
            return __var__Component;
        },
        GetSelected: () => {
            return __var__Selected;
        },
        GetToolTip: () => {
            return __var__ToolTip;
        },
        GetSearchEnable: () => {
            return __var__SearchEnable;
        },
        GetPlaceHolderPropertyMap: () => {
            return __var__PlaceHolderPropertyMap;
        },
        GetSelectedPropertyMap: () => {
            return __var__SelectedPropertyMap;
        },
        GetEnablePlaceHolder: () => {
            return __var__EnablePlaceHolder;
        },
        GetDisabledOptions: () => {
            return __var__DisabledOptions;
        },
        GetHideOptions: () => {
            return __var__HideOptions;
        },
        GetSort: () => {
            return __var__Sort;
        },
        GetMaximumDisplaySize: () => {
            return __var__MaximumDisplaySize;
        }
    },
    eventHandlers: [{
        id: "OptionClicked",
        from: {
            "OptionWrapper*": "onClick"
        },
        workflow: ["OptionSelector"]
    }, {
        id: "DropDownClicked",
        from: {
            SelectedWrapper: "onClick"
        },
        workflow: ["OptionListVisibilityToggler"]
    }, {
        id: "searchFieldKeyPressed",
        from: {
            searchField: "onKeyUp"
        },
        workflow: ["searchTrigger"]
    }, {
        id: "clearSearchClicked",
        from: {
            searchIcon: "onClick"
        },
        workflow: ["clearSearch"]
    }, {
        id: "DropDownClicked",
        from: {
            DropDownCompWrapper: "onMouseLeave"
        },
        workflow: ["DropDownCloser"]
    }],
    eventEmitters: [{
        id: "OptionSelectedEmitter",
        from: null,
        emit: {
            DropDownOptionSelected: {
                payload: []
            }
        }
    }],
    actions: [],
    workflows: {
        OptionSelector: (eventObj) => {
            const uid = eventObj.currentTarget.dataset.uid;
            __fn___setSelected({
                index: uid
            }, 'index');
        },
        OptionListVisibilityToggler: () => {
            __fn__toggleDropDown();
        },
        TempEmitOptionSelected: (eventObj, payload) => {
            __evt__DropDownOptionSelected(null, {
                data: __var__DisplayData[payload.index],
                index: payload.index,
                value: payload.value
            }, {
                status: 'OptionSelected'
            });
        },
        DropDownCloser: () => {
            __fn__closeDropDown();
        },
        searchTrigger: () => {
            const searchString = __elId__searchField.getText();
            __utils__setPrivateVars({
                searchString: searchString
            }, true, {
                concat: false,
                erase: true
            });
        },
        clearSearch: () => {
            __elId__searchField.setText('');
            __utils__setPrivateVars({
                searchString: ''
            }, true, {
                concat: false,
                erase: true
            });
        }
    },
    localTemplates: {
        Selected: {
            type: "div",
            props: {},
            children: [{
                id: "Selected",
                type: "__var__Component",
                isComp: true,
                props: "__fn___generateProps(__fnParam__index,'selected')"
            }, {
                type: "i",
                props: {
                    style: "__var__style.__DropDownIcon",
                    className: "__var__dropdownClassname.__DropDownIcon"
                }
            }]
        },
        Option: {
            id: "'OptionWrapper'+__fnParam__uid",
            type: "div",
            props: {
                style: "__var__style.__OptionWrapper",
                className: "__fn___getOptionWrapperClass(__fnParam__uid)",
                "data-uid": "__fnParam__uid",
                hidden: "__fn___getVisibility(__fnParam__uid)"
            },
            children: [{
                id: "'Option'+__fnParam__uid",
                type: "__var__Component",
                isComp: true,
                props: "__fn___generateProps(uid)"
            }]
        }
    },
    structure: {
        type: "div",
        id: "DropDownCompWrapper",
        props: {
            className: "__var__dropdownClassname.__root",
            style: "__var__style.__root",
            title: "__var__ToolTip"
        },
        children: [{
            id: "SelectedWrapper",
            type: "div",
            props: {
                className: "__fn___getOptionSelectedClass()",
                style: "__var__style.__OptionSelected"
            },
            children: "__fn___getSelected()"
        }, {
            type: "div",
            props: {
                style: "__var__style.__DropDownWrapper",
                className: "__var__dropdownClassname.__DropDownWrapper"
            },
            children: [{
                id: "searchBoxWrapper",
                type: "div",
                props: {
                    style: "__var__style.__SearchBoxWrapper",
                    className: "__var__dropdownClassname.__SearchBoxWrapper",
                    hidden: "function(){return !__var__SearchEnable;}"
                },
                children: [{
                    id: "searchField",
                    type: "__imports__inputComp",
                    props: {
                        inputThemes: {
                            __root: "__var__dropdownClassname.__SearchField"
                        },
                        ext_placeholder: "__fn__getSearchPlaceHolder()"
                    }
                }, {
                    id: "searchIcon",
                    type: "i",
                    props: {
                        style: "__var__style.__SearchIcon",
                        className: "__var__dropdownClassname.__SearchIcon",
                        title: "Clear Search"
                    }
                }]
            }, {
                id: "OptionList",
                type: "div",
                props: {
                    style: "__var__style.__OptionList",
                    className: "__var__dropdownClassname.__OptionList"
                },
                children: "__fn___generateDropDown()"
            }]
        }]
    },
    lifecycleHooks: {
        init: {
            before: () => {
                const Data = __var__Data;
                __utils__setPrivateVars({
                    DisplayData: Data
                }, false, {
                    concat: false,
                    erase: true
                });
            },
        },
        reRender: {}
    }
};