/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "Tab",
    includesDef: "@phnx-components/basedef/baseAPI.phnxdef",
    defVarMap: {
        class: "theme",
        style: "compStyle"
    },
    variables: [{
        name: "alias",
        type: "string",
        defaultValue: "Tab",
        metadata: [{
            displayName: "Alias",
            widget: "INPUT",
            widgetData: {},
            grouping: "Name",
            target: "alias"
        }],
        isMandatory: false,
        scope: "public"

    }, {
        name: "ext_TabActive",
        type: "string",
        scope: "private"
    }, {
        name: "TabContentActive",
        type: "string",
        defaultValue: "active",
        scope: "private"
    }, {
        name: "TabData",
        type: "array",
        defaultValue: [],
        scope: "private"
    }, {
        name: "TabHeadDefinition",
        type: "definition",
        defaultValue: false,
        scope: "public"
    }, {
        name: "TabHeadContainerDefinition",
        type: "definition",
        defaultValue: false,
        scope: "public"
    }, {
        name: "TabHeadMap",
        type: "object",
        scope: "public"
    }, {
        name: "tabHead",
        type: "object",
        defaultValue: {},
        scope: "public"
    }, {
        name: "compStyle",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: {},
            tabContainer: {
                minHeight: "calc(100% - 48px)",
                position: "relative",
                maxHeight: "95%"
            },
            tabContent: {
                overflow: "hidden",
                height: "100%",
                width: "100%",
                position: "absolute",
                backgroundColor: "ghostwhite"
            },
            tabHeadContainer: {}
        },
        isMandatory: false,
        scope: "public"
    }, {
        name: "theme",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: "no-border full-height full-width no-margin ",
            tabContainer: "tab-content no-padding ",
            tabHeadContainer: "nav nav-tabs nav-tabs-simple bg-white",
            tabPane: "tab-pane"
        },
        isMandatory: false,
        scope: "public"
    }, {
        name: "InitialTemplate",
        type: "element",
        defaultValue: {},
        scope: "public"
    }, {
        name: "noTabs",
        defaultValue: true,
        scope: "private"
    }, {
        name: "eventsRequired",
        defaultValue: {},
        scope: "private"
    }, {
        name: "config",
        type: 'object',
        defaultValue: {},
        scope: "public"
    }],
    imports: [{
        type: "component",
        take: "ListComponent",
        from: "@phnx-components/list"
    }, {
        type: "component",
        take: "listContainer",
        from: "./TabHeadContainer.phnx"
    }, {
        type: "component",
        take: "tabHead",
        from: "./TabHead.phnx"
    }],
    localTemplates: {
        tabContent: {
            id: "'contentContainer_' + __fnParam__data.id",
            type: "div",
            props: {
                className: "__var__theme.tabPane+' '+(__fnParam__isActive?  __var__TabContentActive : '')",
                style: "__var__compStyle.tabContent",
                key: "__fnParam__data.id"
            },
            children: "__fn___renderContent(__fnParam__data)"
        },
        contentWithComponent: {
            type: "__fnParam__template.type",
            isComp: true,
            props: "__fnParam__template.props"
        },
        contentWithTag: {
            type: "__fnParam__template.type",
            isComp: false,
            props: "__fnParam__template.props",
            children: "__fnParam__template.children"
        },
        tabHead: {
            id: "tabHeader",
            type: "__imports__ListComponent",
            props: "__fnParam__tabHeadProps"
        },
        tabInitial: {
            type: "div",
            props: {
                className: "__var__theme.__root",
                style: "__var__compStyle.__root"
            },
            children: ["__fn___createTabHead()", {
                type: "div",
                props: {
                    className: "__var__theme.tabContainer",
                    style: "__var__compStyle.tabContainer"
                },
                children: "__fn___tabContent()"
            }]
        }
    },
    eventHandlers: [{
        id: "selectedEventHandler",
        from: {
            tabHeader: "elementSelected"
        },
        workflow: ["selectedEventHandler"]
    }, {
        id: "closeTab",
        from: {
            tabHeader: "closeTab"
        },
        workflow: ["closeTab"]
    }],
    structure: "__fn___createTabs()",
    functions: {
        _initializeTabs: () => {
            Object.keys(__prop__).forEach(item => {
                if (typeof __prop__[item] === 'function') {
                    __var__eventsRequired[item] = __prop__[item];
                }
            });
        },
        _createTabs: () => {
            if (__var__TabData.length != 0) {
                __utils__setPrivateVars({
                    noTabs: false
                }, false);
                if (!__var__ext_TabActive) {
                    __utils__setPrivateVars({
                        ext_TabActive: __var__TabData[0].id
                    }, false);
                }
            } else {
                __utils__setPrivateVars({
                    noTabs: true
                }, false);
            }
            if (__var__noTabs) {
                return __var__InitialTemplate;
            }
            return __tmpl__tabInitial;
        },
        _createTabHead: () => {
            if (__var__TabHeadContainerDefinition) {
                if (typeof __var__TabHeadContainerDefinition == 'function') {
                    return __var__TabHeadContainerDefinition(__var__TabData);
                }
                return __var__TabHeadContainerDefinition;
            } else {
                const map = Object.assign({}, __var__TabHeadMap);
                let temp;
                temp = __var__TabData.map(item => {
                    item.tabActive = 'active';
                    return item;
                });
                const tabHeadProps = {
                    listContainer: __imports__listContainer,
                    data: temp,
                    containerProps: {
                        headClass: __var__theme.tabHeadContainer,
                        headPrefix: __var__tabHead.prefix,
                        headPostfix: __var__tabHead.postfix,
                        headStyle: __var__compStyle.tabHeadContainer
                    },
                    chooseTemplate: () => {
                        return 'default';
                    },
                    templates: {
                        default: {
                            template: __fn___chooseTabHead(),
                            dataMapping: map,
                            events: __fn___getEvents()
                        }
                    }
                };
                const events = {};
                Object.keys(__var__eventsRequired).forEach(item => {
                    if (item.split('#')[0] == 'tabComp') {
                        events[item.split('#')[1]] = (evt, payload, props) => {
                            __var__eventsRequired[item](evt, payload, props);
                        };
                    }
                });
                __utils__addDynamicEvents('tabHeader', events);
                return __tmpl__tabHead;
            }
        },
        _chooseTabHead: () => {
            if (__var__TabHeadDefinition)
                return __var__TabHeadDefinition;
            else return __imports__tabHead;
        },
        _tabContent: () => {
            return __var__TabData.map(data => {
                let isActive = false;
                if (data.id === __var__ext_TabActive) {
                    isActive = true;
                }
                if (!data.template)
                    data.template = {};
                return __tmpl__tabContent;
            });
        },
        _renderContent: (data) => {
            if (data.hasOwnProperty('staticTab'))
                return data.staticTab;
            else if (data.tabType) {
                data.template = __fn___getTabType(data, data.tabType);
                const template = data.template;
                data.__tabEl = typeof template.type == 'string' ? __tmpl__contentWithTag : __tmpl__contentWithComponent;
                return data.__tabEl;
            } else {
                console.warn('something went wrong while rendering tab', data); //eslint-disable-line
            }
        },
        _getTabType: (data, type) => {
            const cfg = __var__config[type];
            data.template = data.template || {};
            return Object.assign(data.template, {
                type: cfg.type,
                props: __fn___makeProps(data, cfg.propMapping || {}, cfg),
                defaults: __fn___makeDefaults(data, cfg.defaultMapping || {}, cfg)
            });
        },
        _getTabId: (data, type) => {
            return `${type}_${data[__var__config[type]['idAttribute']||'id']}`;
        },
        _makeProps: (data, propMapping, cfg) => {
            const props = data.template.props || {
                id: data[cfg.idAttribute || 'id'],
                key: data[cfg.idAttribute || 'id']
            };
            Object.keys(propMapping).forEach(key => {
                props[key] = data[propMapping[key]];
            });
            return props;
        },
        _makeDefaults: (data, defaultMapping) => {
            const defaults = data.template.defaults || {};
            Object.keys(defaultMapping).forEach(key => {
                defaults[key] = data[defaultMapping[key]];
            });
            return defaults;
        },
        _getEvents: () => {
            const events = ['elementSelected', 'closeTab'];
            Object.keys(__var__eventsRequired).forEach(item => {
                if (item.split('#')[0] == 'tabComp') {
                    events.push(item.split('#')[1]);
                }
            });
            return events;
        },
        _tabContentActive: cl => {
            __utils__setPrivateVars({
                TabContentActive: cl
            }, false);
        },
        getContent: id_string => {
            return __var__TabData.find(val => {
                return val.id == id_string;
            });
        },
        getActiveTab: () => {
            return __var__TabData.find(item => {
                return item.id == __var__ext_TabActive;
            });
        },
        switchTab: id_string => {
            __utils__setPrivateVars({
                ext_TabActive: id_string
            }, true, {
                concat: false
            });
        },
        tabFillUp: () => {
            __fn__addClass('tabHeadContainer', 'nav-tabs-fillup');
        },
        resetTabFillUp: () => {
            __fn__removeClass('tabHeadContainer', 'nav-tabs-fillup');
        },
        tabSimple: () => {
            __fn__addClass('tabHeadContainer', 'nav-tabs-simple');
        },
        resetTabSimple: () => {
            __fn__removeClass('tabHeadContainer', 'nav-tabs-simple');
        },
        tabLineTriangle: () => {
            __fn__addClass('tabHeadContainer', 'nav-tabs-linetriangle');
        },
        resetTabLineTriangle: () => {
            __fn__removeClass('tabHeadContainer', 'nav-tabs-linetriangle');
        },
        resetTabHead: () => {
            __fn__setClass('tabHeadContainer', 'nav nav-tabs nav-tabs-simple');
        },
        resetTabPane: () => {
            __fn___tabContentActive('active');
            __fn__setClass('tabPane', 'tab-pane');
        },
        tabFade: () => {
            __fn___tabContentActive('active in');
            __fn__addClass('tabPane', 'fade');
        },
        resetTabFade: () => {
            __fn___tabContentActive('active');
            __fn__removeClass('tabPane', 'fade');
        },
        slideLeftTabContent: () => {
            __fn__addClass('tabPane', 'slide-left');
        },
        resetSlideLeftTabContent: () => {
            __fn__removeClass('tabPane', 'slide-left');
        },
        slideRightTabContent: () => {
            __fn__addClass('tabPane', 'slide-right');
        },
        resetSlideRightTabContent: () => {
            __fn__removeClass('tabPane', 'slide-right');
        },
        leftTab: () => {
            __fn__addClass('tabHeadContainer', 'nav-tabs-left');
        },
        resetLeftTab: () => {
            __fn__removeClass('tabHeadContainer', 'nav-tabs-left');
        },
        rightTab: () => {
            __fn__addClass('tabHeadContainer', 'nav-tabs-right');
        },
        resetRightTab: () => {
            __fn__removeClass('tabHeadContainer', 'nav-tabs-right');
        },
        topTab: () => {
            __fn__resetTabHead();
        },
        addTab: (data, type) => {
            data.tabType = data.tabType || type;
            if (__var__config.hasOwnProperty(data.tabType)) {
                __fn___newTab(data);
                __fn__switchTab(data.id);
            } else if (data.hasOwnProperty('staticTab')) {
                __fn___newStaticTab(data);
                __fn__switchTab(data.id);
            } else console.warn('Tab is not configured to render type:', data.tabType); //eslint-disable-line
        },
        addTabs: (contents_array, activeIndex) => {
            if (contents_array.length > 0) {
                contents_array.forEach((item) => {
                    __fn___newTab(item);
                });
                __fn__switchTab(contents_array[activeIndex || (contents_array.length - 1)].id);
            }
        },
        updateTab: (data, type) => {
            data.tabType = data.tabType || type;
            data.id = __fn___getTabId(data, data.tabType);
            const TabData = __var__TabData;
            if (TabData.find(el => el.id == data.id)) {
                TabData.forEach(el => {
                    if (el.id == data.id) {
                        el = Object.assign(el, data);
                    }
                    return el;
                });
                __utils__setPrivateVars({
                    TabData: TabData
                }, true, {
                    concat: false
                });
            } else console.warn('Tab is not present:', type); //eslint-disable-line
        },
        _newTab: (data) => {
            data.id = __fn___getTabId(data, data.tabType);
            if (!__var__TabData.find((item) => item.id == data.id)) {
                __utils__setPrivateVars({
                    TabData: [data],
                    noTabs: false
                }, false, {
                    concat: true
                });
                __wf__switchTab(data);
            }
        },
        _newStaticTab: (data) => {
            data.id = 'static' + Math.floor(Math.random() * 10000);
        },
        removeTab: (id_string, type) => {
            if (typeof type == 'string') {
                id_string = `${type}_${id_string}`;
            }
            let x = null;
            const tab = __var__TabData;
            for (let i = 0; i < tab.length; i++) {
                if (tab[i].id == id_string) {
                    x = i;
                }
            }
            if (x == null)
                return;
            if (id_string == __fn__getActiveTab().id) {
                if (x == 0 && tab.length > 1) {
                    __wf__switchTab(tab[1]);
                }
                if (x > 0) {
                    __wf__switchTab(tab[x - 1]);
                }
            }
            if (!isNaN(parseInt(x))) {
                tab.splice(x, 1);
                if (tab.length == 0) __utils__setPrivateVars({
                    noTabs: true
                }, true);
            }
            __utils__setPrivateVars({
                TabData: tab
            }, true, {
                concat: false
            });
        },
        closeAllTabs: () => {
            __var__TabData.forEach(tab => {
                __fn__removeTab(tab.id);
            });
        },
        closeOtherTabs: id_string => {
            const tab = __var__TabData;
            tab.forEach(t => {
                if (t.id != id_string) __fn__removeTab(t.id);
            });
            __fn__switchTab(id_string);
        },
        closeAllRightTabs: id_string => {
            const tab = __var__TabData;
            let x = 0;
            for (let i = 0; i < tab.length; i++) {
                if (tab[i].id == id_string) {
                    x = i;
                }
            }
            tab.forEach((t, i) => {
                if (i > x) __fn__removeTab(t.id);
            });
            __fn__switchTab(id_string);
        },
        closeAllLeftTabs: id_string => {
            const tab = __var__TabData;
            let x = 0;
            for (let i = 0; i < tab.length; i++) {
                if (tab[i].id == id_string) {
                    x = i;
                }
            }
            tab.forEach((t, i) => {
                if (i < x) __fn__removeTab(t.id);
            });
            __fn__switchTab(id_string);
        }
    },
    lifecycleHooks: {
        init: {
            before: () => {
                __fn___initializeTabs();
                Object.keys(__var__config).forEach((tabType) => {
                    if (!(typeof __var__config[tabType].type == 'string' || typeof __var__config[tabType].type == 'function')) {
                        console.error(`Tabs can\'t be initialized with type ${tabType}`); //eslint-disable-line
                    }
                });
            },
        },
        reRender: {}
    },
    eventEmitters: [],
    actions: [],
    workflows: {
        selectedEventHandler: (eventObj, payload) => {
            __evt__switchedTab({}, {
                data: payload.data
            }, {});
            __fn__switchTab(payload.data.id);
        },
        closeTab: (eventObj, payload) => {
            __evt__removedTab({}, {
                id: payload.data.id
            }, {});
        },
        switchTab: data => {
            __utils__setPrivateVars({
                ext_TabActive: data.id
            }, true, {
                concat: false
            });
            __evt__switchedTab({}, {
                data: data
            }, {});
        }

    }
};