/**
 * This is the  definition file that is being
 * created for all style APIs
 */
const baseDef = require('@phoenix/phnx-loader/lib/base-def'); //Initial definition has to import this particular file
module.exports = Object.assign(baseDef, {
    varMap: {
        style: "style"
    },
    setStyle: function(skey, data_object) {
        const updateObj = {};
        updateObj[skey] = {};
        updateObj[skey] = data_object;
        __utils__setPublicVars({
            [__utils__mapDefVarNames("style")]: updateObj
        });
    },
    resetStyle: function(skey) {
        const updateObj = {};
        updateObj[skey] = {};
        __utils__setPublicVars({
            [__utils__mapDefVarNames("style")]: updateObj
        }, { erase: true, concat: false });
    },
    resetStyleAttribute: function(skey, attribute_string, type_string, separator_string) {
        if (__evar__[__utils__mapDefVarNames("style")][skey][attribute_string]) {
            const a = __evar__[__utils__mapDefVarNames("style")][skey][attribute_string].split(separator_string);
            let el = true;
            while (el != undefined) {
                el = a.filter((z) => {
                    return z.includes(type_string);
                })[0];
                if (el != undefined) {
                    a.splice(a.indexOf(el), 1);
                    const obj = {};
                    obj[attribute_string] = a.join(separator_string).trim() || null;
                    __fn__setStyle(skey, obj);
                }
            }
        }
    },
    defineProp: function(skey, prop_string) {
        if (__evar__[__utils__mapDefVarNames("style")][skey][prop_string] == undefined) {
            const obj = {};
            obj[prop_string] = '';
            __fn__setStyle(skey, obj);
        }
    },
    deleteProp: function(skey, prop_string) {
        delete __evar__[__utils__mapDefVarNames("style")][skey][prop_string];
    },
    getStyle: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey];
    },
    getFontSize: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['fontSize'];
    },
    setFontSize: function(skey, data_string) {
        __fn__setStyle(skey, {
            'fontSize': data_string
        });
    },
    getFontFamily: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['fontFamily'];
    },
    setFontFamily: function(skey, data_string) {
        __fn__setStyle(skey, {
            'fontFamily': data_string
        });
    },
    getFontStyle: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['fontStyle'];
    },
    setFontStyle: function(skey, data_string) {
        __fn__setStyle(skey, {
            'fontStyle': data_string
        });
    },
    getFontWeight: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['fontWeight'];
    },
    setFontWeight: function(skey, data_string) {
        __fn__setStyle(skey, {
            'fontWeight': data_string
        });
    },
    getFontVariant: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['fontVariant'];
    },
    setFontVariant: function(skey, data_string) {
        __fn__setStyle(skey, {
            'fontVariant': data_string
        });
    },
    getFont: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['font'];
    },
    setFont: function(skey, value_string) {
        __fn__setStyle(skey, {
            'font': value_string
        });
    },
    getTextColor: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['color'];
    },
    setTextColor: function(skey, data_string) {
        __fn__setStyle(skey, {
            'color': data_string
        });
    },
    getBackgroundColor: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['backgroundColor'];
    },
    setBackgroundColor: function(skey, data_string) {
        __fn__setStyle(skey, {
            'backgroundColor': data_string
        });
    },
    getBackgroundImage: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['backgroundImage'];
    },
    setBackgroundImage: function(skey, src_string) {
        __fn__setStyle(skey, {
            'backgroundImage': src_string
        });
    },
    getBackground: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['background'];
    },
    setBackground: function(skey, newBackground_string) {
        __fn__setStyle(skey, {
            'background': newBackground_string
        });
    },
    resetBackground: function(skey) {
        __fn__deleteProp(skey, 'background');
    },
    getBorder: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['border'];
    },
    setBorder: function(skey, value_string) {
        __fn__setStyle(skey, {
            'border': value_string
        });
    },
    resetBorder: function(skey) {
        __fn__deleteProp(skey, 'border');
    },
    getBorderColor: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderColor'];
    },
    setBorderColor: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderColor': value_string
        });
    },
    getBorderWidth: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderWidth'];
    },
    setBorderWidth: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderWidth': value_string
        });
    },
    getBorderStyle: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderStyle'];
    },
    setBorderStyle: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderStyle': value_string
        });
    },
    getBorderTop: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderTop'];
    },
    setBorderTop: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderTop': value_string
        });
    },
    getBorderBottom: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderBottom'];
    },
    setBorderBottom: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderBottom': value_string
        });
    },
    getBorderLeft: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderLeft'];
    },
    setBorderLeft: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderLeft': value_string
        });
    },
    getBorderRight: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderRight'];
    },
    setBorderRight: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderRight': value_string
        });
    },
    getBorderTopColor: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderTopColor'];
    },
    setBorderTopColor: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderTopColor': value_string
        });
    },
    getBorderTopWidth: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderTopWidth'];
    },
    setBorderTopWidth: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderTopWidth': value_string
        });
    },
    getBorderTopStyle: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderTopStyle'];
    },
    setBorderTopStyle: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderTopStyle': value_string
        });
    },
    getBorderBottomColor: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderBottomColor'];
    },
    setBorderBottomColor: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderBottomColor': value_string
        });
    },
    getBorderBottomWidth: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderBottomWidth'];
    },
    setBorderBottomWidth: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderBottomWidth': value_string
        });
    },
    getBorderBottomStyle: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderBottomStyle'];
    },
    setBorderBottomStyle: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderBottomStyle': value_string
        });
    },
    getBorderLeftColor: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderLeftColor'];
    },
    setBorderLeftColor: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderLeftColor': value_string
        });
    },
    getBorderLeftWidth: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderLeftWidth'];
    },
    setBorderLeftWidth: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderLeftWidth': value_string
        });
    },
    getBorderLeftStyle: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderLeftStyle'];
    },
    setBorderLeftStyle: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderLeftStyle': value_string
        });
    },
    getBorderRightColor: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderRightColor'];
    },
    setBorderRightColor: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderRightColor': value_string
        });
    },
    getBorderRightWidth: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderRightWidth'];
    },
    setBorderRightWidth: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderRightWidth': value_string
        });
    },
    getBorderRightStyle: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['borderRightStyle'];
    },
    setBorderRightStyle: function(skey, value_string) {
        __fn__setStyle(skey, {
            'borderRightStyle': value_string
        });
    },
    getBoxShadow: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['boxShadow'];
    },
    setBoxShadow: function(skey, value_string) {
        __fn__setStyle(skey, {
            'boxShadow': value_string
        });
    },
    getPositionByDirection: function(skey, direction_string) {
        return __evar__[__utils__mapDefVarNames("style")][skey][direction_string];
    },
    setPositionByDirection: function(skey, direction_string, value_string) {
        const obj = {};
        obj[direction_string] = value_string;
        __fn__setStyle(skey, obj);
    },
    getDisplay: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['display'];
    },
    setDisplay: function(skey, value_string) {
        __fn__setStyle(skey, {
            'display': value_string
        });
    },
    getMaxWidth: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['maxWidth'];
    },
    setMaxWidth: function(skey, value_string) {
        __fn__setStyle(skey, {
            'maxWidth': value_string
        });
    },
    getMinWidth: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['minWidth'];
    },
    setMinWidth: function(skey, value_string) {
        __fn__setStyle(skey, {
            'minWidth': value_string
        });
    },
    getMaxHeight: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['maxHeight'];
    },
    setMaxHeight: function(skey, value_string) {
        __fn__setStyle(skey, {
            'maxHeight': value_string
        });
    },
    getMinHeight: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['minHeight'];
    },
    setMinHeight: function(skey, value_string) {
        __fn__setStyle(skey, {
            'minHeight': value_string
        });
    },
    getMargin: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['margin'];
    },
    setMargin: function(skey, value_string) {
        __fn__setStyle(skey, {
            'margin': value_string
        });
    },
    getMarginByDirection: function(skey, direction_string) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['margin' + direction_string[0].toUpperCase() + direction_string.slice(1)];
    },
    setMarginByDirection: function(skey, direction_string, value_string) {
        const obj = {};
        obj['margin' + direction_string[0].toUpperCase() + direction_string.slice(1)] = value_string;
        __fn__setStyle(skey, obj);
    },
    getPadding: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['padding'];
    },
    setPadding: function(skey, value_string) {
        __fn__setStyle(skey, {
            'padding': value_string
        });
    },
    getPaddingByDirection: function(skey, direction_string) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['padding' + direction_string[0].toUpperCase() + direction_string.slice(1)];
    },
    setPaddingByDirection: function(skey, direction_string, value_string) {
        const obj = {};
        obj['padding' + direction_string[0].toUpperCase() + direction_string.slice(1)] = value_string;
        __fn__setStyle(skey, obj);
    },
    getPosition: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['position'];
    },
    setPosition: function(skey, value_string) {
        __fn__setStyle(skey, {
            'position': value_string
        });
    },
    getElementVisibility: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['visibility'];
    },
    showElement: function(skey) {
        __fn__setStyle(skey, {
            'visibility': 'visible'
        });
    },
    hideElement: function(skey) {
        __fn__setStyle(skey, {
            'visibility': 'hidden'
        });
    },
    toggleVisibility: function(skey) {
        if (__evar__[__utils__mapDefVarNames("style")][skey]['visibility'] == 'hidden') {
            __fn__showElement(skey);
        } else {
            __fn__hideElement(skey);
        }
    },
    getLayerPosition: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['zIndex'];
    },
    setLayerPosition: function(skey, value_string) {
        __fn__setStyle(skey, {
            'zIndex': value_string
        });
    },
    getOverflowType: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['overflow'];
    },
    setOverflowType: function(skey, value_string) {
        __fn__setStyle(skey, {
            'overflow': value_string
        });
    },
    getOverflowTypeByAxis: function(skey, axis_string) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['overflow' + axis_string.toUpperCase()];
    },
    setOverflowTypeByAxis: function(skey, axis_string, value_string) {
        const obj = {};
        obj['overflow' + axis_string.toUpperCase()] = value_string;
        __fn__setStyle(skey, obj);
    },
    getSpaceBetweenLetters: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['letterSpacing'];
    },
    setSpaceBetweenLetters: function(skey, value_string) {
        __fn__setStyle(skey, {
            'letterSpacing': value_string
        });
    },
    getSpaceBetweenLines: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['lineHeight'];
    },
    setSpaceBetweenLines: function(skey, value_string) {
        __fn__setStyle(skey, {
            'lineHeight': value_string
        });
    },
    getWidthOfTab: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['tabSize'];
    },
    setWidthOfTab: function(skey, value_string) {
        __fn__setStyle(skey, {
            'tabSize': value_string
        });
    },
    getTextAlignType: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['textAlign'];
    },
    setTextAlignType: function(skey, value_string) {
        __fn__setStyle(skey, {
            'textAlign': value_string
        });
    },
    getTextTransformType: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['textTransform'];
    },
    setTextTransformType: function(skey, value) {
        __fn__setStyle(skey, {
            'textTransform': value
        });
    },
    getSpacingBetweenWords: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['wordSpacing'];
    },
    setSpacingBetweenWords: function(skey, value_string) {
        __fn__setStyle(skey, {
            'wordSpacing': value_string
        });
    },
    getWordWrapType: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['wordWrap'];
    },
    setWordWrapType: function(skey, value_string) {
        __fn__setStyle(skey, {
            'wordWrap': value_string
        });
    },
    getWordBreakType: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['wordBreak'];
    },
    setWordBreakType: function(skey, value_string) {
        __fn__setStyle(skey, {
            'wordBreak': value_string
        });
    },
    getTextDecoration: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['textDecoration'];
    },
    setTextDecoration: function(skey, value_string) {
        __fn__setStyle(skey, {
            'textDecoration': value_string
        });
    },
    getTextDecorationByType: function(skey, type) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['textDecoration' + type[0].toUpperCase() + type.slice(1)];
    },
    setTextDecorationByType: function(skey, type, value_string) {
        const obj = {};
        obj['textDecoration' + type[0].toUpperCase() + type.slice(1)] = value_string;
        __fn__setStyle(skey, obj);
    },
    getTextShadow: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['textShadow'];
    },
    setTextShadow: function(skey, value_string) {
        __fn__setStyle(skey, {
            'textShadow': value_string
        });
    },
    getTextDirection: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['direction'];
    },
    setTextDirection: function(skey, value_string) {
        __fn__setStyle(skey, {
            'direction': value_string
        });
    },
    getTransition: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['transition'];
    },
    setTransition: function(skey, value_string) {
        __fn__setStyle(skey, {
            'transition': value_string
        });
    },
    getCursorType: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['cursor'];
    },
    setCursorType: function(skey, value_string) {
        __fn__setStyle(skey, {
            'cursor': value_string
        });
    },
    capitalizeTextContent: function(skey) {
        __fn__setStyle(skey, {
            'textTransform': 'capitalize'
        });
    },
    setTextContentToDefaultcase: function(skey) {
        __fn__setStyle(skey, {
            'textTransform': 'none'
        });
    },
    setWidth: function(skey, data_string) {
        __fn__setStyle(skey, {
            'width': data_string
        });
    },
    getWidth: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['width'];
    },
    setHeight: function(skey, data_string) {
        __fn__setStyle(skey, {
            'height': data_string
        });
    },
    getHeight: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['height'];
    },
    hide: function(skey) {
        __fn__setStyle(skey, {
            'display': 'none'
        });
    },
    show: function(skey) {
        __fn__setStyle(skey, {
            'display': 'block'
        });
    },
    absolutePosition: function(skey) {
        __fn__setStyle(skey, {
            'position': 'absolute'
        });
    },
    relativePosition: function(skey) {
        __fn__setStyle(skey, {
            'position': 'relative'
        });
    },
    inlineDisplay: function(skey) {
        __fn__setStyle(skey, {
            'display': 'inline'
        });
    },
    toggleHideandShow: function(skey) {
        const updateObj = {};
        updateObj[skey] = {};
        if (__evar__[__utils__mapDefVarNames("style")][skey]['display'] == 'none') {
            __fn__show(skey);
        } else {
            __fn__hide(skey);
        }
    },
    setOpacity: function(skey, data_string) {
        __fn__setStyle(skey, {
            'opacity': data_string
        });
    },
    getOpacity: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['opacity'];
    },
    enableScrolling: function(skey) {
        __fn__setStyle(skey, {
            'overflow': 'scroll'
        });
    },
    disableScrolling: function(skey) {
        delete __evar__[__utils__mapDefVarNames("style")][skey]['overflow'];
    },
    getTransformation: function(skey) {
        return __evar__[__utils__mapDefVarNames("style")][skey]['transform'];
    },
    translate2D: function(skey, X_number, Y_number) {
        __fn__defineProp(skey, 'transform');
        __fn__setStyle(skey, {
            'transform': __evar__[__utils__mapDefVarNames("style")][skey]['transform'] + '  translate(' + X_number.toString() + 'px,' + Y_number.toString() + 'px)'
        });
    },
    resetTranslate2D: function(skey) {
        __fn__resetStyleAttribute(skey, 'transform', 'translate', ' ');
    },
    rotate2D: function(skey, degree_degree) {
        __fn__defineProp(skey, 'transform');
        __fn__setStyle(skey, {
            'transform': __evar__[__utils__mapDefVarNames("style")][skey]['transform'] + '  rotate(' + degree_degree.toString() + 'deg)'
        });
    },
    resetRotate2D: function(skey) {
        __fn__resetStyleAttribute(skey, 'transform', 'rotate', ' ');
    },
    flipVertical: function(skey, degree_degree) {
        __fn__defineProp(skey, 'transform');
        __fn__setStyle(skey, {
            'transform': __evar__[__utils__mapDefVarNames("style")][skey]['transform'] + '  rotateY(' + degree_degree.toString() + 'deg)'
        });
    },
    resetFlipVertical: function(skey) {
        __fn__resetStyleAttribute(skey, 'transform', 'rotateY', ' ');
    },
    flipHorizontal: function(skey, degree_degree) {
        __fn__defineProp(skey, 'transform');
        __fn__setStyle(skey, {
            'transform': __evar__[__utils__mapDefVarNames("style")][skey]['transform'] + '  rotateX(' + degree_degree.toString() + 'deg)'
        });
    },
    resetFlipHorizontal: function(skey) {
        __fn__resetStyleAttribute(skey, 'transform', 'rotateX', ' ');
    },
    zoom2D: function(skey, X_number, Y_number) {
        __fn__defineProp(skey, 'transform');
        __fn__setStyle(skey, {
            'transform': __evar__[__utils__mapDefVarNames("style")][skey]['transform'] + '  scale(' + X_number.toString() + ',' + Y_number.toString() + ')'
        });
    },
    resetZoom2D: function(skey) {
        __fn__resetStyleAttribute(skey, 'transform', 'scale', ' ');
    },
    skew2D: function(skey, xDegree_degree, yDegree_degree) {
        __fn__defineProp(skey, 'transform');
        __fn__setStyle(skey, {
            'transform': __evar__[__utils__mapDefVarNames("style")][skey]['transform'] + '  skew(' + xDegree_degree.toString() + 'deg,' + yDegree_degree.toString() + 'deg)'
        });
    },
    resetSkew2D: function(skey) {
        __fn__resetStyleAttribute(skey, 'transform', 'skew', ' ');
    },
    resetTransform: function(skey) {
        __fn__deleteProp(skey, 'transform');
    }
});