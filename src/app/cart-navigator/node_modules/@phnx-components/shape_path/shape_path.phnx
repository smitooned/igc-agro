/**
 * Shapes
 * Path
 * Project: Phoenix UI creator
 * Author: Debashish
 * Last Modified: Smit Shah on 6th May
 */
"use strict";

module.exports = {
    name: "shapePath",
    imports: [],
    variables: [{
            name: "alias",
            type: "string",
            defaultValue: "Path",
            metadata: [{
                displayName: "Alias",
                widget: "INPUT",
                widgetData: {},
                grouping: "General",
                target: "alias"
            }],
            isMandatory: false,
            scope: "public"

        },
        {
            name: "colorTheme",
            type: "object",
            defaultValue: {
                scheme: "Default",
                colors: ""
            },
            scope: "public"
        },
        {
            name: "colorThemeDefault",
            type: "string",
            defaultValue: "#ffffff",
            scope: "public"
        },
        {
            name: "compStyle",
            type: "object",
            defaultValue: {
                __root: {
                    "d": "M0,0L200,12",
                    "width": 200,
                    "height": 25,
                    "fill": "rgba(0,0,0,0.5)",
                    "stroke": "rgba(0,0,0,1)",
                    "strokeDasharray": 0,
                    "strokeWidth": 1,
                    "scale": {
                      label: "scale",
                      sx: 1,
                      sy: 1
                    },
                    "opacity":1
                }
            },
            metadata: [{
                    displayName: "Path",
                    widget: "INPUT",
                    widgetData: {},
                    grouping: "General",
                    target: "d"
                }, {
                    displayName: 'Path',
                    widget: 'SHAPE_PROPERTIES',
                    widgetData: {
                        hyperlinkTarget: 'hyperlink'
                    },
                    grouping: '',
                    tab: 'Style',
                    target: 'compStyle.__root'
                }, {
                    displayName: "Background Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "General",
                    target: "compStyle.__root.backgroundColor"
                }, {
                    displayName: "Width",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {},
                    grouping: "General",
                    target: "compStyle.__root.width"
                },
                {
                    displayName: "Stroke",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "General",
                    target: "compStyle.__root.stroke"
                },
                {
                    displayName: "Path-Width",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {},
                    grouping: "General",
                    target: "compStyle.__root.strokeWidth"
                },
                {
                    displayName: "Path Dash Width",
                    widget: "SLIDER",
                    widgetData: {
                        maxValue: 30,
                        minValue: 0,
                        stepCount: 1
                    },
                    grouping: "General",
                    target: "compStyle.__root.strokeDasharray"
                }
            ],
            scope: "public"
        }, {
            name: "strokeOpacity",
            type: "number",
            defaultValue: 1,
            metadata: [{
                displayName: "Stroke-Opacity",
                widget: "SLIDER",
                widgetData: {
                    maxValue: 1,
                    minValue: 0,
                    stepCount: 0.1
                },
                grouping: "General",
                target: "strokeOpacity"
            }],
            scope: "public"

        }, {
          name: 'transform',
          type: 'string',
          defaultValue: '',
          scope:'public'
        },
        {
          name: 'isGradientFill',
          scope: 'public',
          type: 'boolean',
          defaultValue: false
        },
        {
          name: 'gradient',
          scope: 'public',
          type: 'object',
          defaultValue: {}
        },
        {
          name: 'scale',
          type:'object',
          defaultValue: {
            label: 'scale',
            sx: 1,
            sy: 1,
            width: 200,
            height: 25
          },
          scope: 'public'
        },
        {
          name: 'calcScale',
          type: 'boolean',
          scope: 'private',
          defaultValue: true
        }
    ],
    functions: {
      getGradient: (el) => {

        if(__var__isGradientFill) {
          var gradient = __var__gradient;
          if(gradient["id"].includes("linear")) {
            return __tmpl__linearGradient
          } else if(gradient["id"].includes("radial")) {
            return __tmpl__radialGradient
          }
        } else {
          return null
        }
      }
    },
    eventHandlers: [],
    eventEmitters: [],
    actions: [],
    workflows: {},
    localTemplates: {
      linearGradient: {
        type: 'linearGradient',
        id: "__fnParam__gradient.id",
        props: {
          id: "__fnParam__gradient.id",
          x1: "__fnParam__gradient.x1",
          x2: "__fnParam__gradient.x2",
          y1: "__fnParam__gradient.y1",
          y2: "__fnParam__gradient.y2",
        },
        children: ['__fnParam__gradient.stops.map(stop => __tmpl__stop)']
      },
      radialGradient: {
        type: 'radialGradient',
        id: "__fnParam__gradient.id",
        props: {
          cx: "__fnParam__gradient.id",
          cy: "__fnParam__gradient.x1",
          r: "__fnParam__gradient.x2"
        },
        children: ['__fnParam__gradient.stops.map(stop => __tmpl__stop)']
      },
      stop: {
        type: 'stop',
        props: {
          stopColor: '__fnParam__stop.stopColor',
          stopOpacity: '__fnParam__stop.stopOpacity || undefined',
          offset: '__fnParam__stop.offset',
        }
      },
      emptyDiv: {
        type: "div",
        props: {
          style: {
            display: "none",
            "data-info": "dummydiv for gradient in shape_rect"
          }
        }
      }
    },
    structure: {
        type: "svg",
        props: {
            width: "__var__compStyle.__root.width",
            height: "__var__compStyle.__root.height",
            viewbox: "'0 0 '+__var__compStyle.__root.width+' '+__var__compStyle.__root.height",
            style: {
              verticalAlign: "top"
            }
        },
        children: [{
            type: "path",
            props: {
                d: "__var__compStyle.__root.d",
                transform: "'scale(' + __var__compStyle.__root.scale.sx + ',' + __var__compStyle.__root.scale.sy + ')' + ' ' + __var__transform",
                style: {
                    fill: "__var__compStyle.__root.backgroundColor || (__var__colorTheme.colors? __var__colorTheme.colors[0]: __var__colorThemeDefault)",
                    stroke: "__var__compStyle.__root.stroke",
                    strokeWidth: "__var__compStyle.__root.strokeWidth",
                    strokeDasharray: "__var__compStyle.__root.strokeDasharray",
                    strokeOpacity: "__var__strokeOpacity",
                    opacity: "__var__compStyle.__root.opacity"
                }
            }

        },  "__fn__getGradient()"]
    },
    lifecycleHooks: {
      init: {
        before: () => {
          __utils__setPrivateVars({
            calcScale: false
          }, false, {
            concat: false,
            erase:true
          })
        },
        after: () => {
          console.log("in init after");
        }
      },
      onModelChange:(newexternalvariables) => {
      },
      reRender: {
        before:() => {},
        after:() => {}
      },
      cleanup: () => {}
    }
};
