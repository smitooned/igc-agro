/**
 * US map component
 * Project: Phoenix UI creator
 * Author: Debashish
 */


"use strict";

module.exports = {
    name: "usMap",
    imports: [
        {
            type: "module",
            from: "d3",
            take: {
                what: "*",
                as: "d3"
            }
        },
        {
            type: "asset",
            from: "./assets/cities-lived.json",
            take: "citieslivedData"
        },
        {
            type: "asset",
            from: "./assets/stateslived.json",
            take: "compData"
        },
        {
            type: "asset",
            from: "./assets/us-states.json",
            take: "usStatesData"
        },
        {
            type: "css",
            from: "./assets/map.css"
        }
    ],
    variables: [
        {
            name: "alias",
            type: "string",
            defaultValue: "USA",
            metadata: [{
                displayName: "Alias",
                widget: "INPUT",
                widgetData: {},
                grouping: "General",
                target: "alias"
            }],
            isMandatory: false,
            scope: "public"

        },
        {
            name: "compStyle",
            type: "object",
            defaultValue: {
                __root: {
                    "backgroundColor": "rgba(255,255,255,1)",
                    borderWidth:"1px",
                    borderStyle: {
                        text: "Solid",
                        className: "fa fa-trash",
                        id: "solid"
                    },
                    borderColor: "rgba(0,0,0,0.12)",
                    borderRadius:0,
                    height: 400,
                    width: 550
                },
            },
            metadata: [{
                displayName: 'Map',
                widget: 'CHART_PROPERTIES',
                widgetData: {},
                grouping: '',
                tab: 'Style',
                target: 'compStyle.__root'
            },{
                displayName: "Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.width"
            }, {
                displayName: "Height",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.height"
            },{
                displayName: "Background color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.backgroundColor"
            }, {
                displayName: "Border Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {
                    minValue: 0
                },
                grouping: "Style",
                target:"compStyle.__root.borderWidth"
            },{
                displayName: "Border Style",
                widget: "DROPDOWN",
                widgetData:{
                    values: [
                        {
                            text: "None",
                            className: "fa fa-trash",
                            id: "none"
                        },
                        {
                            text: "Solid",
                            className: "fa fa-trash",
                            id: "solid"
                        },
                        {
                            text: "Dotted",
                            className: "fa fa-trash",
                            id: "dotted"
                        },
                        {
                            text: "Dashed",
                            className: "fa fa-trash",
                            id: "dashed"
                        },
                        {
                            text: "Double",
                            className: "fa fa-trash",
                            id: "double"
                        }

                    ]
                },
                grouping: "Style",
                target: "compStyle.__root.borderStyle"
            },{
                displayName: "Border Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Style",
                target: "compStyle.__root.borderColor"
            },{
                displayName: "Border Radius",
                widget: "NUMERIC_STEPPER",
                widgetData: {
                    minValue: 0
                },
                grouping: "Style",
                target: "compStyle.__root.borderRadius"
            }],
            scope: "public"
        },
        {
            name: 'fontSize',
            type: 'number',
            defaultValue: 10,
            scope: 'public',
            metadata: {
                displayName: "Label Font Size",
                widget: "NUMERIC_STEPPER",
                grouping: "Advanced",
                target: "fontSize",
                widgetData: {
                    minValue: 0
                }
            }
        },
        {
            name: "showStates",
            type: "boolean",
            defaultValue: false,
            scope: "public",
            metadata: {
                displayName: "States/Provinces Name",
                widget: "SWITCHERY",
                grouping: "Advanced",
                target: "showStates",
                widgetData: {}
            }
        },
        {
            name: "colorTheme",
            type: "object",
            defaultValue: {
                scheme: "Default",
                colors: ["#3ec4cd","#3d9fcc","#3d7ccc","#3e41cc","#693ecc","#963dcd","#a1cc3e","#3ccc86"]},
            scope: "public"

        },
        {
            name: "compTheme",
            type: "object",
            defaultValue: null,
            metadata: [{
                displayName: "Color theme",
                widget: "COLOR_PALETTE",
                widgetData: {},
                grouping: "Style",
                target: "compTheme"
            }],
            scope: "public"
        },
        {
            name: "compData",
            type: "object",
            defaultValue: {
                selectedDataset:"Default",
                parsedData: "__imports__compData"
            },
            metadata: [{
                displayName: 'Map',
                widget: 'CHART_DATA_PROPERTIES',
                widgetData: {
                    axisTarget: ['compMetadata.xAxisVariable', 'compMetadata.yAxisVariable']
                },
                grouping: '',
                tab: 'Data',
                target: 'compData'
            },{
                displayName: "Data Source",
                widget: "DATASOURCE",
                widgetData: {},
                grouping: "Data",
                target: "compData"
            }],
            isMandatory: false,
            scope: "public"
        },
        {
            name: "compMetadata",
            type: "object",
            defaultValue: {
                xAxisVariable: ["state"],
                yAxisVariable: ["visited"]

            },
            metadata: [{
                displayName: "Enter State Key",
                widget: "ARRAY_INPUT",
                widgetData: {
                    enableSuggestions: true,
                    placeHolder: "Add key",
                    minTagLength: 0
                },
                grouping: "",
                target: "compMetadata.xAxisVariable"
            }, {
                displayName: "Value",
                widget: "ARRAY_INPUT",
                widgetData: {
                    enableSuggestions: true,
                    placeHolder: "Add key",
                    minTagLength: 0
                },
                grouping: "",
                target: "compMetadata.yAxisVariable"
            }],
            isMandatory: false,
            scope: "public"
        },
        {
            name: "advancedProps",
            type: "boolean",
            defaultValue: '',
            metadata: [{
                displayName: "Map",
                widget: "CHART_ADVANCED_PROPERTIES",
                widgetData: {
                    labelFontSize: 'fontSize',
                    labelColor: 'labelColor',
                    showStates: 'showStates',
                    pathColor: 'pathColor'
                },
                grouping: "",
                tab: 'Advanced',
                target: "advancedProps"
            }],
            scope: "public"
        },
        {
            name: "labelColor",
            type: "string",
            defaultValue: "rgba(0,0,0,1)",
            metadata: [{
                displayName: "Label Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Advanced",
                target: "labelColor"
            }],
            scope: "public"
        },
        {
            name: "pathColor",
            type: "string",
            defaultValue: "rgba(255,255,255,1)",
            metadata: [{
                displayName: "Path Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "General",
                target: "pathColor"
            }],
            scope: "public"
        },
        {
            name: "showHeader",
            type: "boolean",
            defaultValue: false,
            metadata: [{
                displayName: "Show Title",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "General",
                target: "showHeader"
            }],
            scope: "private"
        },
        {
            name: "title",
            type: "object",
            defaultValue: {
                text: "USA Map",
                color: "rgba(0,0,0,0.7)",
                fontSize: "20px",
                fontFamily: "Roboto",
                transform: "none"
            },
            metadata: [{
                displayName: 'Text',
                widget: 'CHART_TEXT_PROPERTIES',
                widgetData: {},
                grouping: '',
                tab: 'Text',
                target: 'title'
            },{
                displayName: "Text",
                widget: "INPUT",
                widgetData: {},
                grouping: "Title",
                target: "title.text"
            },{
                displayName: "Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Title",
                target: "title.color"
            },{
                displayName: "Font Size",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "Title",
                target: "title.fontSize"
            },{
                displayName: "Font Family",
                widget: "FONT_SELECTOR",
                widgetData: {},
                grouping: "Title",
                target: "title.fontFamily"
            },{
                displayName: "Case",
                widget: "TEXT_TRANSFORMER",
                widgetData: {},
                grouping: "Title",
                target: "title.transform"
            }],
            scope: "private"
        },
        {
            name: "margin",
            type: "object",
            defaultValue: {
                top: 20,
                right: 20,
                bottom: 30,
                left: 40
            },
            scope: "private"
        }
    ],
    functions: {
        customRender: function() {
            d3.select(__elId__mapComp).selectAll("*").remove();

            // Define linear scale for output
            let color = d3.scaleOrdinal(__var__compTheme? __var__compTheme.colors: (__var__colorTheme.colors? __var__colorTheme.colors: ["#3ec4cd","#3d9fcc","#3d7ccc","#3e41cc","#693ecc","#963dcd","#a1cc3e","#3ccc86"]));

            let legendText = [__var__compMetadata.yAxisVariable];

            //Create SVG element and append map to the SVG
            if(__var__showHeader) {
                var svg = d3.select(__elId__mapComp)
                    .attr("width", __var__compStyle.__root.width)
                    .attr("height", __var__compStyle.__root.height+ (__var__margin.top) - __var__margin.bottom)
                    .append("g")
                    .attr("transform", "translate(0," + (__var__margin.top/2) + ")");
            }
            else {
                svg = d3.select(__elId__mapComp)
                    .attr("width", __var__compStyle.__root.width)
                    .attr("height", __var__compStyle.__root.height)
                    .append("g")
                    .attr("transform", "translate(0," + (__var__margin.top/2) + ")");
            }

            try {
                // let ratio = __var__compStyle.__root.width>__var__compStyle.__root.height?(__var__compStyle.__root.height/20):(__var__compStyle.__root.width/20);

                // D3 Projection
                let projection = d3.geoAlbersUsa()
                    .translate([__var__compStyle.__root.width / 2, __var__compStyle.__root.height / 2]) // translate to center of screen
                    .scale([__var__compStyle.__root.width>__var__compStyle.__root.height?__var__compStyle.__root.height*1.7:__var__compStyle.__root.width*1.7]); // scale things down so see entire US

                // Define path generator
                let path = d3.geoPath() // path generator that will convert GeoJSON to SVG paths
                    .projection(projection); // tell path generator to use albersUsa projection

                // Load GeoJSON data and merge with states data

                let count = Object.keys(__var__compData.parsedData).length;
                // Loop through each state data value in the .csv file
                for (let i = 0; i < count; i++) {

                    // Grab State Name
                    let dataState = __var__compData.parsedData[i].state;

                    // Grab data value
                    let dataValue = __var__compData.parsedData[i].visited;

                    // Find the corresponding state inside the GeoJSON
                    for (let j = 0; j < __imports__usStatesData.features.length; j++) {
                        let jsonState = __imports__usStatesData.features[j].properties.name;

                        if (dataState == jsonState) {

                            __imports__usStatesData.features[j].properties.visited = dataValue;

                            break;
                        }
                    }
                }
                svg.selectAll("path")
                    .data(__imports__usStatesData.features)
                    .enter()
                    .append("path")
                    .attr("d", path)
                    .style("stroke", __var__pathColor)
                    .style("stroke-width", "1")

                    .style("fill", function(d) {

                        // Get data value
                        let value = d.properties.visited;

                        if (value>=0) {
                            //If value exists…
                            return color(value);
                        }
                        else {
                            //If value is undefined…
                            return "rgba(0,0,0,0.12)";
                        }
                    });


                // Label all the cities
                svg.selectAll(".place-label")
                    .data(__imports__usStatesData.features)
                    .enter()
                    .append("text")
                    .attr("x", function(d) {
                        return path.centroid(d)[0];
                    })
                    .attr("y", function(d) {
                        return path.centroid(d)[1];
                    })
                    .attr("text-anchor", "middle")
                    // .style("font-size", "12px")
                    // .style("font-family", "sans-serif")
                    .attr("font-size", __var__fontSize)
                    .attr("font-family","sans-serif")
                    .attr("fill", __var__labelColor)
                    .text(function(d) {

                        if (__var__showStates) {
                            let value = d.properties.abbreviation;
                            return value;
                        } else {
                            return "\u00A0";
                        }
                    });
                // Map the cities I have lived in!
                // svg.selectAll("circle")
                //     .data(__imports__citieslivedData)
                //     .enter()
                //     .append("circle")
                //     .attr("cx", function(d) {
                //         return projection([d.lon, d.lat])[0];
                //     })
                //     .attr("cy", function(d) {
                //         return projection([d.lon, d.lat])[1];
                //     })
                //     .attr("r", function(d) {
                //         return Math.sqrt(d.years) * 4;
                //     })
                //     .style("fill", color(3))
                //     .style("opacity", 0.85)
                //
                //     // Modification of custom tooltip code provided by Malcolm Maclean, "D3 Tips and Tricks"
                //     // http://www.d3noob.org/2013/01/adding-tooltips-to-d3js-graph.html
                //     .on("mouseover", function(d) {
                //         div.transition()
                //             .duration(200)
                //             .style("opacity", 0.9);
                //         div.text(d.place)
                //             .style("left", (d3.event.pageX) + "px")
                //             .style("top", (d3.event.pageY - 28) + "px");
                //     })
                //
                //     // fade out tooltip on mouse out
                //     .on("mouseout", function(d) {
                //         div.transition()
                //             .duration(500)
                //             .style("opacity", 0);
                //     });
                if (__var__showHeader){
                    let h = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + __var__margin.top + ")");

                    h.append("line")
                        .attr("x1", 0 - __var__margin.left)
                        .attr("y1", 0)
                        .attr("x2", __var__compStyle.__root.width - __var__margin.left)
                        .attr("y2", 0)
                        .style("stroke", "rgba(0,0,0,0.12)");

                    h.append('text')
                        .text(__var__title.text)
                        .attr("fill", __var__title.color)
                        .attr('x', 0)
                        .attr('y', __var__margin.top - 10)
                        .attr('text-anchor', "start")
                        .style('font-family', __var__title.fontFamily)
                        .style("font-size", __var__title.fontSize)
                        .style("text-decoration", "none")
                        .style("text-transform", __var__title.transform);

                }


            }
            catch(err){
                let h = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + __var__margin.top + ")");


                h.append('text')
                    .text("Oops!")
                    .attr("fill", __var__labelColor)
                    .attr('x', __var__compStyle.__root.width /2 )
                    .attr('y', __var__compStyle.__root.height /3)
                    .attr('text-anchor', "middle")
                    .style('font-family', "Roboto")
                    .style("font-size", "20px")
                    .style("text-decoration", "none")
                    .style("text-transform", "none");


                h.append('text')
                    .text("Select a proper data format!")
                    .attr("fill", __var__labelColor)
                    .attr('x', __var__compStyle.__root.width /2 )
                    .attr('y', __var__compStyle.__root.height /2)
                    .attr('text-anchor', "middle")
                    .style('font-family', "Roboto")
                    .style("font-size", "14px")
                    .style("text-decoration", "none")
                    .style("text-transform", "none");
            }
        }
    },
    eventHandlers: [],
    eventEmitters: [],
    actions: [],
    workflows: {},
    localTemplates: {},
    structure: {
        type: "div",
        id: "mapParent",
        props: {
            style: {
                backgroundColor: "__var__compStyle.__root.backgroundColor",
                height: "__var__compStyle.__root.height",
                width: "__var__compStyle.__root.width",
            }
        },
        children: [
            {
                type: "svg",
                id: "mapComp",
                props: {
                    viewBox: "'0 0 '+__var__compStyle.__root.width+ ' '+__var__compStyle.__root.height",
                    width: "__var__compStyle.__root.width",
                    height: "__var__compStyle.__root.height",
                    style: {
                        borderWidth: "__var__compStyle.__root.borderWidth",
                        borderStyle: "__var__compStyle.__root.borderStyle.id",
                        borderColor: "__var__compStyle.__root.borderColor",
                        borderRadius:"__var__compStyle.__root.borderRadius"
                    }
                }

            }

        ]

    },
    lifecycleHooks: {
        init: {
            before: function() {
            },
            after: function() {
                __fn__customRender();
            }
        },
        onModelChange: function(newExternalVariables) {},
        reRender: {
            shouldAllow: function(newExternalVariables) {
                return true;
            },
            before: function(newExternalVariables) {

            },
            after: function(newExternalVariables) {
                __fn__customRender();
            }
        },
        cleanup: function() {

        }
    }
};