/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "ButtonGroup",
    includesDef: "@phnx-components/basedef/baseAPI.phnxdef",
    defVarMap: {
        style: "compStyle",
        class: "buttonGroupClass"
    },
    imports: [],
    variables: [{
        name: "alias",
        type: "string",
        defaultValue: "button-group",
        metadata: [{
            displayName: "Alias",
            widget: "INPUT",
            widgetData: {},
            grouping: "Name",
            target: "alias"
        }],
        isMandatory: false,
        scope: "public"

    },{
        name: "buttonGroupId",
        type: "string",
        defaultValue: "buttonGroup1",
        scope: "private"
    }, {
        name: "defaultStyle",
        type: "object",
        scope: "private",
        properties: { erase: false },
        defaultValue: {
            __root: {
                width: "auto",
                backgroundColor: "red",
                position: "inherit"
            },
            button: {
                position: "inherit"
            },
            icon: {}
        }
    }, {
        name: "compStyle",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: {},
            button: {},
            icon: {}
        },
        metadata: [{
            displayName: 'Height',
            widget: 'COMBOBOX',
            widgetData: {
                minValue: 1,
                maxLength: 10
            },
            grouping: 'BUTTON GROUP',
            target: 'compStyle.__root.height'
        }, {
            displayName: 'Width',
            widget: 'COMBOBOX',
            widgetData: {
                minValue: 1,
                maxLength: 10
            },
            grouping: 'BUTTON GROUP',
            target: 'compStyle.__root.width'
        }, {
            displayName: "Border Style",
            widget: "BORDER_SETTER",
            widgetData: {},
            grouping: "BUTTON GROUP",
            target: "compStyle.__root"
        }],
        scope:  "public"
    }, {
        name: "buttonGroupClass",
        type: "object",
        properties: { erase: false },
        defaultValue: {},
        scope: "public"
    }, {
        name: "data",
        type: "array",
        defaultValue: [{
            id: "button1",
            label: "Chickoo",
            selected: true,
            title: "Nice Fruit"
        }, {
            id: "button2",
            selected: false,
            label: "Guava",
            title: 'Green Fruit'
        }, {
            id: "button3",
            label: "Apple",
            selected: false,
            title: 'A red fruit'
        }],
        isMandatory: true,
        scope: "public"
    }, {
        name: "selectionMode",
        type: "string",
        isMandatory: true,
        scope: "public"
    }, {
        name: "buttonColor",
        type: "string",
        defaultValue: "primary",
        isMandatory: true,
        scope: "public"
    }, {
        name: "alignment",
        type: "string",
        defaultValue: "horizontal",
        scope: "public"
    }],
    functions: {
        setSelected: selectionArray_array => {
            const nodes = __elId__buttonBase.childNodes;
            for (let i = 0; i < nodes.length; i++) {
                if (selectionArray_array[nodes[i].id]) {
                    $(nodes[i]).addClass('active');
                    __wf__toggleHandler({
                        currentTarget: nodes[i]
                    });
                } else {
                    $(nodes[i]).removeClass('active');
                    __wf__toggleHandler({
                        currentTarget: nodes[i]
                    });
                }
            }
        },
        getSelected: () => {
            const selection = __elId__buttonBase.getElementsByClassName('active');
            const payloadLabel = [];
            const payloadIds = [];
            for (let i = 0; i < selection.length; i++) {
                payloadLabel.push(selection[i].getAttribute('data-label'));
                payloadIds.push(selection[i].id);
            }
            const returnObj = {};
            returnObj['ids'] = payloadIds;
            returnObj['labels'] = payloadLabel;
            return returnObj;
        },
        _renderIcon: (item) => {
            if (typeof item == 'string') {
                return __tmpl__iconTemplate;
            } else {
                return item;
            }
        },
        _checkboxChange: () => {
            // Do something here
        },
        _getStyle: selected => {
            const ref = __var__compStyle.button;
            if (ref !== undefined && ref.backgroundColor !== undefined && selected) {
                const colorUpdate = __fn___shadeColor(ref.backgroundColor, -40);
                return {
                    boxShadow: 'inset 0 0 10px ' + colorUpdate,
                    borderColor: ref.borderColor === undefined ? colorUpdate : ref.borderColor
                };
            } else if (ref !== undefined && ref.backgroundColor !== undefined) {
                const colorUpdate = __fn___shadeColor(ref.backgroundColor, -40);
                return {
                    boxShadow: 'none',
                    borderColor: ref.borderColor === undefined ? colorUpdate : ref.borderColor
                };
            } else {
                return {};
            }
        },
        _shadeColor: (color, percent) => {
            let R = parseInt(color.substring(1, 3), 16);
            let G = parseInt(color.substring(3, 5), 16);
            let B = parseInt(color.substring(5, 7), 16);
            R = parseInt(R * (100 + percent) / 100);
            G = parseInt(G * (100 + percent) / 100);
            B = parseInt(B * (100 + percent) / 100);
            R = R < 255 ? R : 255;
            G = G < 255 ? G : 255;
            B = B < 255 ? B : 255;
            const RR = R.toString(16).length == 1 ? '0' + R.toString(16) : R.toString(16);
            const GG = G.toString(16).length == 1 ? '0' + G.toString(16) : G.toString(16);
            const BB = B.toString(16).length == 1 ? '0' + B.toString(16) : B.toString(16);
            return '#' + RR + GG + BB;
        },
        _getChildren: (data) => data.map((item, index) => __var__selectionMode == 'single' ? __tmpl__singleSelectionMode : __tmpl__multiSelectionMode)
    },
    eventHandlers: [],
    eventEmitters: [],
    localTemplates: {
        singleSelectionMode: {
            type: "label",
            props: {
                title: "__fnParam__item.title",
                'data-toggle': 'buttonTooltip',
                id: "__fnParam__item.id===undefined?'button'+__fnParam__index:__fnParam__item.id",
                key: "__fnParam__item.id===undefined?'button'+__fnParam__index:__fnParam__item.id",
                className: "__fnParam__item.selected?'btn btn-'+__var__buttonColor + ' btn-xs' + ' active':'btn btn-'+__var__buttonColor + ' btn-xs'",
                style: "Object.assign({},__var__defaultStyle.button,__var__compStyle.button,__fn___getStyle(__fnParam__item.selected))",
                "data-label": "__fnParam__item.label",
                onClick: "__wf__toggleHandler"
            },
            children: [{
                type: "input",
                props: {
                    id: "'option'+__fnParam__index",
                    key: "'option'+__fnParam__index",
                    type: "radio",
                    name: "options",
                    value: "__fnParam__item.selected?'on':'off'"
                }
            },"__fnParam__item.iconPosition=='left' || __fnParam__item.iconPosition===undefined?__fn___renderIcon(__fnParam__item.icon,__fnParam__item.iconPosition):''", "__fnParam__item.label", "__fnParam__item.iconPosition=='right'?__fn___renderIcon(__fnParam__item.icon,__fnParam__item.iconPosition):''"]
        },
        multiSelectionMode: {
            type: "label",
            props: {
                title: "__fnParam__item.title",
                'data-toggle': 'buttonTooltip',
                id: "__fnParam__item.id===undefined?'button'+__fnParam__index:__fnParam__item.id",
                key: "__fnParam__item.id===undefined?'button'+__fnParam__index:__fnParam__item.id",
                className: "__fnParam__item.selected?'btn btn-'+__var__buttonColor + ' active':'btn btn-'+__var__buttonColor",
                style: "Object.assign({},__var__defaultStyle.button,__var__compStyle.button,__fn___getStyle(__fnParam__item.selected))",
                "data-label": "__fnParam__item.label",
                onClick: "__wf__toggleHandler"
            },
            children: ["__fnParam__item.iconPosition=='left' || __fnParam__item.iconPosition===undefined?__fn___renderIcon(__fnParam__item.icon,__fnParam__item.iconPosition):''", "__fnParam__item.label", "__fnParam__item.iconPosition=='right'?__fn___renderIcon(__fnParam__item.icon,__fnParam__item.iconPosition):''"]
        },
        iconTemplate: {
            type: "i",
            props: {
                style: "Object.assign({},__var__defaultStyle.icon,__var__compStyle.icon)",
                key: "'buttonIcon-' + __fnParam__item",
                className: "__fnParam__item"
            }
        }
    },
    structure: {
        type: "div",
        id: 'buttonBase',
        props: {
            id: "__var__buttonGroupId",
            className: "__var__alignment=='vertical'?'btn-group btn-group-vertical':'btn-group btn-group-justified'",
            key: "buttonBase",
            "data-toggle": "buttons",
            style: "Object.assign({},__var__defaultStyle.__root,__var__compStyle.__root)"
        },
        children: "__fn___getChildren(__var__data)"
    },
    lifecycleHooks: {
        init: {
            before: () => {
                if (__prop__id !== undefined) {
                    __utils__setPrivateVars({

                        buttonGroupId: __prop__id
                    }, false);
                }
            },
            after: () => {
                $.fn.tooltip.Constructor.DEFAULTS.trigger = 'hover';
                $("[data-toggle='buttonTooltip']").tooltip({ container: 'body' });
            }
        }
    },
    actions: [],
    workflows: {
        toggleHandler: (eventObj) => {
            const reference = eventObj.currentTarget;
            if (__var__selectionMode != 'single') {
                if (reference.classList.contains('active')) {
                    reference.classList.remove('active');
                } else {
                    reference.classList.add('active');
                }
            }
            if ($(reference).hasClass('active') && __var__compStyle.button !== undefined && __var__compStyle.button.backgroundColor !== undefined) {
                const colorUpdate = __fn___shadeColor(__var__compStyle.button.backgroundColor, -40);
                if (__var__selectionMode == 'single') {
                    const cleanUp = reference.parentNode.childNodes;
                    for (let i = 0; i < cleanUp.length; i++) {
                        cleanUp[i].style.boxShadow = 'none';
                    }
                }
                reference.style.boxShadow = 'inset 0 0 10px ' + colorUpdate;
            } else {
                reference.style.boxShadow = 'none';
            }
            const selection = __elId__buttonBase.getElementsByClassName('active');
            const payloadLabel = [];
            const payloadIds = [];
            for (let i = 0; i < selection.length; i++) {
                payloadLabel.push(selection[i].getAttribute('data-label'));
                payloadIds.push(selection[i].id);
            }
            __evt__selectionChange(eventObj, {
                labels: payloadLabel,
                ids: payloadIds
            }, __prop__);
        }
    }
};