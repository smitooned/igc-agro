module.exports = {
    name: 'Accordion',
    includesDef: '@phnx-components/basedef',
    defVarMap: {
        style: "compStyle",
        class: "className"
    },
    imports: [{
        type: 'css',
        from: './accordion.css'
    }],
    variables: [{
        name: 'compStyle',
        type: 'object',
        properties:{erase:false},
        defaultValue: {
            __root: {},
            header: {},
            bodyContainer: {},
            body: {},
            icon: {},
            separator: {},
            openIcon: {},
            closeIcon: {}
        },
        scope: 'public'
    }, {
        name: 'className',
        type: 'object',
        properties:{erase:false},
        defaultValue: {
            __root: {},
            header: {},
            bodyContainer: {},
            body: {},
            separator: {}
        },
        scope: 'public'
    }, {
        name: 'defaultStyle',
        type: 'object',
        properties:{erase:false},
        defaultValue: {
            __root: {
                border: 'solid 1px rgba(0,0,0,0.12)',
                borderRadius: '2px',
                width: 'auto',
                backgroundColor: 'white'
            },
            header: {
                display: 'flex',
                fontSize: '18px',
                fontFamily: 'Roboto',
                padding: '8px',
                cursor: 'pointer'
            },
            bodyContainer: {
                overflow: 'hidden',
                margin: '0px 8px',
                transitionProperty: 'max-height',
                transitionDuration: '0.15s',
                transitionTimingFunction: 'ease-in-out'
            },
            body: { padding: '8px 0px' },
            icon: {
                marginLeft: 'auto',
                verticalAlign: 'middle'
            },
            separator: {
                margin: '0px'
            },
            openIcon: {},
            closeIcon: {}
        },
        scope: 'private'
    }, {
        name: 'headerContent',
        type: 'any',
        defaultValue: 'Header Content Here',
        scope: 'public'
    }, {
        name: 'bodyContent',
        type: 'any',
        defaultValue: 'Body Content Comes Here',
        scope: 'public'
    }, {
        name: 'openIcon',
        type: 'any',
        defaultValue: 'fa fa-minus-circle',
        scope: 'public'
    }, {
        name: 'closeIcon',
        type: 'any',
        defaultValue: 'fa fa-plus-circle',
        scope: 'public'
    }, {
        name: 'collapse',
        type: 'boolean',
        defaultValue: false,
        scope: 'public'
    }, {
        name: 'collapseLocal',
        type: 'boolean',
        defaultValue: false,
        scope: 'private'
    }, {
        name: 'separator',
        type: 'boolean',
        defaultValue: true,
        scope: 'public'
    }],
    functions: {
        resolveHeight: () => {
            return (__elId__bodyContent && __elId__bodyContent.offsetHeight || 9000) + 'px';
        },
        getIconTemplate: (item, style) => {
            return __tmpl__iconTemplate;
        },
        resolveIcon: () => {
            if (__var__collapseLocal) {
                let closeIcon=__var__closeIcon;
                return typeof closeIcon == 'string' ? __fn__getIconTemplate(closeIcon, __var__compStyle.closeIcon) : closeIcon;
            } else {
                let openIcon=__var__openIcon;
                return typeof openIcon == 'string' ? __fn__getIconTemplate(openIcon, __var__compStyle.openIcon) : openIcon;
            }
        },
        openAccordion: () => {
            __utils__setPrivateVars({
                collapseLocal: false
            });
        },
        closeAccordion: () => {
            __utils__setPrivateVars({
                collapseLocal: true
            });
        },
        toggleCollapse: (eventObj, payload) => {
            __utils__setPrivateVars({
                collapseLocal: !__var__collapseLocal
            });
            __wf__toggleAccordian(eventObj, payload);
        }
    },
    eventHandlers: [],
    eventEmitters: [],
    localTemplates: {
        iconTemplate: {
            type: 'i',
            props: {
                className: '__fnParam__item',
                style: 'Object.assign({},__var__defaultStyle.icon,__fnParam__style)'
            }
        },
        separator: {
            type: 'hr',
            props: {
                style: 'Object.assign({},__var__defaultStyle.separator,__var__compStyle.separator)',
                className: '__var__className.separator'
            }
        }
    },
    structure: {
        type: 'div',
        id: 'accordionBase',
        props: {
            style: 'Object.assign({},__var__defaultStyle.__root,__var__compStyle.__root)',
            className: '__var__className.__root'
        },
        children: [{
            type: 'div',
            id: 'headerContainer',
            props: {
                className: "'unselectable '+__var__className.header",
                key: 'headerDiv',
                onClick: '__fn__toggleCollapse',
                style: 'Object.assign({},__var__defaultStyle.header,__var__compStyle.header)'
            },
            children: ['__var__headerContent', '__fn__resolveIcon()']
        }, '__var__separator?__tmpl__separator:null', {
            type: 'div',
            id: 'bodyContainer',
            props: {
                style: 'Object.assign({maxHeight: __var__collapseLocal?\'0px\':__fn__resolveHeight()},__var__defaultStyle.bodyContainer,__var__compStyle.bodyContainer)',
                className: '__var__className.bodyContainer'
            },
            children: [{
                type: 'div',
                id: 'bodyContent',
                props: {
                    key: 'bodyContent',
                    style: 'Object.assign({},__var__defaultStyle.body,__var__compStyle.body)',
                    className: '__var__className.body'
                },
                children: '__var__bodyContent'
            }]
        }]
    },
    lifecycleHooks: {
        init: {
            before: () => {
                __utils__setPrivateVars({
                    collapseLocal: __var__collapse
                }, false);
            }
        },
        onModelChange: (newVars) => {
            __utils__setPrivateVars({
                collapseLocal: newVars.collapse
            }, false);
        },
        reRender: {
            after: () => {
                if (!__var__collapseLocal) {
                    __elId__bodyContainer.style.maxHeight = __elId__bodyContent.offsetHeight + 'px';
                }
            }
        }
    },
    actions: [],
    workflows: {
        toggleAccordian:(eventObj, payload)=>{
            __evt__toggleAccordian({}, {
                accordianState: __var__collapseLocal,
                idAttribute:__prop__id
            }, {});
        }
    }
}
