module.exports = {
    name: 'TextToMarkdown',
    imports: [{
        type: 'module',
        take: {
            what: 'default',
            as: 'ReactMarkdown'
        },
        from: 'react-markdown'
    }, {
        type: 'component',
        take: 'Switchery',
        from: '@phnx-components/switchery'
    }],
    variables: [{
        name: 'showOuter',
        type: 'boolean',
        defaultValue: true,
        scope: 'private'
    }, {
        name: 'animationType',
        type: 'string',
        defaultValue: 'push', //possible values  'push-parrallax', 'push', 'from-top'
        scope: 'private'
    }, {
        name: 'text',
        type: 'string',
        defaultValue: '# some markdown',
        scope: 'private'
    }, {
        name: 'value',
        type: 'string',
        defaultValue: '# some markdown',
        scope: 'public'
    }, {
        name: 'placeHolder',
        type: 'string',
        defaultValue: 'description',
        scope: 'public'
    }, {
        name: 'textAreaStyle',
        type: 'object',
        defaultValue: {},
        scope: 'public'
    }, {
        name: 'markdownStyle',
        type: 'object',
        defaultValue: {},
        scope: 'public'
    }],
    functions: {
        whichScreen: function() {
            return __var__showOuter ? '' : __var__animationType;
        },
        toggleScreen: function() {
            __utils__setPrivateVars({
                showOuter: !__var__showOuter
            });
        },
        showOuter: function() {
            __utils__setPrivateVars({
                showOuter: true
            });
        },
        showInner: function() {
            __utils__setPrivateVars({
                showOuter: false
            });
        },
        chnageAnimation: function(type) {
            if (['push', 'push-parrallax', 'from-top'].includes(type))
                __utils__setPrivateVars({
                    animationType: type
                });
            else {
                console.warn('animation type ' + type + ' is invalid. Valid values are ', 'push', 'push-parrallax', 'from-top'); //eslint-disable-line
            }
        },
        textChange: function(evtObject) {
            __utils__setPrivateVars({
                text: evtObject.currentTarget.value
            });
        },
        setText: function(payload) {
            __utils__setPrivateVars({
                text: payload
            });
        },
        getText: function() {
            return __var__text;
        },
        reset: function(defaultText) {
            __utils__setPrivateVars({
                text: defaultText
            });
        }
    },
    workflows: {
        changeView: function() {
            __fn__toggleScreen();
        }
    },
    eventHandlers: [{
        id: 'onclick',
        from: {
            switcheryComp: 'switcheryClick'
        },
        workflow: ["changeView"]
    }],
    structure: {
        type: 'div',
        props: {
            className: 'form-group form-group-default'
        },
        children: [{
            type: 'label',
            children: ["Edit ", {
                type: "__imports__Switchery",
                id: 'switcheryComp',
                props: {
                    size: "10px",
                    defaultColor: "#52555E"
                }
            }]
        }, {
            type: 'div',
            props: {
                className: "'view-port clearfix '+__fn__whichScreen() "
            },
            children: [{
                type: 'div',
                id:'markdownContainer',
                props: {
                    className: 'view bg-white'
                },
                children: [{
                    type: '__imports__ReactMarkdown',
                    props: {
                        source: '__var__text',
                        containerProps: {
                            style: '__var__markdownStyle'
                        }
                    }
                }]
            }, {
                type: 'div',
                id:'textareaContainer',
                props: {
                    className: 'view bg-white no-shadow'
                },
                children: [{
                    type: "textarea",
                    id: "textArea",
                    props: {
                        tabIndex: -1,
                        onChange: "__fn__textChange",
                        value: "__var__text",
                        placeholder: "__var__placeHolder",
                        className: "'form-control '+(__var__showOuter?'hide':'')",
                        style: "__var__textAreaStyle"
                    }
                }]
            }]
        }]
    },
    lifecycleHooks: {
        init: {
            before: () => {
                __utils__setPrivateVars({
                    text: __var__value
                });
            }
        },
        onModelChange: (nextProps) => {
            __utils__setPrivateVars({
                text: nextProps.value
            });
        }
    }
};
