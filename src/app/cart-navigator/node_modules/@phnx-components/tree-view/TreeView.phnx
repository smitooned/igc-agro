/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "TreeView",
    includesDef: "@phnx-components/basedef",
    defVarMap: {
        style: "compStyle",
        class: "treeClass"
    },
    imports: [{
        type: 'module',
        from: "@phnx-components/rc-libs",
        take: "RC"
    }, {
        type: "css",
        from: "./css/TreeView.css"
    }, {
        type: "css",
        from: "./css/phnxMaterial.css"
    }, {
        type: "module",
        from: "@phoenix/phnx-material",
        take: {
            what: "default",
            as: "phnxMaterial"
        }
    }, {
        type: "component",
        from: "./CheckHidden.phnx",
        take: "Check"
    }],
    variables: [{
        name: "parentKey",
        type: "string",
        defaultValue: null,
        scope: "private"
    }, {
        name: "searchMode",
        type: "boolean",
        defaultValue: false,
        scope: "public"
    }, {
        name: "compStyle",
        type: "object",
        scope: "public",
        properties: { erase: false },
        defaultValue: {
            __root: {},
            collapseNode: {},
            baseNode: {}
        }
    }, {
        name: "defaultStyle",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: {
                fontSize: "1em",
                padding: "0.5em"
            },
            collapseNode: {
                display: "flex",
                fontSize: "1em",
                width: "200px"
            },
            baseNode: {
                display: "flex",
                fontSize: "1em",
                // minWidth: "200px"
            }
        },
        scope: "private"
    }, {
        name: "treeClass",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: "none",
            collapseNode: "none",
            baseNode: "none"
        },
        scope: "public"
    }, {
        name: "data",
        type: "array",
        defaultValue: [],
        scope: "public"
    }, {
        name: "placeholder",
        type: "string",
        defaultValue: "No sub items",
        scope: "public"
    }, {
        name: "labelField",
        type: "string",
        defaultValue: "label",
        scope: "public"
    }, {
        name: "childrenField",
        type: "string",
        defaultValue: "children",
        scope: "public"
    }, {
        name: "multiSelect",
        type: "boolean",
        defaultValue: false,
        scope: "public"
    }, {
        name: "selectable",
        type: "boolean",
        defaultValue: true,
        scope: "public"
    }, {
        name: "baseIndex",
        type: "number",
        defaultValue: 0,
        scope: "private"
    }, {
        name: "checkType",
        type: "string",
        defaultValue: "info",
        scope: "public"
    }, {
        name: "baseIcon",
        type: "string",
        defaultValue: "pages",
        scope: "public"
    }, {
        name: "collapseIcon",
        type: "string",
        defaultValue: "web",
        scope: "public"
    }],
    functions: {
        handleAction: (eventObj) => {
            eventObj.preventDefault();
            eventObj.stopPropagation();
            const payload = {};
            payload['type'] = eventObj.currentTarget.dataset.type;
            payload['data'] = JSON.parse(eventObj.currentTarget.parentNode.parentNode.dataset.content);
            __wf__emitAction(eventObj, payload, null);
        },
        renderActions: (actions) => {
            if (actions === undefined) {
                return '';
            }
            return actions.map((item) => {
                return __tmpl__iconTemplate;
            });
        },
        getActiveNode: () => {
            const ref = __elId__baseRef.querySelector('.tree-selected');
            if (ref != null) {
                return JSON.parse(ref.dataset.content);
            } else {
                return null;
            }
        },
        generateId: (val1, val2) => {
            return 'checkbox' + val1 + '-' + val2;
        },
        getEndNodes: () => {
            const selection = __elId__baseRef.querySelectorAll('.endNode:checked');
            const returnArray = [];
            for (let i = 0; i < selection.length; i++) {
                returnArray.push(JSON.parse(selection[i].dataset.content));
            }
            return returnArray;
        },
        getSelected: () => {
            const selection = __elId__baseRef.querySelectorAll('.multiCheck:checked');
            const returnArray = [];
            for (let i = 0; i < selection.length; i++) {
                returnArray.push(JSON.parse(selection[i].dataset.content));
            }
            return returnArray;
        },
        selectionUpdate: eventObj => {
            const bigSelect = eventObj.currentTarget.parentNode.parentNode.getElementsByTagName('input');
            const updateStatus = eventObj.currentTarget.checked;
            for (let i = 0; i < bigSelect.length; i++) {
                bigSelect[i].checked = updateStatus;
            } //Backwards update
            if (!updateStatus) {
                let counter = 0;
                let reference = eventObj.currentTarget.parentNode.parentNode.parentNode.parentNode;
                while (reference.id != 'baseRef' && counter < 99) {
                    if (reference.firstChild.id == 'baseRef') {
                        break;
                    }
                    const tempRef = reference.querySelector('.multiCheck');
                    tempRef.checked = false;
                    reference = reference.parentNode.parentNode;
                    counter++;
                }
            } else {
                let counter = 0;
                let reference = eventObj.currentTarget.parentNode.parentNode.parentNode.parentNode;
                let flag = false;
                let currentRef = eventObj.currentTarget.parentNode.parentNode.parentNode;
                if (currentRef.querySelectorAll('.multiCheck').length == currentRef.querySelectorAll('.multiCheck:checked').length) {
                    flag = true;
                }
                while (reference.id != 'baseRef' && counter < 99 && flag) {
                    if (reference.firstChild.id == 'baseRef') {
                        break;
                    }
                    const tempRef = reference.querySelector('.multiCheck');
                    currentRef = tempRef.parentNode.parentNode.parentNode;
                    tempRef.checked = true;
                    if (currentRef.querySelectorAll('.multiCheck').length != currentRef.querySelectorAll('.multiCheck:checked').length) {
                        flag = false;
                    }
                    reference = reference.parentNode.parentNode;
                    counter++;
                }
            }
        },
        depthOf: object => {
            let level = 1;
            object.forEach(item => {
                if (item[__var__childrenField] != undefined && item[__var__childrenField].length > 0) {
                    const depth = __fn__depthOf(item[__var__childrenField]) + 1;
                    level = Math.max(depth, level);
                }
            });
            return level;
        },
        resolveCollapse: item => {
            if (item.collapse === undefined || item.collapse) {
                return false;
            } else if (!item.collapse) {
                return true;
            } else {
                throw 'Error : Incorrect collapse value given !';
            }
        },
        renderPlaceholder: (item, index) => {
            if (item.custom != true) {
                return __tmpl__simpleListItem;
            } else {

                return item[__var__labelField];
            }
        },
        renderTree: (data, index) => {
            __utils__setPrivateVars({
                baseIndex: index + '-' + 1
            }, false);
            if (data.length == 0) {
                const placeholder = {};
                placeholder[__var__labelField] = __var__placeholder;
                placeholder['disable'] = true;
                return __fn__renderPlaceholder(placeholder, index);
            }
            const returnArray = data.map((item, index) => {
                if (item[__var__childrenField] === undefined && typeof item[__var__labelField] == 'string') {
                    return __fn__renderPlaceholder(item, index);
                } else if (item[__var__childrenField] === undefined) {
                    return item[__var__labelField];
                } else {
                    if (item[__var__childrenField].length == 0) {
                        const placeholderObj = {};
                        placeholderObj['disable'] = true;
                        placeholderObj[__var__labelField] = item.placeholder == undefined ? __var__placeholder : item.placeholder;
                        item[__var__childrenField].push(placeholderObj);
                    }
                    __utils__setPrivateVars({
                        parentKey: item[__var__labelField]
                    }, false);
                    return __fn___renderBaseTemplate(item, index);
                }
            });
            __utils__setPrivateVars({
                baseIndex: index
            }, false);
            return returnArray;
        },
        _renderBaseTemplate: (item, index) => __tmpl__baseTemplate,
        justCheck: () => {
            //Do something
        },
        updateClasses: (eventObj, query) => {
            if (__var__selectable) {
                const nodeRef = __elId__baseRef.querySelector('.tree-selected');
                if (nodeRef !== null) {
                    nodeRef.classList.remove('tree-selected');
                }
                const actionRef = __elId__baseRef.querySelector('.active-action');
                if (actionRef !== null) {
                    actionRef.classList.remove('active-action');
                    actionRef.style.display = 'none';
                }
                eventObj.currentTarget.classList.add('tree-selected');
                const newActionRef = eventObj.currentTarget.querySelector(query);
                newActionRef.classList.add('active-action');
                newActionRef.style.display = 'inline';
            }
        },
        initMaterial: () => {
            phnxMaterial.phnxInit(__elId__baseRef);
            const selection = __elId__baseRef.querySelectorAll('[data-toggle="tree-tooltip"]');
            for (let i = 0; i < selection.length; i++) {
                if (selection[i].offsetWidth > selection[i].parentNode.offsetWidth) {
                    $(selection[i].parentNode).tooltip();
                } else {
                    $(selection[i].parentNode).tooltip("disable");
                }
            }
            $('[data-toggle="tooltip"]').tooltip();
        }
    },
    eventHandlers: [],
    eventEmitters: [],
    localTemplates: {
        defaultLabel: {
            type: "label",
            props: {
                className: "__fnParam__item.selected==true?'collapseNode tree-selected '+__var__treeClass.collapseNode:'collapseNode '+__var__treeClass.collapseNode",
                "data-content": "JSON.stringify(__fnParam__item)",
                onClick: "__wf__collapsibleClick",
                htmlFor: "'level'+__var__baseIndex+__fnParam__index",
                style: "Object.assign({},{cursor:'pointer'},__var__defaultStyle.collapseNode,__var__compStyle.collapseNode)"
            },
            children: [{
                type: 'div',
                props: {
                    'data-ripple': "!__fnParam__item.disable?true:null",
                    title: "__fnParam__item[__var__labelField]",
                    style: {
                        overflow: 'hidden',
                        textOverflow: 'ellipsis'
                    }
                },
                children: ["__fnParam__item.icon==undefined?__tmpl__treeIcon:__fnParam__item.icon", {
                    type: 'span',
                    props: {
                        'data-toggle': 'tree-tooltip',
                    },
                    children: "__fnParam__item[__var__labelField]",
                }]
            }, {
                type: 'span',
                props: {
                    className: 'collapse-actions',
                    style: {
                        display: 'none',
                        marginLeft: 'auto'
                    }
                },
                children: "__fn__renderActions(__fnParam__item.actions)"
            }]
        },
        iconTemplate: {
            type: 'i',
            props: {
                title: '__fnParam__item.tooltip',
                'data-toggle': 'tooltip',
                onClick: '__fn__handleAction',
                className: 'material-icons actionIcon',
                'data-ripple': true,
                'data-type': '__fnParam__item.type',
                style: "Object.assign({},{color:'rgba(0,0,0,0.54)'},__fnParam__item.iconStyle)"
            },
            children: "__fnParam__item.iconName"
        },
        treeIcon: {
            type: "i",
            props: {
                className: "material-icons",
                style: {
                    marginRight: "8px"
                }
            },
            children: "__fnParam__item.disable!==true?__fnParam__item.children==undefined?__var__baseIcon:__var__collapseIcon:''"
        },
        simpleListItem: {
            type: "li",
            props: {
                className: "__fnParam__item.selected?'baseNode tree-selected '+__var__treeClass.baseNode:'baseNode '+__var__treeClass.baseNode",
                onClick: "__wf__selectionHandler",
                onContextMenu: "__fn__justCheck",
                "data-content": "JSON.stringify(__fnParam__item)",
                "data-parent": "__var__parentKey",
                style: "Object.assign({},{cursor:!__fnParam__item.disable?'pointer':'not-allowed'},__var__defaultStyle.baseNode,__fnParam__item.searchStyle,__var__compStyle.baseNode)"
            },
            children: [{
                type: 'div',
                props: {
                    'data-ripple': "__fnParam__item.disable!==true?true:null",
                    title: "__fnParam__item[__var__labelField]",
                    style: {
                        overflow: 'hidden',
                        textOverflow: 'ellipsis'
                    }
                },
                children: ["__var__multiSelect?__tmpl__baseCheckbox:''", "__fnParam__item.icon==undefined?__tmpl__treeIcon:__fnParam__item.icon", {
                    type: 'span',
                    props: {
                        'data-toggle': 'tree-tooltip',
                    },
                    children: "__fnParam__item[__var__labelField]"
                }]
            }, {
                type: 'div',
                props: {
                    className: 'base-actions',
                    style: {
                        display: 'none',
                        marginLeft: 'auto'
                    }
                },
                children: "__fn__renderActions(__fnParam__item.actions)"
            }]
        },
        baseCheckbox: {
            type: "div",
            props: {
                className: "'checkbox check-'+__var__checkType",
                style: {
                    display: "inline",
                    width: "0px"
                }
            },
            children: [{
                type: "input",
                id: "__fn__generateId(__var__baseIndex,__fnParam__index)",
                props: {
                    className: "multiCheck endNode",
                    onChange: "__fn__selectionUpdate",
                    type: "checkbox",
                    "data-content": "JSON.stringify(__fnParam__item)"
                }
            }, {
                type: "label",
                props: {
                    htmlFor: "__fn__generateId(__var__baseIndex,__fnParam__index)",
                    style: {
                        position: 'absolute',
                        left: '-40px',
                        bottom: '-5px'
                    }
                },
                children: ""
            }]
        },
        collapseCheckbox: {
            type: "div",
            props: {
                className: "'checkbox check-'+__var__checkType",
                style: {
                    display: "inline"
                }
            },
            children: [{
                type: "input",
                id: "__fn__generateId(__var__baseIndex,__fnParam__index)",
                props: {
                    className: "multiCheck midNode",
                    onChange: "__fn__selectionUpdate",
                    type: "checkbox",
                    "data-content": "JSON.stringify(__fnParam__item)"
                }
            }, {
                type: "label",
                props: {
                    htmlFor: "__fn__generateId(__var__baseIndex,__fnParam__index)",
                    style: {
                        position: 'absolute',
                        left: '-30px',
                        bottom: '-3px'
                    }
                },
                children: ""
            }]
        },
        baseTemplate: {
            type: "li",
            props: {
                style: "Object.assign({},__fnParam__item.searchStyle)"
            },
            children: ["__var__multiSelect?__tmpl__collapseCheckbox:''", {
                type: "__imports__Check",
                id: "'level'+__var__baseIndex+__fnParam__index",
                props: {
                    index: "__fnParam__index",
                    collapse: "__fnParam__item.collapse"
                }
            }, "__fnParam__item.custom==true?__fnParam__item[__var__labelField]:__tmpl__defaultLabel", {
                type: "ul",
                props: {
                    style: {
                        listStyle: "none",
                        whiteSpace: "nowrap",
                        paddingLeft: "__var__multiSelect?'30px':'10px'"
                    }
                },
                children: "__fn__renderTree(__fnParam__item[__var__childrenField],__var__baseIndex+__fnParam__index)"
            }]
        }
    },
    structure: {
        type: "ul",
        id: "baseRef",
        props: {
            className: "'tree '+__var__treeClass.collapseNode",
            style: "Object.assign({},{ marginLeft:__var__multiSelect?'20px':'0px', listStyle:'none', whiteSpace:'nowrap', minWidth:__fn__depthOf(__var__data)*40+200,width:'auto'},__var__defaultStyle.__root,__var__compStyle.__root)"
        },
        children: ["__fn__renderTree(__var__data,0)"]
    },
    lifecycleHooks: {
        init: {
            after: () => {
                __fn__initMaterial();
            }
        },
        reRender: {
            after: () => {
                __fn__initMaterial();
            }
        }
    },
    actions: [],
    workflows: {
        emitAction: (eventObj, payload, props) => {
            __evt__actionTrigger(eventObj, payload, props);
        },
        selectionHandler: eventObj => {
            const payload = {};
            payload['data'] = JSON.parse(eventObj.currentTarget.dataset.content);
            payload['parent'] = eventObj.currentTarget.dataset.parent;
            if (payload.data.disable) {
                return;
            }
            __fn__updateClasses(eventObj, '.base-actions');
            __evt__baseClick(eventObj, payload, __prop__);
        },
        collapsibleClick: eventObj => {
            const payload = JSON.parse(eventObj.currentTarget.dataset.content);
            __fn__updateClasses(eventObj, '.collapse-actions');
            __elId__[eventObj.currentTarget.htmlFor].toggleCheck();

            __evt__collapsibleClick(eventObj, payload, __prop__);
        }
    }
};