/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "TreeViewSearch",
    imports: [{
        type: "component",
        from: "./TreeView.phnx",
        take: "TreeView"
    }, {
        type: "component",
        from: "@phnx-components/text-field",
        take: "TextField"
    }, {
        type: "css",
        from: "@phnx-components/rc-libs/css/pages.min.css"
    }],
    variables: [{
        name: "searchMode",
        type: "boolean",
        defaultValue: true,
        scope: "public"
    }, {
        name: "localData",
        type: "array",
        defaultValue: [],
        scope: "private"
    }, {
        name: "style",
        type: "object",
        scope: "public",
        properties: { erase: false },
        defaultValue: {
            __root: {},
            collapseNode: {},
            baseNode: {}
        }
    }, {
        name: "defaultStyle",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: {
                fontSize: "1em",
                padding: "0.5em"
            },
            collapseNode: {
                display: "flex",
                fontSize: "1em",
                padding: "0.5em",
                // minWidth:"200px"
            },
            baseNode: {
                display: "flex",
                fontSize: "1em",
                padding: "0.5em 1em",
                // minWidth: "200px"
            }
        },
        scope: "public"
    }, {
        name: "treeClass",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: "none",
            collapseNode: "none",
            baseNode: "none"
        },
        scope: "public"
    }, {
        name: "data",
        type: "array",
        defaultValue: [],
        scope: "public"
    }, {
        name: "placeholder",
        type: "string",
        defaultValue: "No sub items",
        scope: "public"
    }, {
        name: "labelField",
        type: "string",
        defaultValue: "label",
        scope: "public"
    }, {
        name: "childrenField",
        type: "string",
        defaultValue: "children",
        scope: "public"
    }, {
        name: "multiSelect",
        type: "boolean",
        defaultValue: false,
        scope: "public"
    }, {
        name: "selectable",
        type: "boolean",
        defaultValue: true,
        scope: "public"
    }, {
        name: "checkType",
        type: "string",
        defaultValue: "info",
        scope: "public"
    }, {
        name: "baseIcon",
        type: "string",
        defaultValue: "pages",
        scope: "public"
    }, {
        name: "collapseIcon",
        type: "string",
        defaultValue: "web",
        scope: "public"
    }],
    functions: {
        getActiveNode: () => {
            return __elId__searchTree.getActiveNode();
        },
        getSelected: () => {
            return __elId__searchTree.getSelected();
        },
        filterTree: value => {
            const labelField = __var__labelField !== undefined ? __var__labelField : 'label';
            const childrenField = __var__childrenField !== undefined ? __var__childrenField : 'children';
            const filterData = __fn__searcher(value, JSON.parse(JSON.stringify(__var__data)), labelField, childrenField).data;
            __utils__setPrivateVars({
                localData: filterData
            }, true, {
                concat: false
            });
        },
        searcher: (searchKey, data, label, children) => {
            const substringRegex = new RegExp(searchKey, 'i');
            let flag = true;
            const filterData = data.map(item => {
                let tempObj;
                if (substringRegex.test(item[label])) {
                    flag = false;
                    tempObj = Object.assign({}, item);
                    tempObj['collapse'] = searchKey == '' ? true : false;
                } else if (item[children] !== undefined && item[children].length > 0) {
                    const returnData = __fn__searcher(searchKey, item[children], label, children);
                    tempObj = Object.assign({}, item);
                    tempObj[children] = returnData.data;
                    if (returnData.flag) {
                        tempObj['collapse'] = true;
                        tempObj['searchStyle'] = {
                            display: 'none'
                        };
                    } else {
                        tempObj['collapse'] = false;
                        flag = false;
                    }
                } else {
                    tempObj = Object.assign({}, item);
                    tempObj['searchStyle'] = {
                        display: 'none'
                    };
                }
                return tempObj;
            });
            return {
                data: filterData,
                flag: flag
            };
        }
    },
    eventHandlers: [{
        id: "baseClick",
        from: {
            searchTree: "baseClick"
        },
        workflow: ["baseHandler"]
    }, {
        id: "baseClick",
        from: {
            searchTree: "collapsibleClick"
        },
        workflow: ["collapsibleHandler"]
    }, {
        id: "searchHandler",
        from: {
            searchText: "textChange"
        },
        workflow: ["textChangeHandler"]
    }, {
        id: "actionClick",
        from: {
            searchTree: "actionTrigger"
        },
        workflow: ["actionHandler"]
    }],
    eventEmitters: [],
    localTemplates: {
        searchBox: {
            type: "__imports__TextField",
            id: "searchText",
            props: {
                placeholder: "Search Files"
            }
        }
    },
    structure: {
        type: "div",
        props: {
            className: "col-md-12 col-xs-12 col-sm-12 col-lg-12",
            style: {
                marginTop: "30px"
            }
        },
        children: ["__var__searchMode?__tmpl__searchBox:''", {
            type: "div",
            props: {
                style: {
                    overflowX: "auto",
                    height: "100%"
                }
            },
            children: [{
                type: "__imports__TreeView",
                id: "searchTree",
                props: {
                    data: "__var__localData",
                    style: "__var__style",
                    treeClass: "__var__treeClass",
                    placeholder: "__var__placeholder",
                    labelField: "__var__labelField",
                    childrenField: "__var__childrenField",
                    searchMode: true,
                    multiSelect: "__var__multiSelect",
                    selectable: "__var__selectable",
                    checkType: "__var__checkType",
                    baseIcon: "__var__baseIcon",
                    collapseIcon: "__var__collapseIcon"
                },
                defaults: "Object.assign({},{defaultStyle:__var__defaultStyle},__prop____passedDefaults)"
            }]
        }]
    },
    lifecycleHooks: {
        init: {
            before: () => {
                __utils__setPrivateVars({
                    localData: __var__data
                }, false, {
                    concat: false
                });
            }
        },
        reRender: {
            before: nextProps => {
                if (nextProps.data !== __var__data) {
                    __utils__setPrivateVars({
                        localData: __var__data
                    }, false, {
                        concat: false
                    });
                }
            }
        }
    },
    actions: [],
    workflows: {
        baseHandler: (eventObj, payload, props) => {
            __evt__baseClick(eventObj, payload, props);
        },
        collapsibleHandler: (eventObj, payload, props) => {
            __evt__collapsibleClick(eventObj, payload, props);
        },
        textChangeHandler: (eventObj, payload, props) => {
            __fn__filterTree(payload.value);
        },
        actionHandler: (eventObj, payload, props) => {
            __evt__actionTrigger(eventObj, payload, props);
        }
    }
};