/**
 * multiline component
 * Project: Phoenix UI creator
 * Author: Debashish
 */


"use strict";

module.exports = {
    name: "multiline",
    imports: [
        {
            type: "module",
            from: "d3",
            take: {
                what: "*",
                as: "d3"
            }
        },
        {
            type: "asset",
            from: "./assets/multiline.json",
            take: "multiline"
        },
        {
            type: "css",
            from: "./assets/multiline.css"
        }
    ],
    variables: [
        {
            name: "alias",
            type: "string",
            defaultValue: "Multiline",
            metadata: [{
                displayName: "Alias",
                widget: "INPUT",
                widgetData: {},
                grouping: "General",
                target: "alias"
            }],
            isMandatory: false,
            scope: "public"

        },
        {
            name: "compStyle",
            type: "object",
            defaultValue: {
                __root: {
                    backgroundColor: "rgba(255,255,255,1)",
                    borderWidth:"1px",
                    borderStyle: {
                        text: "Solid",
                        className: "fa fa-trash",
                        id: "solid"
                    },
                    borderColor: "rgba(0,0,0,0.12)",
                    borderRadius:"0px",
                    height: 400,
                    width: 700
                }
            },
            metadata: [ {
                displayName: "Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.width"
            }, {
                displayName: "Height",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.height"
            },{
                displayName: "Background color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.backgroundColor"
            },{
                displayName: "Border Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {
                    minValue: 0
                },
                grouping: "Style",
                target:"compStyle.__root.borderWidth"
            },{
                displayName: "Border Style",
                widget: "DROPDOWN",
                widgetData:{
                    values: [
                        {
                            text: "None",
                            className: "fa fa-trash",
                            id: "none"
                        },
                        {
                            text: "Solid",
                            className: "fa fa-trash",
                            id: "solid"
                        },
                        {
                            text: "Dotted",
                            className: "fa fa-trash",
                            id: "dotted"
                        },
                        {
                            text: "Dashed",
                            className: "fa fa-trash",
                            id: "dashed"
                        },
                        {
                            text: "Double",
                            className: "fa fa-trash",
                            id: "double"
                        }

                    ]
                },
                grouping: "Style",
                target: "compStyle.__root.borderStyle"
            },{
                displayName: "Border Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Style",
                target: "compStyle.__root.borderColor"
            },{
                displayName: "Border Radius",
                widget: "NUMERIC_STEPPER",
                widgetData: {
                    minValue: 0
                },
                grouping: "Style",
                target: "compStyle.__root.borderRadius"
            }],
            scope: "public"
        },
        {
            name: "colorTheme",
            type: "object",
            defaultValue: {
                scheme: "Default",
                colors: ["#3ec4cd","#3d9fcc","#3d7ccc","#3e41cc","#693ecc","#963dcd","#a1cc3e","#3ccc86"]},
            scope: "public"

        },
        {
            name: "curveType",
            type: "object",
            defaultValue: {
                text: "Basis Curve",
                className: "fa fa-trash",
                id: "curveBasis"
            },
            metadata: [{
                displayName: "Choose Curve type",
                widget: "DROPDOWN",
                widgetData: {
                    values: [
                        {
                            text: "Cardinal Curve",
                            className: "fa fa-trash",
                            id: "curveCardinal"
                        },
                        {
                            text: "Linear Curve",
                            className: "fa fa-trash",
                            id: "curveLinear"
                        },
                        {
                            text: "Step Before Curve",
                            className: "fa fa-trash",
                            id: "curveStepBefore"
                        },
                        {
                            text: "Step After Curve",
                            className: "fa fa-trash",
                            id: "curveStepAfter"
                        },
                        {
                            text: "Basis Curve",
                            className: "fa fa-trash",
                            id: "curveBasis"
                        },
                        {
                            text: "Step Curve",
                            className: "fa fa-trash",
                            id: "curveStep"
                        }]
                },
                grouping: "General",
                target: "curveType"
            }],
            scope: "public"
        },
        {
            name: "compTheme",
            type: "object",
            defaultValue: null,
            metadata: [{
                displayName: "Color theme",
                widget: "COLOR_PALETTE",
                widgetData: {},
                grouping: "Style",
                target: "compTheme"
            }],
            scope: "public"
        },
        {
            name: "compData",
            type: "object",
            defaultValue: {
                selectedDataset:"Default",
                parsedData: "__imports__multiline"
            },
            metadata: [{
                displayName: "Data Source",
                widget: "DATASOURCE",
                widgetData: {},
                grouping: "Data",
                target: "compData"
            }],
            isMandatory: false,
            scope: "public"
        },
        {
            name: "compMetadata",
            type: "object",
            defaultValue: {
                xAxis: {
                    xAxisVariable: "period"
                },
                yAxis: {
                    yAxisVariable: "temperature"
                }
            },
            metadata: [{
                displayName: "X-Axis Key",
                widget: "DATAMAPPER",
                widgetData: {},
                grouping: "Data",
                target: "compMetadata.xAxis.xAxisVariable"
            }, {
                displayName: "Y-Axis Key",
                widget: "DATAMAPPER",
                widgetData: {},
                grouping: "Data",
                target: "compMetadata.yAxis.yAxisVariable"
            }],
            isMandatory: false,
            scope: "public"
        },
        {
            name: "axisLabel",
            type: "object",
            defaultValue: {
                xAxisLabel: "Time Period",
                yAxisLabel: "Temperature",
                axisColor: "rgba(0,0,0,1)"
            },
            metadata: [{
                displayName: "xAxis Label",
                widget: "INPUT",
                widgetData: {},
                grouping: "Data",
                target: "axisLabel.xAxisLabel"
            }, {
                displayName: "yAxis Label",
                widget: "INPUT",
                widgetData: {},
                grouping: "Data",
                target: "axisLabel.yAxisLabel"
            }, {
                displayName: "Axis Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Data",
                target: "axisLabel.axisColor"
            }],
            scope: "public"
        },
        {
            name: "showHeader",
            type: "boolean",
            defaultValue: false,
            metadata: [{
                displayName: "Show Title",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "General",
                target: "showHeader"
            }],
            scope: "public"
        },
        {
            name: "title",
            type: "object",
            defaultValue: {
                text: "Multiline",
                color: "rgba(0,0,0,0.7)",
                fontSize: "20px",
                fontFamily: "Roboto",
                transform: "none"
            },
            metadata: [{
                displayName: "Text",
                widget: "INPUT",
                widgetData: {},
                grouping: "Title",
                target: "title.text"
            },{
                displayName: "Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Title",
                target: "title.color"
            },{
                displayName: "Font Size",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "Title",
                target: "title.fontSize"
            },{
                displayName: "Font Family",
                widget: "FONT_SELECTOR",
                widgetData: {},
                grouping: "Title",
                target: "title.fontFamily"
            },{
                displayName: "Case",
                widget: "TEXT_TRANSFORMER",
                widgetData: {},
                grouping: "Title",
                target: "title.transform"
            }],
            scope: "public"
        },
        {
            name: "margin",
            type: "object",
            defaultValue: {
                top: 20,
                right: 80,
                bottom: 30,
                left: 40
            },
            scope: "private"
        },
        {
            name: "axisFormat",
            type: "object",
            defaultValue: {
                xAxisFormat: {
                    text: "String",
                    className: "fa fa-trash",
                    id: "scaleBand"
                },
                yAxisFormat: {
                    text: "Number",
                    className: "fa fa-trash",
                    id: "scaleLinear"
                },

            },
            metadata: [{
                displayName: "X Axis Format",
                widget: "DROPDOWN",
                widgetData: {
                    values: [
                        {
                            text: "Number",
                            className: "fa fa-trash",
                            id: "scaleLinear"
                        },
                        {
                            text: "String",
                            className: "fa fa-trash",
                            id: "scaleBand"
                        }
                    ]
                },
                grouping: "Data",
                target: "axisFormat.xAxisFormat"
            },
                {
                    displayName: "Y Axis Format",
                    widget: "DROPDOWN",
                    widgetData: {
                        values: [
                            {
                                text: "Number",
                                className: "fa fa-trash",
                                id: "scaleLinear"
                            },
                            {
                                text: "String",
                                className: "fa fa-trash",
                                id: "scaleBand"
                            }
                        ]
                    },
                    grouping: "Data",
                    target: "axisFormat.yAxisFormat"
                }],
            scope: "public"

        },
        {
            name: 'elementId',
            type: 'string',
            defaultValue: '',
            scope: 'private'
        }

    ],
    functions: {

        customRender: function() {
            d3.select(__elId__multilineComp).selectAll("*").remove();

            let svg = d3.select(__elId__multilineComp),
                width = __var__compStyle.__root.width - __var__margin.left - __var__margin.right;

            if (__var__showHeader) {
                var height = __var__compStyle.__root.height - (__var__margin.top*3) - __var__margin.bottom,
                    g = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + (__var__margin.top*3) + ")");
            }
            else {
                height = __var__compStyle.__root.height - __var__margin.top - __var__margin.bottom,
                    g = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + __var__margin.top + ")");
            }

            let curveType = {
                curveLinear: d3.curveLinear,
                curveCardinal: d3.curveCardinal,
                curveBasis: d3.curveBasis,
                curveStepBefore: d3.curveStepBefore,
                curveStepAfter: d3.curveStepAfter,
                curveStep: d3.curveStep
            };

            let axisFormat = {
                scaleLinear: d3.scaleLinear,
                scaleBand: d3.scaleBand
            }

            try {
                let x = axisFormat[__var__axisFormat.xAxisFormat.id]().range([0, width]),
                    y = axisFormat[__var__axisFormat.yAxisFormat.id]().range([height, 0]),
                    z = d3.scaleOrdinal(__var__compTheme? __var__compTheme.colors: (__var__colorTheme.colors? __var__colorTheme.colors: ["#3ec4cd","#3d9fcc","#3d7ccc","#3e41cc","#693ecc","#963dcd","#a1cc3e","#3ccc86"]));

                let line = d3.line()
                    .curve(curveType[__var__curveType.id])
                    // .x(function(d) { return x(d[__var__compMetadata.xAxis.xAxisVariable]); })
                    // .y(function(d) { return y(d[__var__compMetadata.yAxis.yAxisVariable]); });
                    .x(function(d) { return x(d['key']); })
                    .y(function(d) { return y(d['data']); });
                __var__compData.parsedData.forEach(function(d){
                    d[__var__compMetadata.yAxis.yAxisVariable] = +d[__var__compMetadata.yAxis.yAxisVariable];
                });

                __var__compData.parsedData.columns = Object.keys(__var__compData.parsedData[0]);

                let cities = __var__compData.parsedData.columns.slice(1).map(function(id) {
                    return {
                        id: id,
                        values: __var__compData.parsedData.map(function(d) {
                            return {key: d[__var__compMetadata.xAxis.xAxisVariable], data: d[id]};
                        })

                    };

                });


                x.domain(__var__compData.parsedData.map(function(d) { return d[__var__compMetadata.xAxis.xAxisVariable];}));
                y.domain([
                    d3.min(cities, function(c) { return d3.min(c.values, function(d) { return d.data; }); }),
                    d3.max(cities, function(c) { return d3.max(c.values, function(d) { return d.data; }); })
                ]);

                z.domain(cities.map(function(c) { return c.id; }));



                g.append("g")
                    .attr("class", "x-axis")
                    .attr("id", __var__elementId)
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x).scale(x))
                    .append("text")
                    .attr("x", width)
                    .attr("y", -6)
                    .style("text-anchor", "end")
                    .text(__var__axisLabel.xAxisLabel);

                g.append("g")
                    .attr("class", "y-axis")
                    .attr("id", __var__elementId)
                    .call(d3.axisLeft(y).scale(y))
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", "0.71em")
                    .text(__var__axisLabel.yAxisLabel);

                d3.selectAll("#"+__var__elementId+".y-axis line").attr("stroke", __var__axisLabel.axisColor);
                d3.selectAll("#"+__var__elementId+".y-axis path").attr("stroke", __var__axisLabel.axisColor);
                d3.selectAll("#"+__var__elementId+".y-axis text").attr("fill", __var__axisLabel.axisColor);

                d3.selectAll("#"+__var__elementId+".x-axis line").attr("stroke", __var__axisLabel.axisColor);
                d3.selectAll("#"+__var__elementId+".x-axis path").attr("stroke", __var__axisLabel.axisColor);
                d3.selectAll("#"+__var__elementId+".x-axis text").attr("fill", __var__axisLabel.axisColor);

                if (__var__showHeader){
                    let h = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + __var__margin.top + ")");

                    h.append("line")
                        .attr("x1", 0 - __var__margin.left)
                        .attr("y1", __var__margin.top)
                        .attr("x2", width + __var__margin.right)
                        .attr("y2", __var__margin.top)
                        .style("stroke", "rgba(0,0,0,0.12)");

                    h.append('text')
                        .text(__var__title.text)
                        .attr("fill", __var__title.color)
                        .attr('x', 0)
                        .attr('y', __var__margin.top - 10)
                        .attr('text-anchor', "start")
                        .style('font-family', __var__title.fontFamily)
                        .style("font-size", __var__title.fontSize)
                        .style("text-decoration", "none")
                        .style("text-transform", __var__title.transform);

                }

                let city = g.selectAll(".city")
                    .data(cities)
                    .enter().append("g")
                    .attr("class", "city");

                city.append("path")
                    .attr("class", "line")
                    .attr("d", function(d) { return line(d.values); })
                    .style("stroke", function(d) { return z(d.id); });

                city.append("text")
                    .datum(function(d) { return {id: d.id, value: d.values[d.values.length - 1]}; })
                    .attr("transform", function(d) { return "translate(" + x(d.value.key) + "," + y(d.value.data) + ")"; })
                    .attr("x", 3)
                    .attr("dy", "0.35em")
                    .style("font", "10px sans-serif")
                    .attr("fill", __var__axisLabel.axisColor)
                    .text(function(d) { return d.id; });
            }
            catch(err) {
                let h = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + __var__margin.top + ")");


                h.append('text')
                    .text("Oops!")
                    .attr("fill", __var__axisLabel.axisColor)
                    .attr('x', width /2 )
                    .attr('y', height /3)
                    .attr('text-anchor', "middle")
                    .style('font-family', "Roboto")
                    .style("font-size", "20px")
                    .style("text-decoration", "none")
                    .style("text-transform", "none");


                h.append('text')
                    .text("Select a proper data format!")
                    .attr("fill", __var__axisLabel.axisColor)
                    .attr('x', width /2 )
                    .attr('y', height /2)
                    .attr('text-anchor', "middle")
                    .style('font-family', "Roboto")
                    .style("font-size", "14px")
                    .style("text-decoration", "none")
                    .style("text-transform", "none");
            }

        }

    },
    eventHandlers: [],
    eventEmitters: [],
    actions: [],
    workflows: {},
    localTemplates: {},
    structure: {
        type: "div",
        id: "multilineParent",
        props: {
            style: {
                width: "__var__compStyle.__root.width",
                height: "__var__compStyle.__root.height",
                backgroundColor: "__var__compStyle.__root.backgroundColor"
            }

        },
        children: [
            {
                type: "svg",
                id: "multilineComp",
                props: {
                    viewBox: "'0 0 '+__var__compStyle.__root.width+ ' '+__var__compStyle.__root.height",
                    height: "__var__compStyle.__root.height",
                    width: "__var__compStyle.__root.width",
                    style: {
                        borderWidth: "__var__compStyle.__root.borderWidth",
                        borderStyle: "__var__compStyle.__root.borderStyle.id",
                        borderColor: "__var__compStyle.__root.borderColor",
                        borderRadius: "__var__compStyle.__root.borderRadius"
                    }
                }

            }

        ]

    },
    lifecycleHooks: {
        init: {
            before: function() {
                __utils__setPrivateVars({ elementId: __prop__id}, false, {concat: false, erase: true});
            },
            after: function() {
                __fn__customRender();
            }
        },
        onModelChange: function(newExternalVariables) {

        },
        reRender: {
            shouldAllow: function(newExternalVariables) {
                return true;
            },
            before: function(newExternalVariables) {

            },
            after: function(newExternalVariables) {
                __fn__customRender();
            }
        },
        cleanup: function() {

        }
    }

};