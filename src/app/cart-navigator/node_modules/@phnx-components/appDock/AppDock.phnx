'use strict!';

module.exports = {
    name: "appDock",
    variables: [
        {
            name: "appList",
            scope: "private",
            type: "array",
            defaultValue: []
        },
        {
            name: "appsURL",
            type: "string",
            defaultValue: "/phoenix/eoc-rest/quick-link/all",
            scope: "public"
        },
        {
            name: "accessToken",
            type: "string",
            isMandatory: true,
            scope: "public"
        },
        {
            name: "compStyle",
            type: "object",
            defaultValue: {
                menuIcon: {},
                modal: {},
                appIcon: {}
            },
            scope: "public"
        },
        {
            name: "yourProductURL",
            type: "string",
            defaultValue: "",
            scope: "public"
        }
    ],
    imports: [
        {
            type: "asset",
            from: "./assets/menu.svg",
            take: "appDock"
        },
        {
            type: "asset",
            from: "./assets/unlink.svg",
            take: "unlink"
        }
    ],
    functions: {
        showApps: () => {
            let appDock = __elId__appDock;
            appDock.classList.toggle("hide");
        },
        hideApps: () => {
            let optionModal = __elId__appDock;
            optionModal.classList.add("hide");
        },
        getAppList: (data) => {
            if (data.length > 0) {
                if (__var__yourProductURL != "") {
                    let productURL = __var__yourProductURL;

                    function dropMyApp(app, index, data) {
                        return app.quick_link_url == productURL
                    }
                    let myAppIndex = data.findIndex(dropMyApp);
                    if (myAppIndex >= 0) {
                        data.splice(myAppIndex, 1);
                    }
                }
                return data.map(function (app) {
                    app["appName"] = app["quick_link_url"].split("/")[0];
                    return __tmpl__appListItem
                })
            } else if (data.length == 0) {
                return __tmpl__noAppsTemplate
            }

        },
        takeMe: (event) => {
            let appNode = event.currentTarget.getElementsByTagName("img")[0];
            let appUri = appNode.dataset.appuri;

            if (appUri != "" && appUri != undefined) {
                if (document.domain == "eoc" && appUri.search("percept") > 0) {
                    document.domain = "qa.ird.mu-sigma.com/"; // exception for no percept instance on EoC
                }
                if (appUri.startsWith('http') || appUri.startsWith('/'))
                    window.open(appUri, '_blank');
                else
                    window.open("/" + appUri, '_blank');
            } else {
                GlobalEvents.trigger("showNotif", {
                    message: "there is no instance of the app on this domain",
                    type: "warning"
                })
            }
            __fn__hideApps();
        },
        getApps: () => {
            fetch(__var__appsURL, {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/json",
                    "Authorization": 'Bearer ' + __var__accessToken
                }),
                mode: 'cors',
                cache: 'default',
                json: true
            }).then((res) => {
                if (res.ok) {
                    return res.json().then(__wf__onAppSuccess);
                } else
                    __wf__onAppFailure();
            }).catch(__wf__onAppFailure);
        }
    },
    workflows: {
        onAppSuccess: (payload) => {
            __utils__setPrivateVars({
                    appList: payload
                },
                true, {
                    concat: false,
                    erase: true
                }
            )
        },
        onAppFailure: () => {
            __wf__notification(undefined, {
                showNotification: true,
                notificationType: 'error',
                message: 'Unable to get issue labels'
            }, {
                erase: true
            });
        },
        notification: (evt, payload, props) => {
            __utils__emitEvent("notify", evt, payload, props);
        }
    },
    actions: [
        {
            id: 'getAppList',
            type: 'CALL',
            what: '__dConn__updateProject.request',
            body: () => ({
                name: __var__activeProjectNew,
                id: __var__activeProject['id']
            }),
            response: {
                successCallBack: ["updateProjectSuccess"],
                failureCallBack: ["updateProjectFailure"]
            }
        }
    ],
    structure: {
        "type": "span",
        "children": [
            {
                type: "img",
                props: {
                    src: "__imports__appDock",
                    onClick: "__fn__showApps",
                    className: "appDockIcon",
                    style: "Object.assign({}, {width: '22px'}, __var__compStyle['menuIcon'])"
                }
            },
            //apps
            {
                type: "div",
                id: "appDock",
                props: {
                    className: "hide",
                    style: "Object.assign({}, {position: 'relative'}, __var__compStyle['modal'])",
                    onBlur: "__fn__hideApps"
                },
                children: [{
                        type: "div",
                        props: {
                            className: "tooltip-arrow"
                        }
                },
                    {
                        type: "ul",
                        props: {
                            className: "dropdown-menu dropdown-menu show",
                            role: "menu",
                            style: {
                                marginLeft: "-700%",
                                display: "inline",
                                width: "320px",
                                padding: "10px",
                                marginTop: "10px",
                                background: "whitesmoke",
                                boxShadow: "0px 0px 15px rgba(98, 98, 98, 0.2)"
                            }
                        },
                        children: "__fn__getAppList(__var__appList)"
                    },
                    {
                        type: "div",
                        props: {
                            style: {
                                height: "2px"
                            }
                        }
                    }
                ]
            }
        ],
        "props": {
            "className": "semi-bold text-success"
        }
    },
    localTemplates: {
        appListItem: {
            type: "li",
            props: {
                className: "dropdown-item",
                style: {
                    padding: "5px",
                    textAlign: "center",
                    width: "100px",
                    height: "40px",
                    display: "inline-block",
                    verticalAlign: "middle"
                },
                onClick: "__fn__takeMe"
            },
            children: [
                {
                    type: "div",
                    props: {
                        style: {
                            display: "inline-block",
                            color: "gray"
                        }
                    },
                    children: [
                        {
                            type: "img",
                            props: {
                                src: "__fnParam__app.image_url",
                                "data-appURI": "__fnParam__app.quick_link_url",
                                style: "Object.assign({}, {width: '90px'}, __var__compStyle['appIcon'])"
                            }
                        },
                        {
                            type: "div",
                            props: {
                                className: "appName",
                                style: {
                                    textOverflow: "ellipsis",
                                    display: "none"
                                }
                            },
                            children: [
                                "__fnParam__app.appName"
                            ]
                        }
                    ]
                }
            ]
        },
        noAppsTemplate: {
            type: "li",
            props: {
                className: "dropdown-item",
                style: {
                    padding: "5px",
                    textAlign: "center",
                    width: "100%",
                    height: "",
                    display: "inline-block",
                    verticalAlign: "middle"
                },
                onClick: "__fn__takeMe"
            },
            children: [
                {
                    type: "div",
                    props: {
                        style: {
                            display: "inline-block",
                            color: "gray",
                            textAlign: "center"
                        }
                    },
                    children: [
                        {
                            type: "img",
                            props: {
                                src: "__imports__unlink",
                                style: {
                                    width: '60px'
                                }
                            }
                        },
                        {
                            type: "div",
                            props: {
                                className: "appName",
                                style: {
                                    textOverflow: "ellipsis"
                                }
                            },
                            children: [
                                "No apps on this domain"
                            ]
                        }
                    ]
                }
            ]
        }
    },
    lifecycleHooks: {
        init: {
            before: () => {
                __fn__getApps();
            }
        }
    }
};