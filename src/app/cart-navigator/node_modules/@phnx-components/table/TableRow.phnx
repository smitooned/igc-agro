/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "MTableRow",
    imports: [{
        type: "component",
        from: "./TableRowColumn.phnx",
        take: "cell"
    }, {
        type: "component",
        from: "./TableHeaderColumn.phnx",
        take: "headerCell"
    }],
    variables: [{
        name: "style",
        type: "object",
        isMandatory: true,
        scope: "public"
    }, {
        name: "headerStyle",
        type: "object",
        isMandatory: true,
        scope: "public"
    }, {
        name: "position",
        type: "number",
        isMandatory: true,
        scope: "public"
    }, {
        name: "cellType",
        type: "string",
        defaultValue: "cell",
        scope: "public"
    }, {
        name: "rowData",
        type: "array",
        defaultValue: [],
        scope: "public"
    }, {
        name: "originData",
        type: "array",
        defaultValue: [],
        scope: "public"
    }, {
        name: "selectable",
        type: "boolean",
        isMandatory: true,
        scope: "public"
    }, {
        name: "sorting",
        type: "object",
        isMandatory: true,
        scope: "public"
    }, {
        name: "byPass",
        type: "function",
        scope: "public"
    }, {
        name: "selected",
        type: "string",
        defaultValue: "",
        scope: "private"
    }, {
        name: "className",
        type: "string",
        isMandatory: true,
        scope: "public"
    }, {
        name: "headerClass",
        type: "object",
        isMandatory: false,
        scope: "public"
    }, {
        name: "primaryColor",
        type: "string",
        scope: "private",
        defaultValue: ""
    }, {
        name: "stripeColor",
        type: "string",
        scope: "private",
        defaultValue: ""
    }],
    functions: {
        getTone: () => {
            if (__var__cellType == "cell") {
                let primaryColor = __var__style["rowCell"]["backgroundColor"] || 0;
                let hexPrimaryColor;
                if (primaryColor.toString().indexOf("rgba") != -1) {
                    let r = (parseInt(((primaryColor.split("("))[1].split(","))[0])).toString(16);
                    let g = (parseInt(((primaryColor.split("("))[1].split(","))[1])).toString(16);
                    let b = (parseInt(((primaryColor.split("("))[1].split(","))[2])).toString(16);
                    let rgb = [r, g, b];
                    rgb.forEach(function (color, i) {
                        if (color.length < 2) {
                            rgb[i] = "0" + color
                        }
                    });
                    hexPrimaryColor = rgb[0] + rgb[1] + rgb[2]
                } else if (primaryColor.toString().indexOf("#") != -1) {
                    hexPrimaryColor = (primaryColor.split("#"))[1]
                }
                let stripeAmt = parseInt(__var__style["rowCell"]["stripeDelta"]) || 0;
                let num = parseInt(hexPrimaryColor, 16);
                let r1 = ((num >> 16) + stripeAmt).toString(16);
                let g1 = (((num >> 8) & 0x00FF) + stripeAmt).toString(16);
                let b1 = ((num & 0x0000FF) + stripeAmt).toString(16);
                let rgb1 = [r1, g1, b1];
                rgb1.forEach(function (color, i) {
                    if (color.length < 2) {
                        rgb1[i] = "0" + color
                    }
                });
                let newColor = rgb1[0] + rgb1[1] + rgb1[2];
                __utils__setPrivateVars({
                        stripeColor: "#" + newColor,
                        primaryColor: "#" + hexPrimaryColor
                    },
                    false, {
                        concat: false,
                        erase: true
                    }
                );
            }
        },
        renderCells: () => {
            const returnArray = [];
            __var__rowData.forEach((item, index) => {
                if (item && item.type == "custom") {
                    return item.value;
                }
                returnArray.push(__var__cellType == 'header' ? __tmpl__headerTemplate : __tmpl__cellTemplate);
            });
            return returnArray;
        },
        resolveSelection: evObj => {
            if (__var__selectable) {
                __utils__setPrivateVars({
                    selected: __var__selected == 'selected' ? '' : 'selected'
                });
            }
            __wf__emitSelected(evObj);
        }
    },
    eventHandlers: [],
    eventEmitters: [],
    localTemplates: {
        cellTemplate: {
            type: "__imports__cell",
            props: {
                cellLabel: "__fnParam__item",
                style: "Object.assign({},__var__style.rowCell,__var__style.colStyle[__var__originData[__fnParam__index]], { backgroundColor: __var__position % 2 == 0 ? __var__stripeColor : __var__primaryColor})"
            }
        },
        headerTemplate: {
            type: "__imports__headerCell",
            props: {
                style: "Object.assign({},__var__headerStyle.headerCell,__var__style.colStyle[__var__originData[__fnParam__index]],__var__headerStyle[__var__originData[__fnParam__index]])",
                className: "__var__headerClass[__var__originData[__fnParam__index]]",
                headerLabel: "__fnParam__item",
                byPass: "__var__byPass",
                originLabel: "__var__originData[__fnParam__index]",
                sortFlag: "__var__sorting!==null && __var__sorting[__var__originData[__fnParam__index]]!=='none' && __var__sorting[__var__originData[__fnParam__index]]!==undefined"
            }
        }
    },
    structure: {
        type: "tr",
        props: {
            "data-position": "__var__position",
            className: "__var__selected+' '+__var__className",
            role: "row",
            onClick: "__fn__resolveSelection",
            style: "Object.assign({},__var__style.__root,{transition: 'all 0.3s ease-out',cursor:__var__selectable?'pointer':'auto'})"
        },
        children: ["__fn__renderCells()"]
    },
    lifecycleHooks: {
        init: {
            before: () => {
                __fn__getTone();
            }
        },
        reRender: {
            before: () => {
                __fn__getTone();
            }
        }
    },
    actions: [],
    workflows: {
        emitSelected: (eventObj, payload, properties) => {
            __evt__selected(eventObj, eventObj.currentTarget.getAttribute('data-position'), properties);
        }
    }
};