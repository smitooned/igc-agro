/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "MTable",
    imports: [
        {
            type: "component",
            from: "./TableHeader.phnx",
            take: "header"
        }, {
            type: "component",
            from: "./TableBody.phnx",
            take: "body"
        }, {
            type: "module",
            from: "rx",
            take: {
                what: "default",
                as: "Rx"
            }
        }, {
            type: "css",
            from: "./css/jquery.dataTables.css"
        }, {
            type: "css",
            from: "./css/dataTables.fixedColumns.min.css"
        }
    ],
    variables: [
        {
            name: "alias",
            type: "string",
            defaultValue: "table",
            metadata: [{
                displayName: "Alias",
                widget: "INPUT",
                widgetData: {},
                grouping: "General",
                target: "alias"
            }],
            isMandatory: false,
            scope: "public"

        },
        {
            name: "data",
            type: "object",
            defaultValue: {
                selectedDataset: "Default",
                parsedData: [{
                    id: 1,
                    product: "Apple",
                    quantity: "20kg"
                }, {
                    id: 2,
                    product: "Orange",
                    quantity: "10kg"
                }, {
                    id: 3,
                    product: "Jackfruit",
                    quantity: "100kg"
                }, {
                    id: 4,
                    product: "Chikoo",
                    quantity: "75kg"
                }, {
                    id: 5,
                    product: "Guava",
                    quantity: "5kg"
                }]
            },
            scope: "public",
            metadata: [
                {
                    displayName: 'Table',
                    widget: 'TABLE_DATA_PROPERTIES',
                    widgetData: {
                        variable: 'dataKeys'
                    },
                    grouping: '',
                    tab: 'Data',
                    target: 'data'
                },
                {
                    displayName: 'Select Dataset',
                    widget: 'DATASOURCE',
                    widgetData: {},
                    grouping: 'General',
                    target: 'data'
                }
            ]
        },
        {
            name: "dataKeys",
            type: "array",
            defaultValue: [],
            scope: "public",
            metadata: {
                displayName: 'Select Variables',
                widget: 'ARRAY_INPUT',
                widgetData: {
                    enableSuggestions: true,
                    placeHolder: "Add new column",
                    minTagLength: 1,
                    sendAllOnInit: true
                },
                grouping: 'General',
                target: 'dataKeys'
            }
        },
        {
            name: 'placeholder',
            type: 'string',
            defaultValue: "Search Table",
            scope: 'public'
        },
        {
            name: "byPass",
            type: "any",
            defaultValue: null,
            scope: "private"
        },
        {
            name: "defaultStyle",
            type: "object",
            scope: "private",
            properties: { erase: false },
            defaultValue: {
                __root: {
                    // display:'block',
                    backgroundColor: "white",
                    border: 'solid 1px rgba(0,0,0,0.38)'
                },
                headerStyle: {
                    __root: {},
                    headerCell: {}
                },
                bodyStyle: {},
                rowStyle: {
                    __root: {},
                    rowCell: {
                        stripeDelta: 0
                    }
                },
                colStyle: {
                    name: {}
                }
            }
        },
        {
            name: "compStyle",
            type: "object",
            properties: { erase: false },
            defaultValue: {
                __root: {
                    height: 240,
                    backgroundColor: 'rgba(255,255,255,1)',
                    width: 310,
                    borderWidth:"1px",
                    borderStyle: {
                        text: "Solid",
                        className: "fa fa-trash",
                        id: "solid"
                    },
                    borderColor: "rgba(0,0,0,0.12)",
                    borderRadius:0,
                    tableLayout: "fixed"
                },
                headerStyle: {
                    __root: {
                    },
                    headerCell: {
                        wordWrap: "break-word",
                        height: "22px",
                        textAlign: "center",
                        backgroundColor: "#ffffff",
                        color: "#2c2c2c",
                        borderWidth:"1px",
                        borderStyle: {
                            text: "Solid",
                            className: "fa fa-trash",
                            id: "solid"
                        },
                        borderColor: "rgba(0,0,0,0.12)",
                        borderRadius:0,
                        fontFamily: "Montserrat",
                        fontSize: "15px",
                        fontWeight: "bold",
                        textTransform: "uppercase",
                        textStyle: {
                            fontWeight: "bold"
                        }
                    }
                },
                bodyStyle: {},
                rowStyle: {
                    __root: {},
                    rowCell: {
                        wordWrap: "break-word",
                        verticalAlign: "middle",
                        height: "18px",
                        textAlign: "center",
                        backgroundColor: "#ffffff",
                        color: "#2c2c2c",
                        fontFamily: "Montserrat",
                        fontSize: "12px",
                        fontWeight: "normal",
                        borderWidth:"1px",
                        borderStyle: {
                            text: "Solid",
                            className: "fa fa-trash",
                            id: "solid"
                        },
                        borderColor: "rgba(0,0,0,0.12)",
                        borderRadius:0,
                        stripeDelta: 0
                    }
                },
                colStyle: {
                    name: {}
                }
            },
            metadata: [
                {
                    displayName: 'Table',
                    widget: 'TABLE_STYLE_PROPERTIES',
                    widgetData: {
                        headerStyle: 'compStyle.headerStyle.headerCell',
                        rowStyle: 'compStyle.rowStyle.rowCell'
                    },
                    grouping: '',
                    tab: 'Style',
                    target: 'compStyle.__root'
                },
                {
                    displayName: 'Table',
                    widget: 'TABLE_TEXT_PROPERTIES',
                    widgetData: {
                        rowTextStyle: 'compStyle.rowStyle.rowCell',
                    },
                    grouping: '',
                    tab: 'Text',
                    target: 'compStyle.headerStyle.headerCell'
                },
                {
                    displayName: 'Height',
                    widget: 'NUMERIC_STEPPER',
                    widgetData: {
                        minValue: 100
                    },
                    grouping: 'General',
                    target: 'compStyle.__root.height'
                },
                {
                    displayName: 'Width',
                    widget: 'NUMERIC_STEPPER',
                    widgetData: {
                        minValue: 100,
                        maxLength: 10
                    },
                    grouping: 'General',
                    target: 'compStyle.__root.width'
                },
                {
                    displayName: "Border Width",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {
                        minValue: 0
                    },
                    grouping: "Style",
                    target:"compStyle.__root.borderWidth"
                },{
                    displayName: "Border Style",
                    widget: "DROPDOWN",
                    widgetData:{
                        values: [
                            {
                                text: "None",
                                className: "fa fa-trash",
                                id: "none"
                            },
                            {
                                text: "Solid",
                                className: "fa fa-trash",
                                id: "solid"
                            },
                            {
                                text: "Dotted",
                                className: "fa fa-trash",
                                id: "dotted"
                            },
                            {
                                text: "Dashed",
                                className: "fa fa-trash",
                                id: "dashed"
                            },
                            {
                                text: "Double",
                                className: "fa fa-trash",
                                id: "double"
                            }

                        ]
                    },
                    grouping: "Style",
                    target: "compStyle.__root.borderStyle"
                },{
                    displayName: "Border Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "Style",
                    target: "compStyle.__root.borderColor"
                },{
                    displayName: "Border Radius",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {
                        minValue: 0
                    },
                    grouping: "Style",
                    target: "compStyle.__root.borderRadius"
                },
                {
                    displayName: 'Height',
                    widget: 'NUMERIC_STEPPER',
                    widgetData: {
                        minValue: 10
                    },
                    grouping: 'TABLE HEADER CELLS',
                    target: 'compStyle.headerStyle.headerCell.height'
                },
                {
                    displayName: "Border Width",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {
                        minValue: 0
                    },
                    grouping: "Style",
                    target:"compStyle.headerStyle.headerCell.borderWidth"
                },{
                    displayName: "Border Style",
                    widget: "DROPDOWN",
                    widgetData:{
                        values: [
                            {
                                text: "None",
                                className: "fa fa-trash",
                                id: "none"
                            },
                            {
                                text: "Solid",
                                className: "fa fa-trash",
                                id: "solid"
                            },
                            {
                                text: "Dotted",
                                className: "fa fa-trash",
                                id: "dotted"
                            },
                            {
                                text: "Dashed",
                                className: "fa fa-trash",
                                id: "dashed"
                            },
                            {
                                text: "Double",
                                className: "fa fa-trash",
                                id: "double"
                            }

                        ]
                    },
                    grouping: "Style",
                    target: "compStyle.headerStyle.headerCell.borderStyle"
                },{
                    displayName: "Border Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "Style",
                    target: "compStyle.headerStyle.headerCell.borderColor"
                },{
                    displayName: "Border Radius",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {
                        minValue: 0
                    },
                    grouping: "Style",
                    target: "compStyle.headerStyle.headerCell.borderRadius"
                },
                {
                    displayName: "Header Background Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "General",
                    target: "compStyle.headerStyle.headerCell.backgroundColor"
                },
                {
                    displayName: "Font Family",
                    widget: "FONT_SELECTOR",
                    widgetData: {},
                    grouping: "TABLE HEADER CELLS",
                    target: "compStyle.headerStyle.headerCell.fontFamily"
                },
                {
                    displayName: "Font Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "TABLE HEADER CELLS",
                    target: "compStyle.headerStyle.headerCell.color"
                },
                {
                    displayName: "Font Size",
                    widget: "COMBOBOX",
                    widgetData: {
                        minValue: 0
                    },
                    grouping: "TABLE HEADER CELLS",
                    target: "compStyle.headerStyle.headerCell.fontSize"
                },
                {
                    displayName: "Case Type",
                    widget: "TEXT_TRANSFORMER",
                    widgetData: {},
                    grouping: "TABLE HEADER CELLS",
                    target: "compStyle.headerStyle.headerCell.textTransform"
                },
                {
                    displayName: "Text Align",
                    widget: "TEXT_ALIGNER",
                    widgetData: {},
                    grouping: "TABLE HEADER CELLS",
                    target: "compStyle.headerStyle.headerCell.textAlign"
                },
                {
                    displayName: "Text Style",
                    widget: "TEXT_FORMATTER",
                    widgetData: {},
                    grouping: "TABLE HEADER CELLS",
                    target: "compStyle.headerStyle.headerCell.textStyle"
                },
                {
                    displayName: 'Height',
                    widget: 'NUMERIC_STEPPER',
                    widgetData: {
                        minValue: 10
                    },
                    grouping: 'BODY CELLS',
                    target: 'compStyle.rowStyle.rowCell.height'
                },
                {
                    displayName: "Border Width",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {
                        minValue: 0
                    },
                    grouping: "Style",
                    target:"compStyle.rowStyle.rowCell.borderWidth"
                },{
                    displayName: "Border Style",
                    widget: "DROPDOWN",
                    widgetData:{
                        values: [
                            {
                                text: "None",
                                className: "fa fa-trash",
                                id: "none"
                            },
                            {
                                text: "Solid",
                                className: "fa fa-trash",
                                id: "solid"
                            },
                            {
                                text: "Dotted",
                                className: "fa fa-trash",
                                id: "dotted"
                            },
                            {
                                text: "Dashed",
                                className: "fa fa-trash",
                                id: "dashed"
                            },
                            {
                                text: "Double",
                                className: "fa fa-trash",
                                id: "double"
                            }

                        ]
                    },
                    grouping: "Style",
                    target: "compStyle.rowStyle.rowCell.borderStyle"
                },{
                    displayName: "Border Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "Style",
                    target: "compStyle.rowStyle.rowCell.borderColor"
                },{
                    displayName: "Border Radius",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {
                        minValue: 0
                    },
                    grouping: "Style",
                    target: "compStyle.rowStyle.rowCell.borderRadius"
                },
                {
                    displayName: "Body Background Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "General",
                    target: "compStyle.rowStyle.rowCell.backgroundColor"
                },
                {
                    displayName: "Alternate Row Brightness ",
                    widget: "SLIDER",
                    widgetData: {
                        minValue:-50,
                        maxValue: 50,
                        stepCount: 1
                    },
                    grouping: "General",
                    target: "compStyle.rowStyle.rowCell.stripeDelta"
                },
                {
                    displayName: "Font Family",
                    widget: "FONT_SELECTOR",
                    widgetData: {},
                    grouping: "BODY CELLS",
                    target: "compStyle.rowStyle.rowCell.fontFamily"
                },
                {
                    displayName: "Font Size",
                    widget: "COMBOBOX",
                    widgetData: {
                        minValue: 0
                    },
                    grouping: "BODY CELLS",
                    target: "compStyle.rowStyle.rowCell.fontSize"
                },
                {
                    displayName: "Case Type",
                    widget: "TEXT_TRANSFORMER",
                    widgetData: {},
                    grouping: "BODY CELLS",
                    target: "compStyle.rowStyle.rowCell.textTransform"
                },
                {
                    displayName: "Font Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "BODY CELLS",
                    target: "compStyle.rowStyle.rowCell.color"
                },
                {
                    displayName: "Text Align",
                    widget: "TEXT_ALIGNER",
                    widgetData: {},
                    grouping: "BODY CELLS",
                    target: "compStyle.rowStyle.rowCell.textAlign"
                },
                {
                    displayName: "Text Style",
                    widget: "TEXT_FORMATTER",
                    widgetData: {},
                    grouping: "BODY CELLS",
                    target: "compStyle.rowStyle.rowCell.textStyle"
                }
            ],
            scope: "public"
        },
        {
            name: "tableClass",
            type: "object",
            properties: { erase: false },
            defaultValue: {
                __root: "none",
                headerClass: "none",
                bodyClass: "none",
                rowClass: "none"
            },
            scope: "public"
        },
        {
            name: "labelMapping",
            type: "object",
            defaultValue: {
                id: "Id",
                product: "Product",
                quantity: "Quantity"
            },
            scope: "public"
        },
        {
            name: "labelMappingLocale",
            type: "object",
            defaultValue: {},
            scope: "private"
        }, {
            name: "enableHover",
            type: "boolean",
            defaultValue: false,
            scope: "public"
        }, {
            name: "selectable",
            type: "boolean",
            defaultValue: false,
            scope: "public"
        }, {
            name: "sorting",
            type: "object",
            defaultValue: null,
            scope: "public"
        }, {
            name: "searchable",
            type: "boolean",
            defaultValue: false,
            scope: "public"
        }, {
            name: "searchStyle",
            type: "object",
            defaultValue: {},
            scope: "public"
        }],
    functions: {
        filterData: evObj => {
            const payload = {};
            payload['type'] = 'search';
            payload['data'] = evObj.currentTarget.value;
            __var__byPass.onNext(payload);
        },
        setData: data => {
            __utils__setPublicVars({
                data: data
            }, true, {
                concat: false
            });
        },
        addData: data => {
            __utils__setPublicVars({
                data: data
            }, true, {
                concat: true
            });
        },
        removeData: position => {
            const spliceData = __var__data["parsedData"];
            spliceData.splice(position, 1);
            __utils__setPublicVars({
                data: spliceData
            });
        },
        getData: () => {
            return __var__data["parsedData"];
        },
        _resolveClass: () => {
            let baseClass = __var__tableClass.__root + ' table ';
            if (__var__enableHover) {
                baseClass += 'table-hover dataTable no-footer table-responsive';
            } else {
                baseClass += 'dataTable no-footer table-responsive';
            }
            return baseClass;
        }
    },
    eventHandlers: [{
        id: "emitSelection",
        from: {
            tableBody: "updateSelection"
        },
        workflow: ["emitSelection"]
    }],
    structure: {
        type: "div",
        props: {
            style: {
                display: "block",
                height: "__var__compStyle.__root.height",
                width: "__var__compStyle.__root.width"
            }
        },
        children: [{
            type: "div",
            props: {
                className: "form-group",
                style: {
                    display: "__var__searchable?'inline':'none'"
                }
            },
            children: [{
                type: "input",
                props: {
                    type: "text",
                    onChange: "__fn__filterData",
                    style: "Object.assign({},__var__searchStyle,{ margin:'0px 1vmin' })",
                    placeholder: "__var__placeholder"
                }
            }]
        }, {
            type: "table",
            props: {
                id: "__prop__id===undefined?'myDataTable':__prop__id",
                className: "__fn___resolveClass()",
                cellSpacing: 0,
                width: "100%",
                style: "Object.assign({},__var__defaultStyle.__root,__var__compStyle.__root)"
            },
            children: [{
                type: "__imports__header",
                props: {
                    style: "Object.assign({},__var__defaultStyle.headerStyle, {__root: __var__compStyle.headerStyle.__root, headerCell: Object.assign({},  __var__compStyle.headerStyle.headerCell, __var__compStyle.headerStyle.headerCell.textStyle)})",
                    colStyle: "Object.assign({},__var__defaultStyle.headerStyle,__var__compStyle.colStyle)",
                    className: "__var__tableClass.headerClass",
                    headerData: "Object.keys(__var__labelMappingLocale).map((item) => __var__labelMappingLocale[item])",
                    originData: "Object.keys(__var__labelMappingLocale)",
                    byPass: "__var__byPass",
                    sorting: "__var__sorting"
                }
            }, {
                type: "__imports__body",
                id: "tableBody",
                props: {
                    style: "Object.assign({},__var__defaultStyle.bodyStyle,__var__compStyle.bodyStyle)",
                    rowStyle: "Object.assign({},__var__defaultStyle.rowStyle,__var__compStyle.rowStyle, __var__compStyle.rowStyle.rowCell.textStyle , {__root: {backgroundColor: __var__compStyle.rowStyle.rowCell.backgroundColor + ' !important'}})",
                    colStyle: "Object.assign({},__var__defaultStyle.colStyle,__var__compStyle.colStyle)",
                    className: "__var__tableClass.bodyClass",
                    rowClass: "__var__tableClass.rowClass",
                    mappingData: "__var__labelMappingLocale",
                    bodyData: "__var__data['parsedData']",
                    originData: "Object.keys(__var__labelMappingLocale)",
                    selectable: "__var__selectable",
                    byPass: "__var__byPass",
                    sorting: "__var__sorting"
                }
            }]
        }]
    },
    lifecycleHooks: {
        init: {
            before: () => {
                const subject = new Rx.Subject();
                let labelMap = __var__labelMapping;
                let dataKeys = __var__dataKeys;
                const labelMapping = {},
                    sorting = {};
                if(dataKeys.length > 0) {
                    if (this.__localProps.data["parsedData"].length != 0) {
                        dataKeys.forEach(key => {
                            labelMapping[key] = key;
                            sorting[key] = isNaN(__var__data["parsedData"][0][key]) ? 'string' : 'number';
                        });
                        __utils__setPrivateVars(
                            {
                                labelMappingLocale: labelMapping,
                                byPass: subject
                            },
                            true,
                            {
                                concat: false,
                                erase: true
                            }
                        )
                    }
                }else{
                    __utils__setPrivateVars({
                        byPass: subject,
                        labelMappingLocale: labelMap
                    }, true, {
                        concat:false,
                        erase: true
                    });
                }
            }
        },
        onModelChange: (newexternalvariables) => {
            const labelMapping = {},
                sorting = {};
            let dataKeys = newexternalvariables["dataKeys"] || [];
            if(newexternalvariables["labelMapping"]){
                __utils__setPrivateVars(
                    {
                        labelMappingLocale: newexternalvariables["labelMapping"]
                    },
                    true,
                    {
                        concat: false,
                        erase: true
                    }
                )
            }
            if(dataKeys.length > 0) {
                if (this.__localProps.data["parsedData"].length != 0) {
                    dataKeys.forEach(key => {
                        labelMapping[key] = key;
                        sorting[key] = isNaN(__var__data["parsedData"][0][key]) ? 'string' : 'number';
                    });
                    __utils__setPrivateVars(
                        {
                            labelMappingLocale: labelMapping
                        },
                        true,
                        {
                            concat: false,
                            erase: true
                        }
                    )
                }
            }
        },
        reRender: {
            after: () => {

            }
        }
    },
    actions: [],
    workflows: {
        emitSelection: (eventObj, payload, properties) => {
            __evt__updateSelection(eventObj, payload, properties);
        }
    }
};