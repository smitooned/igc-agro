/**
 * Shapes
 * Circle
 * Project: Phoenix UI creator
 * Author: Debashish
 */


"use strict";

module.exports = {
    name: "circle",
    imports: [
    ],
    includesDef: "@phnx-components/basedef",
    variables: [{
        name: "alias",
        type: "string",
        defaultValue: "Circle",
        metadata: [{
            displayName: "Alias",
            widget: "INPUT",
            widgetData: {},
            grouping: "Name",
            target: "alias"
        }],
        isMandatory: false,
        scope: "public"

    },
        {
            name: "compStyle",
            type: "object",
            defaultValue: {
                __root: {
                    "backgroundColor": "rgba(255,255,255,1)",
                    "height": 200,
                    "width": 200,
                    "stroke": "rgba(0,0,0,1)",
                    "strokeWidth": 1
                }
            },
            metadata: [{
                displayName: "Fill",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Options",
                target: "compStyle.__root.backgroundColor"
            }, {
                displayName: "Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "Options",
                target: "compStyle.__root.width"
            }, {
                displayName: "Height",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "Options",
                target: "compStyle.__root.height"
            }, {
                displayName: "Stroke",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Options",
                target: "compStyle.__root.stroke"
            }, {
                displayName: "Stroke-Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "Options",
                target: "compStyle.__root.strokeWidth"
            }],
            scope: "public"
        },
        {
            name: "fillOpacity",
            type: "number",
            defaultValue: 1,
            metadata: [{
                displayName: "Fill-Opacity",
                widget: "SLIDER",
                widgetData: {
                    maxValue: 1,
                    minValue:0,
                    stepCount:0.1
                },
                grouping: "Options",
                target: "fillOpacity"
            }],
            scope: "public"
        },
        {
            name: "strokeOpacity",
            type: "number",
            defaultValue: 1,
            metadata: [{
                displayName: "Stroke-Opacity",
                widget: "SLIDER",
                widgetData: {
                    maxValue: 1,
                    minValue:0,
                    stepCount:0.1
                },
                grouping: "Options",
                target: "strokeOpacity"
            }],
            scope: "public"
        }
    ],
    functions: {
        updateRadius: () => {
            if (__var__compStyle.__root.width  > __var__compStyle.__root.height) {
                return __var__compStyle.__root.height / 2;
            }
            else {
                return __var__compStyle.__root.width / 2;
            }
        }
    },
    eventHandlers: [],
    eventEmitters: [],
    actions: [],
    workflows: {},
    localTemplates: {},
    structure: {

        type: "svg",
        props: {
            viewBox: "'0 0 '+__var__compStyle.__root.width+ ' '+__var__compStyle.__root.height",
            width: "__var__compStyle.__root.width",
            height: "__var__compStyle.__root.height",
            style: {
                overflow: "initial"
            }
        },
        children: [
            {
                type: "circle",

                props: {
                    r: "__fn__updateRadius()",
                    cx: "__var__compStyle.__root.width / 2",
                    cy: "__var__compStyle.__root.height / 2",
                    style: {
                        fill: "__var__compStyle.__root.backgroundColor",
                        fillOpacity: "__var__fillOpacity",
                        stroke: "__var__compStyle.__root.stroke",
                        strokeWidth: "__var__compStyle.__root.strokeWidth",
                        strokeOpacity: "__var__strokeOpacity",
                        opacity:"__var__compStyle.__root.opacity"

                    }
                }

            }
        ]
    },
    lifecycleHooks: {
        init: {
            before: function() {

            },
            after: function() {}
        },
        onModelChange: function(newExternalVariables) {

        },
        reRender: {
            shouldAllow: function(newExternalVariables) {
                return true;
            },
            before: function(newExternalVariables) {

            },
            after: function(newExternalVariables) {

            }
        },
        cleanup: function() {

        }
    }

};
