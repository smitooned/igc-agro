/**
 * scatter component
 * Project: Phoenix UI creator
 * Author: Debashish
 */


"use strict";

module.exports = {
    name: "scatter",
    imports: [
        {
            type: "module",
            from: "d3",
            take: {
                what: "*",
                as: "d3"
            }
        },
        {
            type: "asset",
            from: "./assets/scatter.json",
            take: "scatter"
        }
    ],
    variables: [
        {
            name: "alias",
            type: "string",
            defaultValue: "Scatter",
            metadata: [{
                displayName: "Alias",
                widget: "INPUT",
                widgetData: {},
                grouping: "General",
                target: "alias"
            }],
            isMandatory: false,
            scope: "public"

        },
        {
            name: "compStyle",
            type: "object",
            defaultValue: {
                __root: {
                    backgroundColor: "rgba(255,255,255,1)",
                    borderWidth:"1px",
                    borderStyle: {
                        text: "Solid",
                        className: "fa fa-trash",
                        id: "solid"
                    },
                    borderColor: "rgba(0,0,0,0.12)",
                    borderRadius:0,
                    height: 400,
                    width: 750
                }
            },
            metadata: [{
                displayName: 'Scatter Chart',
                widget: 'CHART_PROPERTIES',
                widgetData: {},
                grouping: '',
                tab: 'Style',
                target: 'compStyle.__root'
            }, {
                displayName: "Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.width"
            }, {
                displayName: "Height",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.height"
            },{
                displayName: "Background color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.backgroundColor"
            },{
                displayName: "Border Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {
                    minValue: 0
                },
                grouping: "Style",
                target:"compStyle.__root.borderWidth"
            },{
                displayName: "Border Style",
                widget: "DROPDOWN",
                widgetData:{
                    values: [
                        {
                            text: "None",
                            className: "fa fa-trash",
                            id: "none"
                        },
                        {
                            text: "Solid",
                            className: "fa fa-trash",
                            id: "solid"
                        },
                        {
                            text: "Dotted",
                            className: "fa fa-trash",
                            id: "dotted"
                        },
                        {
                            text: "Dashed",
                            className: "fa fa-trash",
                            id: "dashed"
                        },
                        {
                            text: "Double",
                            className: "fa fa-trash",
                            id: "double"
                        }

                    ]
                },
                grouping: "Style",
                target: "compStyle.__root.borderStyle"
            },{
                displayName: "Border Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Style",
                target: "compStyle.__root.borderColor"
            },{
                displayName: "Border Radius",
                widget: "NUMERIC_STEPPER",
                widgetData: {
                    minValue: 0
                },
                grouping: "Style",
                target: "compStyle.__root.borderRadius"
            }],
            scope: "public"
        },
        {
            name: "colorTheme",
            type: "object",
            defaultValue: {
                scheme: "Default",
                colors: ["#3ec4cd","#3d9fcc","#3d7ccc","#3e41cc","#693ecc","#963dcd","#a1cc3e","#3ccc86"]},
            scope: "public"

        },
        {
            name: "compData",
            type: "object",
            defaultValue: {
                selectedDataset:"Default",
                parsedData: "__imports__scatter"
            },
            metadata: [{
                displayName: 'Scatter',
                widget: 'CHART_DATA_PROPERTIES',
                widgetData: {
                    axisTarget: ['compMetadata.xAxisVariable', 'compMetadata.yAxisVariable', 'compMetadata.zAxisVariable'],
                    xAxisLabel: 'axisLabel.xAxisLabel',
                    yAxisLabel: 'axisLabel.yAxisLabel',
                    axisColor: 'axisLabel.axisColor'
                },
                grouping: '',
                tab: 'Data',
                target: 'compData'
            },{
                displayName: "Data Source",
                widget: "DATASOURCE",
                widgetData: {},
                grouping: "Data",
                target: "compData"
            }],
            isMandatory: false,
            scope: "public"
        },
        {
            name: "compMetadata",
            type: "object",
            defaultValue: {
                xAxisVariable: ["Kawasaki"],
                yAxisVariable: ["Honda"],
                zAxisVariable: ["Bikes"]
            },
            metadata: [{
                displayName: "X-Axis Key",
                widget: "ARRAY_INPUT",
                widgetData: {
                    enableSuggestions: true,
                    placeHolder: "Add key",
                    minTagLength: 0
                },
                grouping: "Data",
                target: "compMetadata.xAxisVariable"
            }, {
                displayName: "Y-Axis Key",
                widget: "ARRAY_INPUT",
                widgetData: {
                    enableSuggestions: true,
                    placeHolder: "Add key",
                    minTagLength: 0
                },
                grouping: "Data",
                target: "compMetadata.yAxisVariable"
            }, {
                displayName: "Z-Axis Key",
                widget: "ARRAY_INPUT",
                widgetData: {
                    enableSuggestions: true,
                    placeHolder: "Add key",
                    minTagLength: 0
                },
                grouping: "Data",
                target: "compMetadata.zAxisVariable"
            }],
            isMandatory: false,
            scope: "public"
        },
        {
            name: "axisLabel",
            type: "object",
            defaultValue: {
                xAxisLabel: "Kawasaki",
                yAxisLabel: "Honda",
                axisColor: "rgba(0,0,0,1)"
            },
            metadata: [{
                displayName: "xAxis Label",
                widget: "INPUT",
                widgetData: {},
                grouping: "Data",
                target: "axisLabel.xAxisLabel"
            }, {
                displayName: "yAxis Label",
                widget: "INPUT",
                widgetData: {},
                grouping: "Data",
                target: "axisLabel.yAxisLabel"
            }, {
                displayName: "Axis Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Data",
                target: "axisLabel.axisColor"
            }],
            scope: "public"
        },
        {
            name: "title",
            type: "object",
            defaultValue: {
                text: "Scatter Plot",
                color: "rgba(0,0,0,0.7)",
                fontSize: "20px",
                fontFamily: "Roboto",
                transform: "none"
            },
            metadata: [{
                displayName: 'Text',
                widget: 'CHART_TEXT_PROPERTIES',
                widgetData: {
                    showHeader: 'showHeader'
                },
                grouping: '',
                tab: 'Text',
                target: 'title'
            },{
                displayName: "Text",
                widget: "INPUT",
                widgetData: {},
                grouping: "Title",
                target: "title.text"
            },{
                displayName: "Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Title",
                target: "title.color"
            },{
                displayName: "Font Size",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "Title",
                target: "title.fontSize"
            },{
                displayName: "Font Family",
                widget: "FONT_SELECTOR",
                widgetData: {},
                grouping: "Title",
                target: "title.fontFamily"
            },{
                displayName: "Case",
                widget: "TEXT_TRANSFORMER",
                widgetData: {},
                grouping: "Title",
                target: "title.transform"
            }],
            scope: "public"
        },
        {
            name: "advancedProps",
            type: "boolean",
            defaultValue: '',
            metadata: [{
                displayName: "Scatter",
                widget: "CHART_ADVANCED_PROPERTIES",
                widgetData: {
                    xAxisticksOrientation: 'xAxisticksOrientation',
                    yAxisticksOrientation: 'yAxisticksOrientation',
                    yAxisRange: 'yAxisRange',
                    showLegend: 'showLegend',
                    showGrid: 'showGrid',
                    gridColor: 'gridColor'
                },
                grouping: "",
                tab: 'Advanced',
                target: "advancedProps"
            }],
            scope: "public"
        },
        {
            name: "gridColor",
            type: "string",
            defaultValue: "rgba(200,200,200,0.8)",
            metadata: [{
                displayName: "Grid Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Advanced",
                target: "gridColor"
            }],
            scope: "public"
        },
        {
            name: "showGrid",
            type: "boolean",
            defaultValue: true,
            metadata: [{
                displayName: "Show Grid",
                widget: "SWITCHERY",
                widgetData:  {},
                grouping: "Advanced",
                target: "showGrid"
            }],
            scope: "public"
        },
        {
            name: "showLegend",
            type: "boolean",
            defaultValue: true,
            metadata: [{
                displayName: "Show Legend",
                widget: "SWITCHERY",
                widgetData:  {},
                grouping: "Advanced",
                target: "showLegend"
            }],
            scope: "public"
        },
        {
            name: "xAxisticksOrientation",
            type: "boolean",
            defaultValue: false,
            metadata: [{
                displayName: "Rotate X Axis Ticks",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "Advanced",
                target: "xAxisticksOrientation"
            }],
            scope: "public"

        },
        {
            name: "yAxisticksOrientation",
            type: "boolean",
            defaultValue: false,
            metadata: [{
                displayName: "Rotate Y Axis Ticks",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "Advanced",
                target: "yAxisticksOrientation"
            }],
            scope: "public"

        },
        {
            name: "yAxisRange",
            type: "boolean",
            defaultValue: false,
            metadata: [{
                displayName: "Y Axis Range(0 to max)",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "Advanced",
                target: "yAxisRange"
            }],
            scope: "public"
        },
        {
            name: "xAxisRange",
            type: "boolean",
            defaultValue: false,
            metadata: [{
                displayName: "X Axis Range(0 to max)",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "Advanced",
                target: "xAxisRange"
            }],
            scope: "public"
        },
        {
            name: "showHeader",
            type: "boolean",
            defaultValue: true,
            metadata: [{
                displayName: "Show Title",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "General",
                target: "showHeader"
            }],
            scope: "public"
        },
        {
            name: "margin",
            type: "object",
            defaultValue: {
                top: 20,
                right: 55,
                bottom: 30,
                left: 50
            },
            scope: "private"

        },
        {
            name: "compTheme",
            type: "object",
            defaultValue: null,
            metadata: [{
                displayName: "Color theme",
                widget: "COLOR_PALETTE",
                widgetData: {},
                grouping: "Style",
                target: "compTheme"
            }],
            scope: "public"
        },
        {
            name: "axisFormat",
            type: "object",
            defaultValue: {
                xAxisFormat: {
                    text: "Number",
                    className: "fa fa-trash",
                    id: "scaleLinear"
                },
                yAxisFormat: {
                    text: "Number",
                    className: "fa fa-trash",
                    id: "scaleLinear"
                }

            },
            metadata: [{
                displayName: "X Axis Format",
                widget: "DROPDOWN",
                widgetData: {
                    values: [
                        {
                            text: "Number",
                            className: "fa fa-trash",
                            id: "scaleLinear"
                        },
                        {
                            text: "String",
                            className: "fa fa-trash",
                            id: "scaleBand"
                        }
                    ]
                },
                grouping: "Data",
                target: "axisFormat.xAxisFormat"
            },
                {
                    displayName: "Y Axis Format",
                    widget: "DROPDOWN",
                    widgetData: {
                        values: [
                            {
                                text: "Number",
                                className: "fa fa-trash",
                                id: "scaleLinear"
                            },
                            {
                                text: "String",
                                className: "fa fa-trash",
                                id: "scaleBand"
                            }
                        ]
                    },
                    grouping: "Data",
                    target: "axisFormat.yAxisFormat"
                }],
            scope: "public"

        },
        {
            name: 'elementId',
            type: 'string',
            defaultValue: '',
            scope: 'private'
        }
    ],
    functions: {
        customRender: function() {

            d3.select(__elId__scatterComp).selectAll("*").remove();


            let svg = d3.select(__elId__scatterComp),
                width = __var__compStyle.__root.width - __var__margin.left - __var__margin.right - 25;

            if (__var__showHeader) {
                var height = __var__compStyle.__root.height - (__var__margin.top*3) - __var__margin.bottom - 25,
                    g = svg.append("g").attr("transform", "translate(" + (__var__margin.left + 20) + "," + ((__var__margin.top*3)-10) + ")");
            }
            else {
                height = __var__compStyle.__root.height - __var__margin.top - __var__margin.bottom - 25,
                    g = svg.append("g").attr("transform", "translate(" + (__var__margin.left + 20) + "," + (__var__margin.top / 2) + ")");
            }

            let axisFormat = {
                scaleLinear: d3.scaleLinear,
                scaleBand: d3.scaleBand,
                scaleTime: d3.scaleTime
            }
            try {
                let x = axisFormat[__var__axisFormat.xAxisFormat.id]()
                    .range([0, width]);

                let y = axisFormat[__var__axisFormat.yAxisFormat.id]()
                    .range([height, 0]);

                let color = d3.scaleOrdinal(__var__compTheme? __var__compTheme.colors: (__var__colorTheme.colors? __var__colorTheme.colors: ["#3ec4cd","#3d9fcc","#3d7ccc","#3e41cc","#693ecc","#963dcd","#a1cc3e","#3ccc86"]));

                let xAxis = d3.axisBottom()
                    .scale(x);

                let yAxis = d3.axisLeft()
                    .scale(y);


                let make_x_gridlines = function() {
                    return d3.axisBottom(x)
                        .ticks(Math.round(width/70));
                };

                // gridlines in y axis
                let make_y_gridlines = function() {
                    return d3.axisLeft(y)
                        .ticks(Math.round(height/70));
                };

                __var__compData.parsedData.forEach(function(d) {
                    // d.sepalLength = +d.sepalLength;
                    // d.sepalWidth = +d.sepalWidth;
                    d[__var__compMetadata.xAxisVariable] = +d[__var__compMetadata.xAxisVariable];
                    d[__var__compMetadata.yAxisVariable] = +d[__var__compMetadata.yAxisVariable];
                });

                if (__var__xAxisRange) {
                    x.domain([0,d3.max(__var__compData.parsedData, function(d) { return d[__var__compMetadata.xAxisVariable]; })]).nice();
                }
                else {
                    x.domain(d3.extent(__var__compData.parsedData, function(d) { return d[__var__compMetadata.xAxisVariable]; })).nice();
                }
                if (__var__yAxisRange) {
                    y.domain([0,d3.max(__var__compData.parsedData, function(d) { return d[__var__compMetadata.yAxisVariable]; })]).nice();
                }
                else {
                    y.domain(d3.extent(__var__compData.parsedData, function(d) { return d[__var__compMetadata.yAxisVariable]; })).nice();
                }

                g.append("g")
                    .attr("class","x-axis")
                    .attr("id", __var__elementId)
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("transform", "translate("+(width/2) +" ," + (__var__margin.bottom * 2) + ")")
                    .style("text-anchor", "middle")
                    .style("font-size", "14px")
                    .text(__var__axisLabel.xAxisLabel);

                g.append("g")
                    .attr("class","y-axis")
                    .attr("id", __var__elementId)
                    .call(yAxis)
                    .append("text")
                    .attr("transform", "translate("+ (-__var__margin.right) +" ,"+ (height/2)+") rotate(-90)")
                    .style("text-anchor", "middle")
                    .style("font-size", "14px")
                    .text(__var__axisLabel.yAxisLabel);

                d3.selectAll("#"+__var__elementId+".y-axis line").attr("stroke", __var__axisLabel.axisColor);
                d3.selectAll("#"+__var__elementId+".y-axis path").attr("stroke", __var__axisLabel.axisColor);
                d3.selectAll("#"+__var__elementId+".y-axis text").attr("fill", __var__axisLabel.axisColor);
                if (__var__yAxisticksOrientation) {
                    d3.selectAll("#"+__var__elementId+".y-axis .tick text").style("text-anchor", "end").attr("dy", "-.8em").attr("dx", ".15em").attr("transform", "rotate(-50)" ).style("font-size", "10px");
                }

                d3.selectAll("#"+__var__elementId+".x-axis line").attr("stroke", __var__axisLabel.axisColor);
                d3.selectAll("#"+__var__elementId+".x-axis path").attr("stroke", __var__axisLabel.axisColor);
                d3.selectAll("#"+__var__elementId+".x-axis text").attr("fill", __var__axisLabel.axisColor);
                if (__var__xAxisticksOrientation) {
                    d3.selectAll("#"+__var__elementId+".x-axis .tick text").style("text-anchor", "end").attr("dx", "-.6em").attr("dy", ".15em").attr("transform", "rotate(-25)" ).style("font-size", "10px");
                }

                if (__var__showGrid) {
                    g.append("g")
                        .attr("class", "grid")
                        .attr("transform", "translate(0," + height + ")")
                        .call(make_x_gridlines()
                            .tickSize(-height)
                            .tickFormat("")
                        );

                    g.append("g")
                        .attr("class", "grid")
                        .call(make_y_gridlines()
                            .tickSize(-width)
                            .tickFormat("")
                        );

                    d3.selectAll(".grid").selectAll("line")
                        .style("stroke", __var__gridColor);
                }

                if (__var__showHeader){
                    let h = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + __var__margin.top + ")");

                    h.append("line")
                        .attr("x1", 0 - (__var__margin.left))
                        .attr("y1", __var__margin.top)
                        .attr("x2", width + __var__margin.left + 30)
                        .attr("y2", __var__margin.top)
                        .style("stroke", "rgba(0,0,0,0.12)");

                    h.append('text')
                        .text(__var__title.text)
                        .attr("fill", __var__title.color)
                        .attr('x', 0)
                        .attr('y', __var__margin.top - 10)
                        .attr('text-anchor', "start")
                        .style('font-family', __var__title.fontFamily)
                        .style("font-size", __var__title.fontSize)
                        .style("text-decoration", "none")
                        .style("text-transform", __var__title.transform);

                }

                g.selectAll(".dot")
                    .data(__var__compData.parsedData)
                    .enter().append("circle")
                    .attr("class", "dot")
                    .attr("r", 3.5)
                    .attr("cx", function(d) { return x(d[__var__compMetadata.xAxisVariable]); })
                    .attr("cy", function(d) { return y(d[__var__compMetadata.yAxisVariable]); })
                    .style("fill", function(d) { return color(d[__var__compMetadata.zAxisVariable]); });

                if (__var__showLegend) {
                    let legend = g.selectAll(".legend")
                        .data(color.domain())
                        .enter().append("g")
                        .attr("class", "legend")
                        .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

                    legend.append("circle")
                        .attr("cx", width + 40)
                        .attr("cy",  0)
                        .attr("r", 9)
                        .style("fill", color);

                    legend.append("text")
                        .attr("x", width + 20)
                        .attr("y", 0)
                        .attr("dy", ".35em")
                        .attr("fill", __var__axisLabel.axisColor)
                        .style("text-anchor", "end")
                        .text(function(d) { return d; });
                }


            }
            catch(err){
                let h = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + __var__margin.top + ")");


                h.append('text')
                    .text("Oops!")
                    .attr("fill", __var__axisLabel.axisColor)
                    .attr('x', width /2 )
                    .attr('y', height /3)
                    .attr('text-anchor', "middle")
                    .style('font-family', "Roboto")
                    .style("font-size", "20px")
                    .style("text-decoration", "none")
                    .style("text-transform", "none");


                h.append('text')
                    .text("Select a proper data format!")
                    .attr("fill", __var__axisLabel.axisColor)
                    .attr('x', width /2 )
                    .attr('y', height /2)
                    .attr('text-anchor', "middle")
                    .style('font-family', "Roboto")
                    .style("font-size", "14px")
                    .style("text-decoration", "none")
                    .style("text-transform", "none");
            }


            // });
        }
    },
    eventHandlers: [],
    eventEmitters: [],
    actions: [],
    workflows: {},
    localTemplates: {},
    structure: {
        type: "div",
        id: "scatterParent",
        props: {
            style: {
                backgroundColor: "__var__compStyle.__root.backgroundColor",
                width: "__var__compStyle.__root.width",
                height: "__var__compStyle.__root.height"
            }
        },
        children: [
            {
                type: "svg",
                id: "scatterComp",
                props: {
                    viewBox: "'0 0 '+__var__compStyle.__root.width+ ' '+__var__compStyle.__root.height",
                    width: "__var__compStyle.__root.width",
                    height: "__var__compStyle.__root.height",
                    style: {
                        borderWidth: "__var__compStyle.__root.borderWidth",
                        borderStyle: "__var__compStyle.__root.borderStyle.id",
                        borderColor: "__var__compStyle.__root.borderColor",
                        borderRadius:"__var__compStyle.__root.borderRadius"
                    }

                }

            }

        ]
    },
    lifecycleHooks: {
        init: {
            before: function() {
                __utils__setPrivateVars({ elementId: __prop__id}, false, {concat: false, erase: true});
            },
            after: function() {
                __fn__customRender();
            }
        },
        onModelChange: function(newExternalVariables) {

        },
        reRender: {
            shouldAllow: function(newExternalVariables) {
                return true;
            },
            before: function(newExternalVariables) {

            },
            after: function(newExternalVariables) {
                __fn__customRender();
            }
        },
        cleanup: function() {

        }
    }
};