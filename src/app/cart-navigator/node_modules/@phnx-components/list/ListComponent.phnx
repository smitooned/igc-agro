/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "ListComponent",
    variables: [{
        name: "listContainer",
        type: "element",
        isMandatory: true,
        scope: "public"
    }, {
        name: "templates",
        type: "object",
        isMandatory: true,
        defaultValue: {},
        scope: "public"
    }, {
        name: "data",
        type: "array",
        isMandatory: true,
        defaultValue: [],
        scope: "public"
    }, {
        name: "containerProps",
        type: "object",
        isMandatory: true,
        defaultValue: {},
        scope: "public"
    }, {
        name: "containerDefaults",
        type: "object",
        isMandatory: true,
        scope: "public"
    }, {
        name: "containerEvents",
        type: "array",
        isMandatory: false,
        defaultValue: [],
        scope: "public"
    }, {
        name: "handlers",
        type: "object",
        defaultValue: {},
        scope: "private"
    }, {
        name: "chooseTemplate",
        type: "function",
        isMandatory: false,
        scope: "public"
    }, {
        name: "selectedElements",
        type: "array",
        defaultValue: [],
        scope: "private"
    }, {
        name: "selectedItems",
        type: "array",
        defaultValue: [],
        scope: "private"
    }, {
        name: "listPreferences",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            idAttribute: "id",
            maxLength: -1,
            sortBy: "",
            sortType: "ASCENDING",
            filterBy: {},
            startWith: 0
        },
        scope: "public"
    }, {
        name: "pref",
        properties: { erase: false },
        defaultValue: {
            idAttribute: "id",
            maxLength: -1,
            sortBy: "",
            sortType: "ASCENDING",
            filterBy: {},
            startWith: 0
        },
        scope: "private"
    }, {
        name: "tmpl",
        defaultValue: {},
        scope: "private"
    }],
    functions: {
        selectElement: (data, id) => (eventObj, payload, properties) => {
            if (!__var__selectedElements.includes(__fn__getChildById(id)))
                __utils__setPrivateVars({
                    selectedElements: [__fn__getChildById(id)],
                    selectedItems: [data]
                }, false, {
                    concat: true
                });
            payload = Object.assign(payload, {
                data,
                id: id,
                element: __fn__getChildById(id)
            });
            __wf__elementSelected(eventObj, payload, properties);
        },
        deSelectElement: (data, id) => (eventObj, payload, properties) => {
            __utils__setPrivateVars({
                selectedElements: __var__selectedElements.filter(item => item != __fn__getChildById(id)),
                selectedItems: __var__selectedItems.filter(item => item.id != data.id)
            }, false, {
                concat: false
            });
            payload = Object.assign(payload, {
                data,
                id: id,
                element: __fn__getChildById(id)
            });
            __wf__elementDeSelected(eventObj, payload, properties);
        },
        isElementSelected: id => {
            return __var__selectedElements.includes(__fn__getChildById(id));
        },
        selectAllElements: (eventObj, payload, properties) => {
            __var__data.forEach(nodeData => {
                __fn__selectElement(nodeData, nodeData.id)(eventObj, payload, properties);
            });
        },
        unSelectAllElements: (eventObj, payload, properties) => {
            const selected = __fn__getSelectedItems();
            selected.forEach(nodeData => {
                __fn__deSelectElement(nodeData, nodeData.id)(eventObj, payload, properties);
            });
        },
        getChildById: id => {
            return __elId__['child_' + id];
        },
        getSelectedElements: () => {
            return __var__selectedElements;
        },
        getSelectedItems: () => {
            return __var__selectedItems;
        },
        getContainer: () => {
            return __elId__listContainer;
        },
        bindEvents: (data, id, template) => {
            const events = {
                removeElement: __fn__removeElement(data, id),
                selectElement: __fn__selectElement(data, id),
                deSelectElement: __fn__deSelectElement(data, id)
            };
            if (Array.isArray(template.events)) template.events.forEach(item => {
                if (__var__handlers.hasOwnProperty(item)) {
                    events[item] = (eventObj, payload, properties) => {
                        payload = Object.assign(payload, {
                            data,
                            id,
                            element: __fn__getChildById(id)
                        });
                        __var__handlers[item](eventObj, payload, properties);
                    };
                }
            });
            __utils__addDynamicEvents('child_' + id, events);
        },
        makeContainerProps: props => {
            const containerEvents = {
                addElement: __fn__addElement,
                deSelectAll: __fn__unSelectAllElements,
                selectAll: __fn__selectAllElements
            };
            if (Array.isArray(__var__containerEvents))
                __var__containerEvents.forEach(item => {
                    if (__var__handlers.hasOwnProperty(item))
                        containerEvents[item] = __var__handlers[item];
                });
            __utils__addDynamicEvents('listContainer', containerEvents);
            return props;
        },
        renderChildren: () => {
            return __fn__maxLength(__fn__sort(__fn__filter(__var__data))).map((data, ind) => {
                const id = ((typeof data == 'object') && data[__var__pref.idAttribute]) || (ind);
                if (!data.id) {
                    data.id = id;
                }
                const template = __fn__decideTemplate(data, id);
                const childProps = Object.assign({}, template.childrenProps);
                if (typeof template.dataMapping == 'object')
                    Object.keys(template.dataMapping).forEach(key => {
                        if (typeof template.dataMapping[key] === 'function')
                            childProps[key] = template.dataMapping[key](data);
                        else childProps[key] = data[template.dataMapping[key]];
                    });
                const defaults = template.defaults;
                if (typeof template.defaultMapping == 'object')
                    Object.keys(template.defaultMapping).forEach(key => {
                        if (typeof template.defaultMapping[key] === 'function')
                            defaults[key] = template.defaultMapping[key](data);
                        else defaults[key] = data[template.defaultMapping[key]];
                    });
                const props = Object.assign({}, childProps, {
                    key: 'child_' + id,
                    data: data,
                    selectElement: __fn__selectElement(data, id),
                    deSelectElement: __fn__deSelectElement(data, id),
                    removeElement: __fn__removeElement(data, id)
                });
                __fn__bindEvents(data, id, template);
                if (typeof template.template == 'function')
                    return __tmpl__childComp;
                else if (typeof template.template == 'string')
                    return __tmpl__nonCompChild;
            });
        },
        decideTemplate: (data, ind) => {
            if (typeof __var__tmpl === 'object' && typeof __var__chooseTemplate == 'function')
                return __var__tmpl[__var__chooseTemplate(data, ind) || 'default'];
            else return __var__tmpl.default || {
                template: 'li'
            };
        },
        addElement: item => {
            __utils__setPublicVars({
                data: [item]
            });
            if (__var__pref.maxLength > 0 && __var__data.length > __var__pref.maxLength)
                __fn__windowMoveRight();
            const id = typeof item == 'object' && item[__var__pref.idAttribute || 'id'],
                payload = {
                    item,
                    id: id
                };
            __wf__elementAdded(null, payload, {});
        },
        removeElement: (data, id) => (eventObj, payload, properties) => {
            eventObj.stopPropagation();
            __utils__setPublicVars({
                data: __var__data.filter(item => item.id != id)
            }, {
                concat: false
            });
            __utils__setPrivateVars({
                selectedElements: __var__selectedElements.filter(item => item != __fn__getChildById(id)),
                selectedItems: __var__selectedItems.filter(item => item.id != id)
            }, false, {
                concat: false
            });
            __wf__elementRemoved(eventObj, payload, properties);
        },
        updateElement: item => {
            __var__data.find((i, n) => i == item || i[__var__pref.idAttribute] == item || n == item);
        },
        filterElementsBy: filterBy => {
            __utils__setPrivateVars({
                pref: {
                    filterBy: filterBy
                }
            });
        },
        addFilter: filter => {
            __utils__setPrivateVars({
                pref: {
                    filterBy: Object.assign(__var__pref.filterBy, filter)
                }
            });
        },
        sortElementsBy: (sortBy, sortType) => {
            __utils__setPrivateVars({
                pref: {
                    sortBy: sortBy,
                    sortType: sortType || 'ASCENDING'
                }
            });
        },
        setMaxLength: maxLength => {
            __utils__setPrivateVars({
                pref: {
                    maxLength: +maxLength
                }
            });
        },
        setStartWith: startWith => {
            __utils__setPrivateVars({
                pref: {
                    startWith: +startWith
                }
            });
        },
        windowMoveRight: n => {
            const startWith = __var__pref.startWith + (n || 1);
            __utils__setPrivateVars({
                pref: {
                    startWith: startWith > __var__pref.maxLength ? __var__pref.maxLength : startWith
                }
            });
        },
        windowMoveLeft: n => {
            const startWith = __var__pref.startWith - (n || 1);
            __utils__setPrivateVars({
                pref: {
                    startWith: startWith > 0 ? startWith : 0
                }
            });
        },
        sort: data => {
            const sortBy = __var__pref.sortBy;
            const sortType = __var__pref.sortType;
            if (typeof sortBy == 'function')
                return data.sort(sortBy);
            else if (typeof sortBy == 'string') {
                if (sortBy == '')
                    return data;
                else {
                    data.sort((a, b) => {
                        if (typeof a[sortBy] == 'string')
                            return a[sortBy].localeCompare(b[sortBy]);
                        return a[sortBy] - b[sortBy];
                    });
                    if (sortType == 'ASCENDING')
                        return data;
                    else return data.reverse();
                }
            } else return data;
        },
        filter: data => {
            const filterBy = __var__pref.filterBy;
            if (typeof filterBy == 'function')
                return data.filter(filterBy);
            else if (typeof filterBy == 'object')
                return data.filter((elem) => {
                    let check = true;
                    Object.keys(__var__pref.filterBy).forEach((key) => {
                        if (typeof __var__pref.filterBy[key] == 'function') {
                            check = check && (__var__pref.filterBy[key](elem[key]));
                        } else if (typeof __var__pref.filterBy[key] == 'string' && elem[key].toLowerCase().includes(__var__pref.filterBy[key].toLowerCase())) {
                            check = check && true;
                        } else check = false;
                    });
                    return check;
                });
            else
                return data;
        },
        maxLength: data => {
            if (__var__pref.maxLength > 0) {
                if (data.length >= __var__pref.maxLength + __var__pref.startWith)
                    return data.slice(__var__pref.startWith, __var__pref.maxLength + __var__pref.startWith);
                else if (data.length >= __var__pref.maxLength)
                    return data.slice(0, __var__pref.maxLength);
            }
            return data;
        },
        updateTemplate: (name, template) => {
            __utils__setPrivateVars({
                tmpl: {
                    [name]: template
                }
            });
        },
        createContainer: () => {
            if ((typeof __var__listContainer == 'string') || (typeof __var__listContainer == 'undefined')) {
                return __tmpl__nonCompContainer;
            } else
                return __tmpl__compContainer;
        }
    },
    workflows: {
        elementAdded: (eventObj, payload, properties) => {
            __evt__elementAdded(eventObj, payload, properties);
        },
        elementRemoved: (eventObj, payload, properties) => {
            __evt__elementRemoved(eventObj, payload, properties);
        },
        elementDeSelected: (eventObj, payload, properties) => {
            __evt__elementDeSelected(eventObj, payload, properties);
        },
        elementSelected: (eventObj, payload, properties) => {
            __evt__elementSelected(eventObj, payload, properties);
        }
    },
    eventEmitters: [{
        id: "elementSelected",
        from: null,
        emit: {
            elementSelected: null
        }
    }, {
        id: "elementDeSelected",
        from: null,
        emit: {
            elementDeSelected: null
        }
    }, {
        id: "elementAdded",
        from: null,
        emit: {
            elementAdded: null
        }
    }, {
        id: "elementRemoved",
        from: null,
        emit: {
            elementRemoved: null
        }
    }],
    localTemplates: {
        childComp: {
            type: "__fnParam__template.template",
            id: "'child_'+__fnParam__id",
            isComp: true,
            props: "__fnParam__props",
            defaults: "__fnParam__defaults"
        },
        nonCompChild: {
            type: "__fnParam__template.template",
            id: "'child_'+__fnParam__id",
            props: "__fnParam__props",
            defaults: "__fnParam__defaults"
        },
        compContainer: {
            id: "listContainer",
            type: "__var__listContainer",
            isComp: true,
            props: "__fn__makeContainerProps(__var__containerProps||{})",
            defaults: "__var__containerDefaults||{}",
            children: "__fn__renderChildren()"
        },
        nonCompContainer: {
            id: "listContainer",
            type: "__var__listContainer||'ul'",
            isComp: false,
            props: "__fn__makeContainerProps(__var__containerProps||{})",
            defaults: "__var__containerDefaults||{}",
            children: "__fn__renderChildren()"
        }
    },
    structure: "__fn__createContainer()",
    lifecycleHooks: {
        init: {
            before: () => {
                Object.keys(__prop__).forEach(item => {
                    if (typeof __prop__[item] == 'function')
                        __var__handlers[item] = __prop__[item];
                });
                __utils__setPrivateVars({
                    pref: Object.assign(__var__pref, __var__listPreferences),
                    tmpl: __var__templates
                });
            }
        }
    }
};