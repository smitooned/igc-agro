/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "text",
    imports: [],
    defVarMap: {
        class: "textClass",
        style: "compStyle"
    },
    variables: [{
        name: "alias",
        type: "string",
        defaultValue: "text",
        metadata: [{
            displayName: "Alias",
            widget: "INPUT",
            widgetData: {},
            grouping: "General",
            target: "alias"
        }],
        isMandatory: false,
        scope: "public"

    }, {
        name: "textContent",
        type: "string",
        defaultValue: "Text",
        scope: "public",
        metadata: {
            displayName: "Text Content",
            widget: "INPUT",
            widgetData: {
                minValue: -9999999999999999999999999999999999999999999999999999999999999
            },
            grouping: "General",
            target: "textContent"
        }
    }, {
        name: "compStyle",
        type: "object",
        properties: { erase: false },
        defaultValue: {
            __root: {
                "fontSize": "14px",
                "color": "rgba(0,0,0,1)",
                "fontFamily": "Roboto",
                "whiteSpace": {
                    text: 'Normal',
                    className: 'fa fa-trash',
                    id: 'normal'
                },
                textStyle: {
                    "fontWeight": "normal",
                    fontStyle: "inherit",
                    textDecoration: "inherit"
                },
                "display": "unset",
                "width": 60,
                "height": 25,
                "lineHeight": 1,
                "textTransform": "none",
                "backgroundColor": "rgba(255,255,255,0)",
                "wordWrap": "break-word",
                "textAlign": "center"
            }
        },
        metadata: [{
            displayName: 'Text',
            widget: 'TEXT_PROPERTIES',
            widgetData: {
                contentTarget: 'textContent',
                hyperlinkTarget: 'hyperlink'
            },
            grouping: '',
            tab: 'Style',
            target: 'compStyle.__root'
        }, {
            displayName: "Font Size",
            widget: "NUMERIC_STEPPER",
            widgetData: {
                minValue: 6
            },
            grouping: "General",
            target: "compStyle.__root.fontSize"
        }, {
            displayName: "Text Color",
            widget: "COLOR_PICKER",
            widgetData: {},
            grouping: "General",
            target: "compStyle.__root.color"
        }, {
            displayName: "Width",
            widget: "NUMERIC_STEPPER",
            widgetData: {},
            grouping: "General",
            target: "compStyle.__root.width"
        }, {
            displayName: "Height",
            widget: "NUMERIC_STEPPER",
            widgetData: {},
            grouping: "General",
            target: "compStyle.__root.height"
        }, {
            displayName: 'Text Wrap',
            widget: 'DROPDOWN',
            widgetData: {
                values: [{
                    text: 'Wrap',
                    className: 'fa fa-trash',
                    id: 'normal'
                }, {
                    text: 'No-Wrap',
                    className: 'fa fa-trash',
                    id: 'nowrap'
                }]
            },
            grouping: 'Style',
            target: "compStyle.__root.whiteSpace"
        }, {
            displayName: "Font",
            widget: "FONT_SELECTOR",
            widgetData: {},
            grouping: "General",
            target: "compStyle.__root.fontFamily"
        }, {
            displayName: "Case Type",
            widget: "TEXT_TRANSFORMER",
            widgetData: {},
            grouping: "Style",
            target: "compStyle.__root.textTransform"
        }, {
            displayName: "Text Style",
            widget: "TEXT_FORMATTER",
            widgetData: {},
            grouping: "Style",
            target: "compStyle.__root.textStyle"
        }, {
            displayName: "Highlight",
            widget: "COLOR_PICKER",
            widgetData: {},
            grouping: "Style",
            target: "compStyle.__root.backgroundColor"
        }, {
            displayName: "Align",
            widget: "TEXT_ALIGNER",
            widgetData: {},
            grouping: "Style",
            target: "compStyle.__root.textAlign"
        }, {
            displayName: "Line Height",
            widget: "NUMERIC_STEPPER",
            widgetData: {},
            grouping: "Style",
            target: "compStyle.__root.lineHeight"
        }],
        scope: "public"
    }, {
        name: "textClass",
        type: "string",
        defaultValue: "",
        scope: "public"
    }, {
        name: "textTitle",
        type: "string",
        defaultValue: "",
        scope: "public"
    }, {
        name: "textTooltip",
        type: "boolean",
        defaultValue: false,
        scope: "public"
    }, {
        name: "textBackgroundColor",
        type: "string",
        defaultValue: "rgba(255,255,255,0)",
        scope: "public",
        metadata: [{
            displayName: "Background Color",
            widget: "COLOR_PICKER",
            widgetData: {},
            grouping: "Style",
            target: "textBackgroundColor"
        }]
    }, {
        name: "navigateFn",
        type: "function",
        defaultValue: () => {},
        scope: "public"
    }, {
        name: "hyperlink",
        type: "object",
        defaultValue: null,
        metadata: [{
            displayName: "Hyperlink",
            widget: "HYPERLINK",
            widgetData: {},
            grouping: "Hyperlink",
            target: "hyperlink"
        }],
        scope: "public"
    }],
    functions: {
        addTextAtBeginning: textaddstring => {
            __utils__setPublicVars({
                textContent: textaddstring.concat(__var__textContent)
            });
        },
        addTextAtEnd: textendstring => {
            __utils__setPublicVars({
                textContent: __var__textContent.concat(textendstring)
            });
        },
        checkTextStartsWith: data => {
            return __var__textContent.startsWith(data);
        },
        checkTextEndsWith: data => {
            return __var__textContent.endsWith(data);
        },
        extractContentFromText: (start, end) => {
            return __var__textContent.slice(start, end);
        },
        getCharacterAtPosition: position => {
            return __var__textContent.charAt(position);
        },
        toggleCase: () => {
            let newStr = "";
            const str = __var__textContent;
            for (let i = 0; i < str.length; i++) {
                if (str[i].toUpperCase() == str[i]) newStr += str[i].toLowerCase();
                else newStr += str[i].toUpperCase();
            }
            __utils__setPublicVars({
                textContent: newStr
            });
        },
        setTextToUppercase: () => {
            __utils__setPublicVars({
                textContent: __var__textContent.toUpperCase()
            });
        },
        setTextToLowercase: () => {
            __utils__setPublicVars({
                textContent: __var__textContent.toLowerCase()
            });
        },
        getSubStringBetweenPositions: (startPos, endPos) => {
            return __var__textContent.substring(startPos, endPos);
        },
        getSubStringOfGivenLength: (startPos, length) => {
            return __var__textContent.substr(startPos, length);
        },
        convertTextToArray: delimiter => {
            return __var__textContent.split(delimiter);
        },
        getContent: () => {
            return __var__textContent;
        },
        setContent: (el, data) => {
            const str = __var__textContent;
            __utils__setPublicVars({
                textContent: data,
                // compStyle: __var__compStyle.deepMerge({
                //     __root: {
                //         width: 0,
                //         height: 0
                //     }
                // })

            });

        },
        clearTextContent: () => {
            __utils__setPublicVars({
                textContent: ''
            });
        },
        findFirst: data => {
            return __var__textContent.indexOf(data);
        },
        findAfterWord: (data, string) => {
            return __var__textContent.indexOf(data, __var__textContent.indexOf(string) + 1);
        },
        findLast: data => {
            return __var__textContent.lastIndexOf(data);
        },
        containsWord: data => {
            return __var__textContent.includes(data);
        },
        replaceFirst: (data, string) => {
            __utils__setPublicVars({
                textContent: __var__textContent.replace(data, string)
            });
        },
        replaceFirstN: (data, string, n) => {
            for (let i = 1; i <= n; i++) {
                __utils__setPublicVars({
                    textContent: __var__textContent.replace(data, string)
                });
            }
        },
        replaceAll: (data, string) => {
            __utils__setPublicVars({
                textContent: __var__textContent.replace(new RegExp(data, 'g'), string)
            });
        },
        removeSpacesInText: () => {
            __utils__setPublicVars({
                textContent: __var__textContent.trim()
            });
        },
        joinStringtoText: data => {
            __utils__setPublicVars({
                textContent: __var__textContent.concat(data)
            });
        },
        duplicateTextContent: data => {
            __utils__setPublicVars({
                textContent: __var__textContent.repeat(data)
            });
        },
        getTextLength: () => {
            return __var__textContent.length;
        },
        getTooltip: () => {
            if (__var__textTooltip) {
                return 'tooltip';
            } else {
                return null;
            }
        },
        dispTitle: () => {
            if (__var__textTooltip) {
                return __var__textTitle;
            } else {
                return null;
            }
        },
        getTooltipStatus: () => {
            return __var__textTooltip;
        },
        enableTooltip: () => {
            __utils__setPublicVars({
                textTooltip: true
            });
        },
        disableTooltip: () => {
            __utils__setPublicVars({
                textTooltip: false
            });
        },
        toggleTooltip: () => {
            __utils__setPublicVars({
                textTooltip: !__var__textTooltip
            });
        },
        getTitle: () => {
            return __var__textTitle;
        },
        setTitle: title => {
            __utils__setPublicVars({
                textTitle: title
            });
        },
        getSelectedText: () => {
            let text;
            if (window.getSelection) {
                text = window.getSelection().toString();
            } else {
                text = '';
            }
            return text;
        },
        getSelectedTextLength: () => {
            let text;
            if (window.getSelection) {
                text = window.getSelection().toString();
            } else {
                text = '';
            }
            return text.length;
        },
        clearSelectedText: () => {
            if (window.getSelection) {
                if (window.getSelection().anchorOffset < window.getSelection().focusOffset) {
                    __utils__setPublicVars({
                        textContent: __var__textContent.substr(0, window.getSelection().anchorOffset) + __var__textContent.substr(window.getSelection().focusOffset, __var__textContent.length)
                    });
                } else {
                    __utils__setPublicVars({
                        textContent: __var__textContent.substr(0, window.getSelection().focusOffset) + __var__textContent.substr(window.getSelection().anchorOffset, __var__textContent.length)
                    });
                }
            }
        },
        replaceSelectedText: replacementText => {
            let sel, range;
            if (window.getSelection) {
                if (window.getSelection().anchorOffset < window.getSelection().focusOffset) {
                    __utils__setPublicVars({
                        textContent: __var__textContent.substr(0, window.getSelection().anchorOffset) + replacementText + __var__textContent.substr(window.getSelection().focusOffset, __var__textContent.length)
                    });
                } else {
                    __utils__setPublicVars({
                        textContent: __var__textContent.substr(0, window.getSelection().focusOffset) + replacementText + __var__textContent.substr(window.getSelection().anchorOffset, __var__textContent.length)
                    });
                }
            }
        },
        addSelectedTextAtPosition: position => {
            let text = '';
            if (window.getSelection) {
                text = window.getSelection().toString();
            }
            __utils__setPublicVars({
                textContent: __var__textContent.slice(0, position).concat(text).concat(__var__textContent.slice(position + 1, __var__textContent.length - 1))
            });
        },
        getModifiedProps: () => {
            let style = __var__compStyle.__root.textStyle || {};
            let updatedStyle =  Object.assign({}, __var__compStyle.__root, { fontStyle: style.fontStyle, textDecoration: style.textDecoration, fontWeight: style.fontWeight }, {
                "whiteSpace": __var__compStyle.__root.whiteSpace.id,
                "height": 'auto',
                "margin": 'auto'
            });
            return updatedStyle
        },
        redirect: (e) => {
            __var__navigateFn(__var__hyperlink);
            e.preventDefault();
        }
    },
    eventEmitters: [],
    localTemplates: {},
    structure: {
        type: "a",
        props: {
            href: "__var__hyperlink ? __var__hyperlink.name + '.html' : '#'",
            style: {
                textAlign: "__var__compStyle.__root.textAlign",
                lineHeight: "__var__compStyle.__root.lineHeight",
                overflow: "hidden",
                width: "__var__compStyle.__root.weight",
                height: "__var__compStyle.__root.height",
                display: 'flex',
                backgroundColor: "__var__textBackgroundColor"
            },
            onClick: "__fn__redirect"
        },
        children: {
            id: "text",
            type: "text",
            props: {
                className: "__var__textClass",
                style: "__fn__getModifiedProps()",
                "data-toggle": "__fn__getTooltip()",
                title: "__fn__dispTitle()"
            },
            children: ["__var__textContent"]
        },
    }
};