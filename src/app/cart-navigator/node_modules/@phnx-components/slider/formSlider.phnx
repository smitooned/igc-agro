/**
 * Slider Form Component
 * Modifed
 * Project: Phoenix UI creator
 * Author: Debashish
 */


"use strict";

module.exports = {
    name: "slider",
    imports: [
        {
            type: "module",
            from: "d3",
            take: {
                what: "*",
                as: "d3"
            }
        }
    ],
    variables: [{
        name: "alias",
        type: "string",
        defaultValue: "Slider",
        metadata: [{
            displayName: "Alias",
            widget: "INPUT",
            widgetData: {},
            grouping: "General",
            target: "alias"
        }],
        isMandatory: false,
        scope: "public"

    },
        {
            name: "compStyle",
            type: "object",
            defaultValue: {
                __root: {
                    "width": 300,
                    "height": 30,
                    "stroke": "rgba(0,0,0,0.3)",
                    "strokeWidth": 10,
                    "handleColor": "rgba(24,149, 168, 1)",
                    "fill": "rgba(255,0,0,0.3)",
                    "cornerRadius": 10,
                    "selectedValue": 26
                }
            },
            metadata: [{
                displayName: 'Slider',
                widget: 'SLIDER_PROPERTIES',
                widgetData: {},
                grouping: '',
                tab: 'Style',
                target: 'compStyle.__root'
            },{
                displayName: "Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.width"
            },

                {
                    displayName: "Height",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {},
                    grouping: "General",
                    target: "compStyle.__root.height"
                },
                {
                    displayName: "Thickness",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {},
                    grouping: "Bar",
                    target: "compStyle.__root.strokeWidth"
                },
                {
                    displayName: "Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "Bar",
                    target: "compStyle.__root.stroke"
                },
                {
                    displayName: "Fill Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "Bar",
                    target: "compStyle.__root.fill"
                },
                {
                    displayName: "Handle Color",
                    widget: "COLOR_PICKER",
                    widgetData: {},
                    grouping: "Slider",
                    target: "compStyle.__root.handleColor"
                },
                {
                    displayName: "Corner Radius",
                    widget: "NUMERIC_STEPPER",
                    widgetData: {
                        minValue: 0
                    },
                    grouping: "Slider",
                    target: "compStyle.__root.cornerRadius"
                },
                {
                    displayName: "Value",
                    widget: "SLIDER",
                    widgetData: {
                        maxValue: 100,
                        minValue: 0,
                        stepCount: 1
                    },
                    grouping: "Slider",
                    target: "compStyle.__root.selectedValue"
                }
            ],
            scope: "public"
        }
    ],
    functions: {
        customRender: function() {
            d3.select(__elId__sliderComp).selectAll("*").remove();

            let svg = d3.select(__elId__sliderComp),
                margin = {right: 0, left: 0},
                width = __var__compStyle.__root.width - margin.left - margin.right,
                height = __var__compStyle.__root.height;


            let x = d3.scaleLinear()
                .domain([0, 100])
                .range([0, width])
                .clamp(true);

            let slider = svg.append("g")
                .attr("class", "slider")
                .style("pointer-events", "none")
                .attr("transform", "translate(" + margin.left + "," + height / 2 + ")");

            slider.append("line")
                .attr("x1", x.range()[0])
                .attr("x2", x.range()[1])
                .style("stroke", __var__compStyle.__root.stroke)
                // .style("stroke-opacity", __var__strokeOpacity)
                .style("stroke-width", __var__compStyle.__root.strokeWidth)
                .call(d3.drag()
                    .on("start.interrupt", function() { slider.interrupt(); })
                    .on("start drag", function() { hue(x.invert(d3.event.x)); }));

            slider.append("line")
                .attr("x1", x(0))
                .attr("x2", x(__var__compStyle.__root.selectedValue))
                .style("stroke", __var__compStyle.__root.fill)
                .style("stroke-width", __var__compStyle.__root.strokeWidth);


            // slider.append('text')
            //     .attr("x", x(__var__domain.selectedValue))
            //     .attr("y", -__var__compStyle.__root.handleRadius - 5)
            //     .attr("fill", __var__compStyle.__root.labelColor)
            //     .style("font-size", __var__compStyle.__root.fontSize)
            //     .attr("text-anchor", "middle")
            //     .text(__var__domain.selectedValue)

            // if(__var__showTicks) {
            //     slider.insert("g", ".track-overlay")
            //         .attr("class", "ticks")
            //         .attr("transform", "translate(0," + 18 + ")")
            //         .selectAll("text")
            //         .data(x.ticks(Math.round(width/50)))
            //         .enter().append("text")
            //         .attr("x", x)
            //         .style("font-size", __var__compStyle.__root.fontSize)
            //         .attr("fill", __var__compStyle.__root.labelColor)
            //         .attr("text-anchor", "middle")
            //         .text(function(d) { return d; });
            // }


            let handle = slider.insert("rect", ".track-overlay")
                .attr("class", "handle")
                .attr("width", __var__compStyle.__root.height)
                .attr("height", __var__compStyle.__root.height)
                .attr("y", -__var__compStyle.__root.height/2)
                .style("rx", __var__compStyle.__root.cornerRadius)
                .style("ry", __var__compStyle.__root.cornerRadius)
                // .attr("r", __var__compStyle.__root.height/2)
                .style("fill", __var__compStyle.__root.handleColor);


            slider.transition()
                .duration(750)
                .tween("hue", function() {
                    let i = d3.interpolate(__var__compStyle.__root.selectedValue, __var__compStyle.__root.selectedValue);
                    return function(t) { hue(i(t)); };
                });

            let hue = function(h) {
                handle.attr("x", x(h));
            };
        }
    },
    eventHandlers: [],
    eventEmitters: [],
    actions: [],
    workflows: {},
    localTemplates: {},
    structure: {
        type: "svg",
        id: "sliderComp",
        props: {
            width: "__var__compStyle.__root.width",
            height: "__var__compStyle.__root.height",
            style: {
                overflow: "visible"
            }
        },
        children: "__fn__customRender()"


    },
    lifecycleHooks: {
        init: {
            before: function() {

            },
            after: function() {
            }
        },
        onModelChange: function(newExternalVariables) {

        },
        reRender: {
            shouldAllow: function(newExternalVariables) {
                return true;
            },
            before: function(newExternalVariables) {

            },
            after: function(newExternalVariables) {
            }
        },
        cleanup: function() {

        }
    }

};