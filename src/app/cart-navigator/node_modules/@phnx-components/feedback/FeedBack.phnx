/**
 * This is a template for view definition file in
 * Project Phoenix : UI-Creator
 */
module.exports = {
    name: "FeedBack",
    imports: [{
        type: "module",
        take: {
            what: "WithContext",
            as: "ReactTags"
        },
        from: "react-tag-input"
    }, {
        type: 'component',
        take: "TextToMarkdown",
        from: '@phnx-components/text2markdown'
    }, {
        type: "component",
        from: "@phnx-components/dropzone",
        take: "Dropzone"
    }],
    variables: [{
        name: "payload",
        type: "object",
        defaultValue: {},
        scope: "private"
    }, {
        name: "accessToken",
        type: "string",
        isMandatory: true,
        scope: "public"
    },{
        name: "username",
        type: "string",
        isMandatory: true,
        scope: "public"
    }, {
        name: "gitlabProjectURL",
        type: "string",
        defaultValue: "/uploads/",
        scope: "public"
    }, {
        name: "uploadScreenshotURL",
        type: "string",
        defaultValue: "/muMockUp/issue/upload",
        scope: "public"
    }, {
        name: "tagsURL",
        type: "string",
        defaultValue: "/muMockUp/issue/tags",
        scope: "public"
    }, {
        name: "display",
        type: "string",
        defaultValue: "none",
        scope: "private"
    }, {
        name: "submitURL",
        type: "string",
        defaultValue: "/muMockUp/issue",
        scope: "public"
    }, {
        name: "tagList",
        type: "array",
        defaultValue: [],
        scope: "private"
    }, {
        name: "tags",
        type: "array",
        defaultValue: [],
        scope: "private"
    }, {
        name: "entityIcon",
        type: "string",
        defaultValue: "",
        scope: "private"
    }, {
        name: "entityId",
        type: "number",
        defaultValue: 0,
        scope: "private"
    }, {
        name: "isSubmitEnabled",
        type: "string",
        defaultValue: " disabled",
        scope: "private"
    }, {
        name: "rating",
        type: "number",
        defaultValue: 0,
        scope: "private"
    }, {
        name: "title",
        type: "string",
        defaultValue: "",
        scope: "private"
    }, {
        name: "comment",
        type: "string",
        defaultValue: "",
        scope: "private"
    }, {
        name: "isSubmitting",
        type: "boolean",
        defaultValue: false,
        scope: "private"
    }, {
        name: 'imageOrDesc',
        defaultValue: false,
        scope: 'private',
        type: 'boolean'
    }],
    functions: {
        showModal: opts => {
            __utils__setPrivateVars(Object.assign({
                display: 'block'
            }, opts));
            if (__var__accessToken)
                __fn__getIssueTags();
        },
        closeModal: () => {
            const defaults = {
                comment: "",
                title: '',
                tags: [],
                isSubmitting: false
            };
            __utils__setPrivateVars(Object.assign({
                display: 'none'
            }, defaults), true, {
                erase: true,
                concat: false
            });
            __elId__dropzone.removeAllFiles();
            __elId__feedbackComments.reset("");
        },
        isBtnEnabled: (isSubmitting, title, comments) => {
            return !isSubmitting && comments.trim() !== '' && title.trim() !== '' ? '' : ' disabled';
        },
        titleChange: () => {
            const comment = __elId__feedbackComments.getText();
            __utils__setPrivateVars({
                title: __elId__titleInput.value,
                comment: comment
            }, true);
        },
        getIssueTags: () => {
            fetch(__var__tagsURL, {
                method: 'GET',
                headers: new Headers({
                    "Content-Type": "application/json",
                    "Authorization": 'Bearer ' + __var__accessToken
                }),
                mode: 'cors',
                cache: 'default'
            }).then((res) => {
                if (res.ok)
                    res.json().then(__wf__onTagSuccess);
                else
                    __wf__onTagFailure();
            }).catch(__wf__onTagFailure);
        },
        postReview: (payload) => {
            fetch(__var__submitURL, {
                method: 'POST',
                headers: new Headers({
                    "Content-Type": "application/json",
                    "Authorization": 'Bearer ' + __var__accessToken
                }),
                mode: 'cors',
                cache: 'default',
                body: JSON.stringify(payload)
            }).then((res) => {
                if (res.ok)
                    __wf__onReviewSuccess();
                else
                    __wf__onReviewFailure();
            }).catch(__wf__onReviewFailure);
        },
        tagAdded: tag => {
            const comment = __elId__feedbackComments.getText();
            if (__var__tagList.includes(tag) && !__var__tags.find(t => t.id == tag.toLowerCase()))
                __utils__setPrivateVars({
                    tags: [{
                        text: tag,
                        id: tag.toLowerCase()
                    }],
                    comment: comment
                }, true, {
                    concat: true
                });
        },
        tagRemoved: i => {
            __utils__setPrivateVars({
                tags: __var__tags.filter((tag, ind) => ind != i)
            }, true, {
                concat: false
            });
        },
        toggleImageUpload: function () {
            const comment = __elId__feedbackComments.getText();
            __utils__setPrivateVars({
                imageOrDesc: !__var__imageOrDesc,
                comment: comment
            });
        },
        createDropzone: () => {
            return __var__accessToken ? __tmpl__dropzoneComponent : null;
        }
    },
    eventHandlers: [{
        id: "handleSubmit",
        from: {
            submitButton: "onClick"
        },
        workflow: ["submitReview"]
    }, {
        id: 'handleUpload',
        from: {
            dropzone: 'success'
        },
        workflow: ["uploadScreenshotSuccess"]
    }, {
        id: 'handleUploadFail',
        from: {
            dropzone: 'error'
        },
        workflow: ["uploadScreenshotFail"]
    }],
    localTemplates: {
        dropzoneComponent: {
            type: "__imports__Dropzone",
            id: "dropzone",
            props: {
                url: "__var__uploadScreenshotURL",
                acceptedFiles: 'image/*',
                headers: {
                    "Cache-Control": "",
                    "X-Requested-With": "",
                    Authorization: "'Bearer ' + __var__accessToken"
                }
            }
        }
    },
    workflows: {
        submitReview: () => {
            __utils__setPrivateVars({
                isSubmitting: true,
                payload: {
                    'title': __var__title,
                    'description': `${__elId__feedbackComments.getText()}

on

${window.location.href}

by

${__var__username}`,
                    'labels': __var__tags.map(t => t.text).join(',')
                }
            });
            __fn__postReview(__var__payload);
        },
        onReviewSuccess: () => {
            __fn__closeModal();
            __wf__notification(undefined, {
                showNotification: true,
                notificationType: 'success',
                message: 'feedback sent successfully'
            }, {
                erase: true
            });
        },
        onReviewFailure: () => {
            // failure notification
            __wf__notification(undefined, {
                showNotification: true,
                notificationType: 'error',
                message: 'Unable to send the feedback at this time'
            }, {
                erase: true
            });
        },
        onTagSuccess: (payload) => {
            __utils__setPrivateVars({
                tagList: payload.map(tag => tag.name)
            }, true, {
                erase: true,
                concat: false
            });
        },
        onTagFailure: () => {
            // failure notification
            __wf__notification(undefined, {
                showNotification: true,
                notificationType: 'error',
                message: 'Unable to get issue labels'
            }, {
                erase: true
            });
        },
        getIssueTags: () => {
            __act__getIssueTags();
        },
        uploadScreenshotSuccess: (evt, payload) => {
            const comment = __elId__feedbackComments.getText() + '\n\n' + payload.markdown.replace('/uploads/', __var__gitlabProjectURL + '/uploads/');
            __utils__setPrivateVars({
                comment: comment,
                imageOrDesc: false
            });
        },
        uploadScreenshotFail: (file) => {
            __elId__dropzone.removeFile(file);
            __wf__notification(undefined, {
                showNotification: true,
                notificationType: 'error',
                message: 'Unable to upload image'
            }, {
                erase: true
            });
        },
        notification: (evt, payload, props) => {
            __utils__emitEvent("notify", evt, payload, props);
        }
    },
    structure: {
        type: "div",
        id: "modalContainer",
        props: {
            className: "'modal fade slide-up auto-overflow '+(__var__display?'in':'')",
            style: {
                display: "__var__display",
                background: "rgba(0,0,0,0.5)"
            }
        },
        children: [{
            type: "div",
            props: {
                className: "modal-dialog"
            },
            children: [{
                type: "div",
                props: {
                    className: "modal-content-wrapper"
                },
                children: [{
                    type: "div",
                    props: {
                        className: "modal-content"
                    },
                    children: [{
                        type: "div",
                        props: {
                            className: "modal-header clearfix text-left"
                        },
                        children: {
                            type: "h4",
                            children: "Submit Feedback"
                        }
                    }, {
                        type: "div",
                        props: {
                            className: "modal-body",
                            style: {
                                maxWidth: '700px'
                            }
                        },
                        children: [{
                            type: "div",
                            props: {
                                className: "form-group form-group-default required"
                            },
                            children: [{
                                type: "label",
                                id: "titleLabel",
                                children: "Title"
                            }, {
                                type: "input",
                                id: "titleInput",
                                props: {
                                    onChange: "__fn__titleChange",
                                    value: "__var__title",
                                    placeholder: "Title",
                                    className: "form-control"
                                }
                            }]
                        },
                            {
                                type: "div",
                                props: {
                                    className: "form-group form-group-default m-t-10"
                                },
                                children: [{
                                    type: "label",
                                    id: "tagsLabel",
                                    children: "Tags"
                                }, {
                                    type: "__imports__ReactTags",
                                    props: {
                                        minQueryLength: 1,
                                        suggestions: "__var__tagList",
                                        tags: "__var__tags",
                                        handleAddition: "__fn__tagAdded",
                                        handleDelete: "__fn__tagRemoved",
                                        classNames: {
                                            tags: "bootstrap-tagsinput",
                                            tagInput: "inline",
                                            tagInputField: "bg-transparent",
                                            selected: "selectedClass",
                                            tag: "tag label label-info m-r-5",
                                            remove: "text-white fs-16 col-middle cursor m-l-5",
                                            suggestions: "list-view bg-white"
                                        }
                                    }
                                }]
                            },
                            {
                                type: "__imports__TextToMarkdown",
                                id: 'feedbackComments',
                                props: {
                                    value: '__var__comment',
                                    textAreaStyle: {
                                        height: "__var__imageOrDesc?'150px':'280px'",
                                        margin: '10px',
                                        transitionDuration: '0.3s'
                                    },
                                    markdownStyle: {
                                        height: "__var__imageOrDesc?'150px':'300px'",
                                        transitionDuration: '0.3s',
                                        width: '100%',
                                        overflowX: 'hidden',
                                        overflowY: 'auto'
                                    }
                                }
                            }, {
                                type: 'div',
                                props: {
                                    className: 'no-overflow',
                                    style: {
                                        transitionDuration: '0.3s',
                                        height: "__var__imageOrDesc?'150px':'0'"
                                    }
                                },
                                children: '__fn__createDropzone()'
                            },
                            {
                                type: "div",
                                props: {
                                    className: "p-t-20 text-right"
                                },
                                children: [{
                                    type: "button",
                                    isComp: false,
                                    props: {
                                        onClick: "__fn__toggleImageUpload",
                                        className: "btn btn-default m-r-5 text-grey"
                                    },
                                    children: ["Upload Image ", {
                                        type: 'i',
                                        props: {
                                            className: 'fa fa-image'
                                        }
                                    }]
                                }, {
                                    type: "button",
                                    id: "cancelButton",
                                    props: {
                                        onClick: "__fn__closeModal",
                                        className: "btn btn-default m-r-5"
                                    },
                                    children: "Cancel"
                                }, {
                                    type: "button",
                                    id: "submitButton",
                                    props: {
                                        className: "'btn btn-primary' + __fn__isBtnEnabled(__var__isSubmitting, __var__title, __var__comment, __var__tags)"
                                    },
                                    children: "Submit"
                                }]
                            }]
                    }]
                }]
            }]
        }]
    }
};