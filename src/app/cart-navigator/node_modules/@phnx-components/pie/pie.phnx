/**
 * pie component
 * Project: Phoenix UI creator
 * Author: Debashish
 */


"use strict";

module.exports = {
    name: "pie",
    imports: [
        {
            type: "module",
            from: "d3",
            take: {
                what: "*",
                as: "d3"
            }
        },
        {
            type: "asset",
            from: "./assets/pie.json",
            take: "compData"
        }
    ],
    variables: [
        {
            name: "alias",
            type: "string",
            defaultValue: "Pie",
            metadata: [{
                displayName: "Alias",
                widget: "INPUT",
                widgetData: {},
                grouping: "General",
                target: "alias"
            }],
            isMandatory: false,
            scope: "public"

        },
        {
            name: "compStyle",
            type: "object",
            defaultValue: {
                __root: {
                    backgroundColor: "rgba(255,255,255, 1)",
                    labelColor: "rgba(0,0,0,1)",
                    labelDistance: 100,
                    borderWidth: "1px",
                    borderStyle: {
                        text: "Solid",
                        className: "fa fa-trash",
                        id: "solid"
                    },
                    borderColor: "rgba(0,0,0,0.12)",
                    borderRadius: 0,
                    height: 400,
                    width: 750
                }
            },
            metadata: [{
                displayName: 'Pie Chart',
                widget: 'CHART_PROPERTIES',
                widgetData: {},
                grouping: '',
                tab: 'Style',
                target: 'compStyle.__root'
            },{
                displayName: "Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.width"
            }, {
                displayName: "Height",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.height"
            },{
                displayName: "Background color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "General",
                target: "compStyle.__root.backgroundColor"
            }, {
                displayName: "Border Width",
                widget: "NUMERIC_STEPPER",
                widgetData: {
                    minValue: 0
                },
                grouping: "Style",
                target: "compStyle.__root.borderWidth"
            }, {
                displayName: "Border Style",
                widget: "DROPDOWN",
                widgetData:{
                    values: [
                        {
                            text: "None",
                            className: "fa fa-trash",
                            id: "none"
                        },
                        {
                            text: "Solid",
                            className: "fa fa-trash",
                            id: "solid"
                        },
                        {
                            text: "Dotted",
                            className: "fa fa-trash",
                            id: "dotted"
                        },
                        {
                            text: "Dashed",
                            className: "fa fa-trash",
                            id: "dashed"
                        },
                        {
                            text: "Double",
                            className: "fa fa-trash",
                            id: "double"
                        }

                    ]
                },
                grouping: "Style",
                target: "compStyle.__root.borderStyle"
            }, {
                displayName: "Border Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Style",
                target: "compStyle.__root.borderColor"
            }, {
                displayName: "Border Radius",
                widget: "NUMERIC_STEPPER",
                widgetData: {
                    minValue: 0
                },
                grouping: "Style",
                target: "compStyle.__root.borderRadius"
            }, {
                displayName: "Label Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Advanced",
                target: "compStyle.__root.labelColor"
            }, {
                displayName: "Label Radius",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "Advanced",
                target: "compStyle.__root.labelDistance"
            }],
            scope: "public"
        }, {
            name: "colorTheme",
            type: "object",
            defaultValue: {
                scheme: "Default",
                colors: ["#3ec4cd","#3d9fcc","#3d7ccc","#3e41cc","#693ecc","#963dcd","#a1cc3e","#3ccc86"]
            },
            scope: "public"

        }, {
            name: "innerRadius",
            type: "number",
            defaultValue: 10,
            metadata: [{
                displayName: "Inner Radius",
                widget: "SLIDER",
                widgetData: {
                    maxValue: 200,
                    minValue:0,
                    stepCount:1
                },
                grouping: "General",
                target: "innerRadius"
            }],
            scope: "public"
        },
        {
            name: "legendPosition",
            type: "object",
            defaultValue: {
                text: "Right",
                className: "",
                id: "right"
            },
            metadata: [{
                displayName: "Legend",
                widget: "DROPDOWN",
                widgetData: {
                    values: [
                        {
                            text: "Left",
                            className: "",
                            id: "left"
                        }, {
                            text: "Right",
                            className: "",
                            id: "right"
                        }
                    ]
                },
                grouping: "Advanced",
                target: "legendPosition"
            }],
            scope: "public"
        },
        {
            name: "showLabel",
            type: "boolean",
            defaultValue: true,
            metadata: [{
                displayName: "Label",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "Advanced",
                target: "showLabel"
            }],
            scope: "public"
        },
        {
            name: "showLegend",
            type: "boolean",
            defaultValue: true,
            metadata: [{
                displayName: "Legend",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "Advanced",
                target: "showLegend"
            }],
            scope: "public"
        },
        {
            name: "compTheme",
            type: "object",
            defaultValue: null,
            metadata: [{
                displayName: "Color theme",
                widget: "COLOR_PALETTE",
                widgetData: {},
                grouping: "Style",
                target: "compTheme"
            }],
            scope: "public"
        },
        {
            name: "compData",
            type: "object",
            defaultValue: {
                selectedDataset: "Default",
                parsedData: "__imports__compData"
            },
            metadata: [{
                displayName: 'Pie Chart',
                widget: 'CHART_DATA_PROPERTIES',
                widgetData: {
                    axisTarget: ['compMetadata.xAxisVariable', 'compMetadata.yAxisVariable']
                },
                grouping: '',
                tab: 'Data',
                target: 'compData'
            },{
                displayName: "Data Source",
                widget: "DATASOURCE",
                widgetData: {},
                grouping: "Data",
                target: "compData"
            }],
            isMandatory: false,
            scope: "public"
        },
        {
            name: "compMetadata",
            type: "object",
            defaultValue: {
                xAxisVariable: ["age"],
                yAxisVariable: ["population"]
            },
            metadata: [{
                displayName: "Key",
                widget: "ARRAY_INPUT",
                widgetData: {
                    enableSuggestions: true,
                    placeHolder: "Add key",
                    minTagLength: 0
                },
                grouping: "Data",
                target: "compMetadata.xAxisVariable"
            }, {
                displayName: "Value",
                widget: "ARRAY_INPUT",
                widgetData: {
                    enableSuggestions: true,
                    placeHolder: "Add key",
                    minTagLength: 0
                },
                grouping: "Data",
                target: "compMetadata.yAxisVariable"
            }],
            isMandatory: false,
            scope: "public"
        },
        {
            name: "showHeader",
            type: "boolean",
            defaultValue: false,
            metadata: [{
                displayName: "Show Title",
                widget: "SWITCHERY",
                widgetData: {},
                grouping: "General",
                target: "showHeader"
            }],
            scope: "public"
        },
        {
            name: "title",
            type: "object",
            defaultValue: {
                text: "Pie",
                color: "rgba(0,0,0,0.7)",
                fontSize: "20px",
                fontFamily: "Roboto",
                transform: "none"
            },
            metadata: [{
                displayName: 'Text',
                widget: 'CHART_TEXT_PROPERTIES',
                widgetData: {
                    showHeader: 'showHeader'
                },
                grouping: '',
                tab: 'Text',
                target: 'title'
            },{
                displayName: "Text",
                widget: "INPUT",
                widgetData: {},
                grouping: "Title",
                target: "title.text"
            },{
                displayName: "Color",
                widget: "COLOR_PICKER",
                widgetData: {},
                grouping: "Title",
                target: "title.color"
            },{
                displayName: "Font Size",
                widget: "NUMERIC_STEPPER",
                widgetData: {},
                grouping: "Title",
                target: "title.fontSize"
            },{
                displayName: "Font Family",
                widget: "FONT_SELECTOR",
                widgetData: {},
                grouping: "Title",
                target: "title.fontFamily"
            },{
                displayName: "Case",
                widget: "TEXT_TRANSFORMER",
                widgetData: {},
                grouping: "Title",
                target: "title.transform"
            }],
            scope: "public"
        },
        {
            name: "advancedProps",
            type: "boolean",
            defaultValue: '',
            metadata: [{
                displayName: "Pie Chart",
                widget: "CHART_ADVANCED_PROPERTIES",
                widgetData: {
                    showLegend: 'showLegend',
                    showLabel: 'showLabel',
                    innerRadius: 'innerRadius',
                    legendPosition: 'legendPosition'
                },
                grouping: "",
                tab: 'Advanced',
                target: "advancedProps"
            }],
            scope: "public"
        },
        {
            name: "margin",
            type: "object",
            defaultValue: {
                top: 20,
                right: 20,
                bottom: 30,
                left: 40
            },
            scope: "private"
        }
    ],
    functions: {
        customRender: function () {

            d3.select(__elId__pieComp).selectAll("*").remove();

            if(__var__showHeader) {
                var svg = d3.select(__elId__pieComp),
                    width = __var__compStyle.__root.width,
                    height = __var__compStyle.__root.height + (__var__margin.top * 3) - __var__margin.bottom,
                    radius = Math.min(width, height) / 2,
                    g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
            }
            else {
                svg = d3.select(__elId__pieComp),
                    width = __var__compStyle.__root.width,
                    height = __var__compStyle.__root.height,
                    radius = Math.min(width, height) / 2,
                    g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
            }

            try {
                let ratio = __var__compStyle.__root.width>__var__compStyle.__root.height?(__var__compStyle.__root.height/30):(__var__compStyle.__root.width/30);

                let color = d3.scaleOrdinal(__var__compTheme? __var__compTheme.colors: (__var__colorTheme.colors? __var__colorTheme.colors: ["#3ec4cd","#3d9fcc","#3d7ccc","#3e41cc","#693ecc","#963dcd","#a1cc3e","#3ccc86"]));

                let pie = d3.pie()
                    .sort(null)
                    .value(function (d) {
                        return d[__var__compMetadata.yAxisVariable];
                    });

                let sum = 0;
                for(var i=0;i<Object.keys(__var__compData.parsedData).length;i++){
                    sum += parseInt(__var__compData.parsedData[i][__var__compMetadata.yAxisVariable]);
                }

                let path = d3.arc()
                    .outerRadius(function(d){
                        if (__var__compStyle.__root.width  > __var__compStyle.__root.height) {
                            return __var__compStyle.__root.height / 3;
                        }
                        else {
                            return __var__compStyle.__root.width / 3;
                        }
                    })
                    .innerRadius(__var__innerRadius);

                let label = d3.arc()
                    .outerRadius(__var__compStyle.__root.labelDistance)
                    .innerRadius(__var__compStyle.__root.labelDistance);

                let arc = g.selectAll(".arc")
                    .data(pie(__var__compData.parsedData))
                    .enter().append("g")
                    .attr("class", "arc");

                if (__var__showHeader){
                    let h = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + __var__margin.top + ")");

                    h.append("line")
                        .attr("x1", 0 - __var__margin.left)
                        .attr("y1", __var__margin.top)
                        .attr("x2", width - __var__margin.left)
                        .attr("y2", __var__margin.top)
                        .style("stroke", "rgba(0,0,0,0.12)");

                    h.append('text')
                        .text(__var__title.text)
                        .attr("fill", __var__title.color)
                        .attr('x', 0)
                        .attr('y', __var__margin.top - 10)
                        .attr('text-anchor', "start")
                        .style('font-family', __var__title.fontFamily)
                        .style("font-size", __var__title.fontSize)
                        .style("text-decoration", "none")
                        .style("text-transform", __var__title.transform);

                }

                arc.append("path")
                    .attr("d", path)
                    .attr("fill", function (d) {
                        return color(d.data[__var__compMetadata.xAxisVariable]);
                    });
                if(__var__showLabel) {
                    arc.append("text")
                        .attr("transform", function (d) {
                            return "translate(" + label.centroid(d) + ")";
                        })
                        .attr("dy", "0.35em")
                        .attr("fill", __var__compStyle.__root.labelColor)
                        .style("font-size",""+ratio+"px")
                        .text(function (d,i) {
                            return Math.floor((d.data[__var__compMetadata.yAxisVariable]/sum)*100) + '%';
                        });
                }



                if (__var__legendPosition.id == "left" && __var__showLegend) {

                    // let legend = d3.select(__elId__mapComp).append("svg").selectAll(".legend")
                    let legend = svg.selectAll(".legend")
                        .data(pie(__var__compData.parsedData))
                        .enter().append("g")
                        .attr("class", "legend")
                        .attr("transform", function (d, i) {
                            return "translate(-20," + i * 20 + ")";
                        });

                    legend.append("rect")
                        .attr("x", ((__var__compStyle.__root.width / 6) + 3))
                        .attr("y", (__var__compStyle.__root.height / 3))
                        .attr("width", ratio)
                        .attr("height", ratio)
                        .style("fill", function (d) {
                            return color(d.data[__var__compMetadata.xAxisVariable]);
                        });

                    legend.append("text")
                        .attr("x", (__var__compStyle.__root.width / 6))
                        .attr("y", ((__var__compStyle.__root.height / 3) + 6))
                        .attr("dy", ".35em")
                        .style("text-anchor", "end")
                        .style("font-size",""+ratio+"px")
                        // .style("font-weight", "")
                        .style("font-family", "sans")
                        .attr("fill",__var__compStyle.__root.labelColor)
                        .text(function (d) {
                            return d.data[__var__compMetadata.xAxisVariable];
                        });
                }

                else if (__var__legendPosition.id == "right" && __var__showLegend) {

                    // let legend = d3.select(__elId__mapComp).append("svg").selectAll(".legend")
                    let legend = svg.selectAll(".legend")
                        .data(pie(__var__compData.parsedData))
                        .enter().append("g")
                        .attr("class", "legend")
                        .attr("transform", function (d, i) {
                            return "translate(20," + i * 20 + ")";
                        });

                    legend.append("rect")
                        .attr("x", ((__var__compStyle.__root.width * 0.8) + 3))
                        .attr("y", (__var__compStyle.__root.height / 3))
                        .attr("width", ratio)
                        .attr("height", ratio)
                        .style("fill", function (d) {
                            return color(d.data[__var__compMetadata.xAxisVariable]);
                        });

                    legend.append("text")
                        .attr("x", (__var__compStyle.__root.width * 0.85))
                        .attr("y", ((__var__compStyle.__root.height / 3) + 6))
                        .attr("dy", ".35em")
                        .style("text-anchor", "start")
                        .style("font-size", ""+ratio+"px")
                        // .style("font-weight", "")
                        .style("font-family", "sans")
                        .attr("fill",__var__compStyle.__root.labelColor)
                        .text(function (d) {
                            return d.data[__var__compMetadata.xAxisVariable];
                        });
                }
            }
            catch(err){
                let h = svg.append("g").attr("transform", "translate(" + __var__margin.left + "," + __var__margin.top + ")");


                h.append('text')
                    .text("Oops!")
                    .attr("fill", __var__compStyle.__root.labelColor)
                    .attr('x', width /2 )
                    .attr('y', height /3)
                    .attr('text-anchor', "middle")
                    .style('font-family', "Roboto")
                    .style("font-size", "20px")
                    .style("text-decoration", "none")
                    .style("text-transform", "none");


                h.append('text')
                    .text("Select a proper data format!")
                    .attr("fill", __var__compStyle.__root.labelColor)
                    .attr('x', width /2 )
                    .attr('y', height /2)
                    .attr('text-anchor', "middle")
                    .style('font-family', "Roboto")
                    .style("font-size", "14px")
                    .style("text-decoration", "none")
                    .style("text-transform", "none");
            }

        }

    },
    eventHandlers: [],
    eventEmitters: [],
    actions: [],
    workflows: {},
    localTemplates: {},
    structure: {
        type: "div",
        id: "pieParent",
        props: {
            style: {
                backgroundColor: "__var__compStyle.__root.backgroundColor",
                width: "__var__compStyle.__root.width",
                height: "__var__compStyle.__root.height"
            }
        },

        children: [
            {
                type: "svg",
                id: "pieComp",
                props: {
                    viewBox: "'0 0 '+__var__compStyle.__root.width+ ' '+__var__compStyle.__root.height",
                    width: "__var__compStyle.__root.width",
                    height: "__var__compStyle.__root.height",
                    style: {
                        borderWidth: "__var__compStyle.__root.borderWidth",
                        borderStyle: "__var__compStyle.__root.borderStyle.id",
                        borderColor: "__var__compStyle.__root.borderColor",
                        borderRadius: "__var__compStyle.__root.borderRadius"
                    }
                }

            }

        ]
    },
    lifecycleHooks: {
        init: {
            before: function () {

            },
            after: function () {
                __fn__customRender();
            }
        },
        onModelChange: function (newExternalVariables) {

        },
        reRender: {
            shouldAllow: function (newExternalVariables) {
                return true;
            },
            before: function (newExternalVariables) {

            },
            after: function (newExternalVariables) {
                __fn__customRender();
            }
        },
        cleanup: function () {

        }
    }

};