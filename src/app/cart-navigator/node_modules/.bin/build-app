#! /usr/bin/env node
"use strict";

var _webpack = _interopRequireDefault(require("webpack"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _webpack2 = _interopRequireDefault(require("../webpack.config"));

var _runtimeUtils = require("../tools/runtime-utils");

var _compilationUtils = require("../tools/compilation-utils");

var _logger = _interopRequireDefault(require("@phoenix/phnx-internal-utils/lib/logger"));

var _copyMap;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var env = 'production';
process.env.NODE_ENV = JSON.stringify(env);
process.env.BABEL_ENV = JSON.stringify(env);
// ------- Read CLI options -------
var options = (0, _runtimeUtils.getOptions)(process.argv);
options.env = env; // ------- Project name checks ----- (For npm publish)

if (typeof options.name != 'string' || options.name.trim() === '') {
  _logger.default.error('Expected project name(string) in config.js');

  process.exit(1);
}

options.name = options.name.toLowerCase().replace(/\s+/g, '-'); // ------- File movements before build ----------

var projRoot = process.cwd();
var pkgPath = __dirname;

var buildOutputDir = _path.default.join(projRoot, options.outputPath);

var publicDir = _path.default.join(projRoot, 'public');

var fromPkg = ['dist.js', 'runtime-utils.js', 'package.json'];
var fromProj = [];

try {
  _fsExtra.default.statSync(_path.default.join(projRoot, 'config.js'));

  fromProj.push('config.js');
} catch (e) {
  console.warn('Config file not found in the root of the project. Expecting you to have it in public folder. ;)');
}

var fromPublic = _fsExtra.default.readdirSync(publicDir).filter(function (item) {
  return item !== 'index.html';
});

var toRemove = ["".concat(buildOutputDir, "/**"), "!".concat(buildOutputDir), "!".concat(_path.default.join(buildOutputDir, 'node_modules/**'))];
(0, _compilationUtils.removeDir)(toRemove);
var copyMap = (_copyMap = {}, _defineProperty(_copyMap, _path.default.join(pkgPath, '../tools'), fromPkg), _defineProperty(_copyMap, projRoot, fromProj), _defineProperty(_copyMap, publicDir, fromPublic), _copyMap);
var httpsConfig = options.httpsConfig;

if (httpsConfig) {
  Object.keys(httpsConfig).forEach(function (item) {
    if (typeof httpsConfig[item] === 'string' && /^file:/.test(httpsConfig[item])) {
      var file = httpsConfig[item].replace(/^file:/, '');
      copyMap[projRoot].push(file);
    }
  });
}

var webpackConfig = (0, _webpack2.default)(env, options);
/**
 * This will just make the bundle.js and place it into /dist
 */

_logger.default.debug('Generating minified bundle for production use via Webpack...');

(0, _webpack.default)(webpackConfig).run(function (err, stats) {
  if (err) {
    // so a fatal error occurred. Stop here.
    _logger.default.error('Error with compilation', {
      Stack: err.stack || err
    });

    return 1;
  }

  var jsonStats = stats.toJson();

  if (jsonStats.errors.length) {
    _logger.default.error('Webpack generated the following errors');

    _logger.default.error(jsonStats.errors);

    return 1;
  }

  if (jsonStats.warnings.length) {
    _logger.default.warn('Webpack generated the following warnings');

    _logger.default.error(jsonStats.warnings);
  }

  try {
    _logger.default.info('Copying dependencies', {
      target: buildOutputDir,
      payload: copyMap
    });

    Object.keys(copyMap).forEach(function (src) {
      copyMap[src].forEach(function (file) {
        _fsExtra.default.copySync(_path.default.join(src, file), _path.default.join(buildOutputDir, file));
      });
    });
  } catch (e) {
    _logger.default.error('Error while copying dependencies', {
      Stack: e.stack || e
    });

    return 2;
  }

  if (options.server) {
    if (typeof options.server.entry === 'string' && (0, _compilationUtils.transpile)(options.server.entry, _path.default.join(buildOutputDir, options.server.entry)) != 0) {
      return 3;
    }

    if (Object.keys(options.server.dependencies).length) {
      try {
        _logger.default.info('Updating /dist/package.json with dependencies', options.server.dependencies); // add depdencies


        var _packageJSON = require(_path.default.join(buildOutputDir, 'package.json'));

        _packageJSON.dependencies = Object.assign(_packageJSON.dependencies, options.server.dependencies);

        _fsExtra.default.writeFileSync(_path.default.join(buildOutputDir, 'package.json'), JSON.stringify(_packageJSON));
      } catch (e) {
        _logger.default.error('Error while updating /dist/package.json with dependencies', {
          Stack: e.stack || e
        });
      }
    }
  } // change the name


  var appName = "@phoenix-apps/".concat(options.name);

  var packageJSON = require(_path.default.join(buildOutputDir, 'package.json'));

  packageJSON.name = "".concat(appName);

  _fsExtra.default.writeFileSync(_path.default.join(buildOutputDir, 'package.json'), JSON.stringify(packageJSON));

  _logger.default.info("Successfully compiled your app to ".concat(options.basepath, "; It's ready to roll!"));

  process.exit(0);
});