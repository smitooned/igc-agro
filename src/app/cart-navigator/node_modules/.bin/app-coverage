#! /usr/bin/env node
"use strict";

var _child_process = require("child_process");

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _logger = _interopRequireDefault(require("@phoenix/phnx-internal-utils/lib/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.env.NODE_ENV = 'test';
process.env.BABEL_ENV = 'test';

var rimraf = require('rimraf');

var shouldShowLogs = !!process.argv.find(function (_) {
  return _ === '--debug';
});
var usePreviousJestRun = !!process.argv.find(function (_) {
  return _ === '--no-test-run';
});

function modifyLcov() {
  try {
    var lcov = _fsExtra.default.readFileSync(_path.default.join(process.cwd(), 'coverage/lcov.info'), 'utf8'); //Safeguard phoenix-npm


    lcov = lcov.replace(/(\/phoenix-npm\/.+?)\/src\//g, '$1/tmpsrc/');
    lcov = lcov.replace(/\/src\//g, '/dest/');
    lcov = lcov.replace(/\/tmpsrc\//g, '/src/');

    _fsExtra.default.writeFileSync(_path.default.join(process.cwd(), 'coverage/lcov.info'), lcov, 'utf8');

    _logger.default.debug('lcov.info updated');

    return true;
  } catch (e) {
    return false;
  }
}

function generateCoverage() {
  return new Promise(function (resolve) {
    if (usePreviousJestRun) {
      try {
        _fsExtra.default.statSync(_path.default.join(process.cwd(), 'coverage'));

        _logger.default.debug("Using coverage from previous test run!!!");

        resolve('Using previous jest execution!!!');
      } catch (e) {
        console.error('Unable to locate the coverage folder. Did test cases run with coverage generation?');
        process.exit(1);
      }

      return;
    } //istanbul report --root coverage lcovonly


    var options = ['--coverage'];

    if (process.argv.find(function (_) {
      return /-config=/.test(_);
    })) {
      options.push(process.argv.find(function (_) {
        return /-config=/.test(_);
      }));
    }

    var child = (0, _child_process.exec)("node ".concat(_path.default.join(__dirname, 'test-dev.js'), " ").concat(options.join(' ')));
    child.stdout.on('data', function (data) {
      if (shouldShowLogs) {
        _logger.default.info(data + '');
      }
    });
    child.stderr.on('data', function (data) {
      if (shouldShowLogs) {
        _logger.default.error(data + '');
      }
    });
    child.on('close', function (code) {
      _logger.default.debug("Jest execution exited with code ".concat(code));

      resolve("Jest execution has completed successfully with status code ".concat(code, "!"));
    });
  });
}

function transpilePhnx() {
  return new Promise(function (resolve) {
    try {
      _fsExtra.default.statSync(_path.default.join(process.cwd(), 'sonar-project.properties')); //Only this may throw error


      var child = (0, _child_process.exec)("node ".concat(_path.default.join(__dirname, 'transpile-phnx.js')));
      child.stdout.on('data', function (data) {
        if (shouldShowLogs) {
          _logger.default.info(data + '');
        }
      });
      child.stderr.on('data', function (data) {
        if (shouldShowLogs) {
          _logger.default.error(data + '');
        }
      });
      child.on('close', function (code) {
        _logger.default.debug("Transpiling phnx files exited with code ".concat(code));

        if (code > 0) {
          console.error("Transpile Phnx failed with code ".concat(code));
          process.exit(code);
        }

        if (modifyLcov()) {
          resolve('Phnx files transpiled');
        } else {
          console.error('unable to modify lcov');
          process.exit(1);
        }
      });
    } catch (e) {
      console.error('No Sonar Properties found!');
      process.exit(1);
    }
  });
}

function publishSonar() {
  return new Promise(function (resolve) {
    try {
      _fsExtra.default.statSync(_path.default.join(process.cwd(), 'dest')); //Only this may throw error


      var child;

      if (/^win/.test(process.platform)) {
        child = (0, _child_process.exec)('./node_modules/@phoenix/phnx-test/resources/sonar-scanner/bin/sonar-scanner.bat');
      } else {
        child = (0, _child_process.exec)('bash ./node_modules/@phoenix/phnx-test/resources/sonar-scanner/bin/sonar-scanner');
      }

      child.stdout.on('data', function (data) {
        if (shouldShowLogs) {
          _logger.default.info(data + '');
        }
      });
      child.stderr.on('data', function (data) {
        if (shouldShowLogs) {
          _logger.default.error(data + '');
        }
      });
      child.on('close', function (code) {
        _logger.default.debug("Publishing to sonarqube exited with code ".concat(code));

        rimraf(_path.default.join(process.cwd(), 'dest'), function (err) {
          if (err) {
            console.error('Error in removing dest ', err);
          }

          if (code > 0) {
            console.error("Sonar Scanner exited with a status code of ".concat(code));
            process.exit(code);
          } else {
            resolve("Sonar metrics uploaded!");
          }
        });
      });
    } catch (e) {
      console.error('Dest folder not found!');
      process.exit(1);
    }
  });
}

generateCoverage().then(function () {
  return transpilePhnx();
}).then(function () {
  return publishSonar();
}).catch(function (errMsg) {
  _logger.default.error("It came here for unknown reason: ".concat(errMsg));
});