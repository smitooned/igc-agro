"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeDeepKeepLeft = mergeDeepKeepLeft;
exports.mergeDeep = mergeDeep;

var _index = require("./index");

function mergeDeepKeepLeft(orig, newObj) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$concat = _ref.concat,
      concat = _ref$concat === void 0 ? true : _ref$concat,
      _ref$erase = _ref.erase,
      erase = _ref$erase === void 0 ? false : _ref$erase;

  //Here only root level keys are supposed to be maintained.
  //Everything else is merged.
  var dataToMerge = {};
  var origKeys = Object.keys(orig);
  Object.keys(newObj).forEach(function (key) {
    if (origKeys.includes(key)) {
      dataToMerge[key] = newObj[key];
    }
  });
  return mergeDeep(orig, dataToMerge, {
    concat: concat,
    erase: erase
  });
}

function mergeDeep(orig, newObj) {
  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref2$concat = _ref2.concat,
      concat = _ref2$concat === void 0 ? true : _ref2$concat,
      _ref2$erase = _ref2.erase,
      erase = _ref2$erase === void 0 ? false : _ref2$erase;

  var origKeys = Object.keys(orig);
  var newKeys = Object.keys(newObj); //Update existing keys

  var toReturn = origKeys.reduce(function (acc, key) {
    var newVal = newObj[key];
    var origVal = orig[key];

    if (newVal === undefined) {
      acc[key] = origVal;
    } else if (!erase && (0, _index.checkType)(origVal, 'object') && (0, _index.checkType)(newVal, 'object')) {
      acc[key] = mergeDeep(origVal, newVal, {
        erase: erase,
        concat: concat
      });
    } else if (concat && (0, _index.checkType)(origVal, 'array')) {
      //Previously, values passed were pushed into array when concat=true
      //Implementing it the right way will break code
      if ((0, _index.checkType)(newVal, 'array')) {
        acc[key] = origVal.concat(newVal);
      } else {
        acc[key] = origVal.concat([newVal]);
      }
    } else {
      acc[key] = newVal;
    }

    return acc;
  }, {}); //Add new keys

  newKeys.forEach(function (key) {
    if (!origKeys.includes(key)) {
      toReturn[key] = newObj[key];
    }
  });
  return toReturn;
}