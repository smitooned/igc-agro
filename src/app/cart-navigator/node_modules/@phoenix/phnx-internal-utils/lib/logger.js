"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _os = _interopRequireDefault(require("os"));

var _util = _interopRequireDefault(require("util"));

var _nodeLogger = _interopRequireDefault(require("@phoenix/node-logger"));

var _colors = _interopRequireDefault(require("colors"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getIPs() {
  var addresses = [];

  var interfaces = _os.default.networkInterfaces();

  Object.keys(interfaces).forEach(function (type) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = interfaces[type][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var itrface = _step.value;
        var address = itrface;

        if (address.family === 'IPv4' && !address.internal) {
          addresses.push(address.address);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return addresses;
}

var defaultMeta = {
  phnxMetrics_username: _os.default.userInfo()['username'],
  phnxMetrics_workspace: process.cwd(),
  phnxMetrics_platform: _os.default.platform(),
  phnxMetrics_version: _os.default.release(),
  phnxMetrics_arch: _os.default.arch(),
  phnxMetrics_ips: getIPs()
};
var levelToColor = {
  info: 'green',
  error: 'red',
  warn: 'yellow',
  debug: 'blue',
  verbose: 'magenta'
}; // has console transport by default

var logger = new _nodeLogger.default(['amqp', {
  name: 'console',
  options: {
    level: 'silly',
    formatter: function formatter(options) {
      var level = options.level,
          message = options.message,
          meta = options.meta;
      var color = levelToColor[level];
      var defaultMessage = message[color].bold;
      var atLeastOneKeyNotDefault = false;
      var toPrint;

      if ((0, _index.checkType)(meta, 'object')) {
        var metaKeys = Object.keys(meta);
        var maxLength = 1;
        toPrint = ('-----------' + message + '-----------')[color];
        metaKeys.forEach(function (opt) {
          if (maxLength < opt.length && defaultMeta[opt] === undefined) {
            atLeastOneKeyNotDefault = true;
            maxLength = opt.length;
          }
        });
        metaKeys.forEach(function (opt) {
          if (defaultMeta[opt] === undefined) {
            var toAppend = ' '.repeat(maxLength - opt.length);
            toPrint += "\n ".concat(opt).concat(toAppend, " : ").concat(_util.default.format(meta[opt]));
          }
        });
        toPrint += '\n' + '-'.repeat(22 + message.length)[color];
      }

      if (!atLeastOneKeyNotDefault) {
        toPrint = defaultMessage;
      }

      return toPrint;
    }
  }
}]).instance;

var LoggerWrapper = function LoggerWrapper() {
  _classCallCheck(this, LoggerWrapper);
};

['error', 'warn', 'info', 'verbose', 'debug', 'silly'].forEach(function (level) {
  LoggerWrapper.prototype[level] = function (message, metadata) {
    logger[level](message, _objectSpread({}, metadata || {}, defaultMeta));
  };
});

var _default = new LoggerWrapper();

exports.default = _default;