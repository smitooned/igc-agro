"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkType = checkType;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * This file contains most common utilities used
 * @author Aftab Khan
 * @date 30-Oct-2017
 */

/**
 * Check if the value matches the type expected
 * @param  {any}     any    object whose type to check
 * @param  {string}  type   type to match
 * @return {boolean}        true if the actual type matched the type to match
 */
function checkType(value, type) {
  return getType(value) === type.toLowerCase();
}
/**
 * This function is copied from jest repo.
 * This is atleast 600 times faster than doing Object.prototype.toString call
 * @param {any} value
 */


var getType = function getType(value) {
  if (value === undefined) {
    return 'undefined';
  } else if (value === null) {
    return 'null';
  } else if (Array.isArray(value)) {
    return 'array';
  } else if (typeof value === 'boolean') {
    return 'boolean';
  } else if (typeof value === 'function') {
    return 'function';
  } else if (typeof value === 'number') {
    return 'number';
  } else if (typeof value === 'string') {
    return 'string';
  } else if (_typeof(value) === 'object') {
    if (value.constructor === RegExp) {
      return 'regexp';
    } else if (value.constructor === Map) {
      return 'map';
    } else if (value.constructor === Set) {
      return 'set';
    } else if (value.constructor === Date) {
      return 'date';
    } else if (value.constructor === Object) {
      return 'object';
    }

    return 'unknownobject';
  } else if (_typeof(value) === 'symbol') {
    return 'symbol';
  }

  throw new Error("value of unknown type: ".concat(value));
};