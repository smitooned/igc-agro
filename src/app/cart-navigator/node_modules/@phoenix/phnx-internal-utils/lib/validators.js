"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.simpleChecks = simpleChecks;
exports.validateAll = validateAll;

var _index = require("./index");

/**
 * This is bunch of common utilities that does structure checks and validations
 *
 * @author Aftab Khan
 * @date 19-Sept-2017
 */

/**
 * This function will run sequence of checks and throws errors if any one of
 * them fails. Each object should be of structure
 * {name: 'Name to display', type: 'ExpectedType', value: 'Actual value to test agains', isMan: whether its mandatory (default = false)}
 * @param  {array}    checkArray      Array of checks to be performed
 * @param  {string}   location        String describing the location from where the validation is called, used in throwing errors(if any)
 * @throws TypeError for anything failing the test
 */
function simpleChecks(checkArray, location) {
  checkArray.forEach(function (check) {
    if (check.isMan !== true && check.value === undefined) {
      return;
    }

    if (!(0, _index.checkType)(check.value, check.type)) {
      throw new TypeError("Expected ".concat(check.name, " to be of type ").concat(check.type, " ").concat(location ? "in ".concat(location) : ''));
    }
  });
}
/* -------------------- Structure validator helpers -------------------- */

/**
 * This function checks the object to have only the known keys and throws errors if not
 * @param  {string} name       Name of the class
 * @param  {string} where      Where in the class
 * @param  {object} object     The object whose keys you want to check
 * @param  {array } validKeys  Array of valid string key names
 */


function checkForMaliciousKeys(name, where, object, validKeys) {
  Object.keys(object).forEach(function (item) {
    if (validKeys.indexOf(item) === -1) {
      throw new Error("Unknown attribute ".concat(item, " in ").concat(where));
    }
  });
}
/**
 * This function checks the object to have mandatory keys and throws errors if not
 * @param  {string} name           Name of the class
 * @param  {string} where          Where in the class
 * @param  {object} object         The object whose keys you want to check
 * @param  {array } mandatoryKeys  Array of mandatory string key names
 */


function checkForMandatoryKeys(name, where, object, mandatoryKeys) {
  mandatoryKeys.forEach(function (item) {
    if (object[item] === undefined) {
      throw new Error("Expected attribute ".concat(item, " in ").concat(where));
    }
  });
}

function checkForValue(name, where, value, expectedValues) {
  if (expectedValues.indexOf(value) === -1) {
    throw new TypeError("Expected value to be one of (".concat(expectedValues, "') in ").concat(where));
  }
}
/**
 * This function does type checks on whatever params are passed into it
 * @param  {any}           param         Any param on which type check is to be done
 * @param  {string/array}  expectedType  The expected type of the param
 * @param  {string}        variable      The name of the param
 * @param  {string}   	   name          The name of the class
 * @param  {string}  	   where         Defines where in the structure we are checking
 */


function typeChecks(param, expectedType, variable, name, where) {
  if (param === null) {
    return;
  }

  var failed;

  if ((0, _index.checkType)(expectedType, 'array')) {
    failed = expectedType.every(function (item) {
      return isExpectedType(param, item);
    });
  } else {
    failed = isExpectedType(param, expectedType);
  }

  if (failed) {
    throw new TypeError("Expected ".concat(variable, " to be one of type (").concat(expectedType, ") in ").concat(where));
  }
}
/**
 * This function is to whitelist some of the types we use in our loader code
 * @param  {any}     param  Any param on which type check is to be done
 * @param  {string}  type   Type we are looking for
 * @return {Boolean}      	Whether it failed or passed
 */


function isExpectedType(param, type) {
  var failed = false;

  switch (type) {
    case 'function':
    case 'any':
    case 'element':
    case 'node':
      break;

    default:
      failed = !(0, _index.checkType)(param, type);
  }

  return failed;
}

function typeCheckChildChecks(key, val, checkData, name, where) {
  typeChecks(val, checkData.type, key, name, where);

  if (val && checkData.childObjStructure) {
    if (checkData.type === 'object') {
      validateAll(name, val, checkData.childObjStructure, where + ' -> ' + key);
    } else if (checkData.type === 'array') {
      val.forEach(function (obj) {
        validateAll(name, obj, checkData.childObjStructure, where + ' -> ' + key);
      });
    }
  }
}
/* -------------------- End Structure validator helpers -------------------- */

/**
 * This function does all the validations needed on one object
 * @param  {string} name         Name of the file in the directory
 * @param  {object} viewData     Incoming object to be validated
 * @param  {object} expectedData Object Describing all validations to do
 * @param  {string} where        Defines where in the structure we are checking
 */


function validateAll(name, viewData, expectedData, where) {
  var allKeys = Object.keys(expectedData);
  var isAllCheck = allKeys.some(function (item) {
    return item === '__CHECK-ALL__';
  });
  var expectedDataKeys = allKeys.filter(function (item) {
    return item !== '__CHECK-ALL__';
  });
  var mandatoryKeys = expectedDataKeys.filter(function (key) {
    return expectedData[key].isMan === true;
  });
  checkForMandatoryKeys(name, where, viewData, mandatoryKeys);

  if (isAllCheck) {
    var allCheckData = expectedData['__CHECK-ALL__'];
    Object.keys(viewData).forEach(function (key) {
      typeCheckChildChecks(key, viewData[key], allCheckData, name, where);
    });
  } else {
    checkForMaliciousKeys(name, where, viewData, expectedDataKeys);
    expectedDataKeys.forEach(function (key) {
      var checkData = expectedData[key];
      var val = viewData[key];

      if (val !== undefined) {
        typeCheckChildChecks(key, val, checkData, name, where);

        if (checkData.values) {
          checkForValue(name, where + ' in the attr ' + key, val, checkData.values);
        }
      }
    });
  }
}