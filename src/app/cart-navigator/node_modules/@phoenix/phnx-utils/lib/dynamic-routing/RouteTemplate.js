"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _phnxUtils = require("@phoenix/phnx-utils");

var _reactRouterDom = require("react-router-dom");

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * All components in the application are rendered via this RouteTemplate.
 * It seeks to pass extra props to the component that are otherwise not available
 * to the component viz.
 *
 * appName {string} application name
 * navObj  {object} any navigation object passed between route transitions
 *
 * It also executes the onEnter and onLeave route-hooks
 *
 * @author: raghudevan.s
 * @date  : Nov, 2016
 */
var RouteTemplate =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RouteTemplate, _React$Component);

  function RouteTemplate(props) {
    var _this;

    _classCallCheck(this, RouteTemplate);

    _this = _possibleConstructorReturn(this, (RouteTemplate.__proto__ || Object.getPrototypeOf(RouteTemplate)).call(this, props)); // one splat object per route, also maintains reference

    _initialiseProps.call(_assertThisInitialized(_this));

    _this.splat = {
      history: props.history,
      location: {}
    };
    return _this;
  }

  _createClass(RouteTemplate, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var routePath = ''; //this.props.params.splat;

      if (typeof this.props.onEnter === 'function') {
        // invoke the onEnter hook if it exists
        var redirectPath = this.props.onEnter.call(this, {
          location: _objectSpread({}, location, this.props.location)
        });

        if (typeof redirectPath === 'string') {
          this.props.history.replace(redirectPath);
        }
      }

      if (this.props.routeObject) {
        this.routeObject = this.props.routeObject;
      }

      this.navObj = this.props.getNavObj() || {};
      this.routesConfig = this.props.getRoutes() || [];
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      // navigation complete, so remove the navObj from the state
      this.props.setNavObj();
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var result = (0, _phnxUtils.phnxShouldUpdate)(this.props, nextProps);
      result = result || (0, _phnxUtils.phnxShouldUpdate)(this.state, nextState);
      return result;
    } //Need this to always update the location obj

  }, {
    key: "render",
    value: function render() {
      return this.getComponent(this.props);
    }
  }]);

  return RouteTemplate;
}(_react.default.Component);

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  Object.defineProperty(this, "generateLocationObj", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: function value() {
      return _objectSpread({}, (0, _index.getItemsFromLocation)(location), {
        query: (0, _index.convertSearchToQuery)(location.search)
      }, _this2.props.location);
    }
  });
  Object.defineProperty(this, "getComponent", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: function value() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var toReturn = null;

      var getRoutes = props.getRoutes,
          getNavObj = props.getNavObj,
          setNavObj = props.setNavObj,
          dataObjs = _objectWithoutProperties(props, ["getRoutes", "getNavObj", "setNavObj"]);

      _this2.splat.location = _this2.generateLocationObj();
      var routeProps = {
        navObj: _this2.navObj,
        routesConfig: _this2.routesConfig,
        splat: _this2.splat
      };

      if (_this2.routeObject) {
        toReturn = _react.default.createElement(_this2.routeObject.component, _objectSpread({}, dataObjs, routeProps), _this2.routeObject.routeContent || undefined);
      }

      return toReturn;
    }
  });
};

RouteTemplate.contextTypes = {
  router: _propTypes.default.object
};
RouteTemplate.propTypes = {
  location: _propTypes.default.object,
  history: _propTypes.default.object,
  getRoutes: _propTypes.default.func,
  getNavObj: _propTypes.default.func.isRequired,
  setNavObj: _propTypes.default.func.isRequired,
  routeObject: _propTypes.default.object,
  __appName: _propTypes.default.string.isRequired,
  __appModel: _propTypes.default.object.isRequired
};

function mapAppModel(state, ownProps) {
  return {
    __appModel: state[ownProps.__appName]
  };
}

var _default = (0, _reactRedux.connect)(mapAppModel)(RouteTemplate);

exports.default = _default;