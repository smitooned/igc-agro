"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeReducer;

var _immutable = require("@phoenix/phnx-internal-utils/lib/immutable");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @param  {object} initialState the initial state of the reducer
 * @param  {string} pageName     page name denoting which page the reducer belongs to
 * @return {function}            the reducer function
 */
function makeReducer(initialState, pageName) {
  /**
   * Puts new values into the state based on the targetValueMap
   * @param  {Map}    state          the old state
   * @param  {array}  attrPath       an array describing the path
   * @param  {any}    value          value to be set
   * @param  {object} properties     properties that influence the persistence
   * @return {Map}                   the new state
   */
  function updateData(state, attrPath, value, properties) {
    var oldVal = attrPath.reduce(function (acc, curr) {
      return acc[curr];
    }, state); //Wrapping it in a dummy object, so it takes care of working with different types
    //Properties should only disturb the value traversed by the attrPath

    var newVal = (0, _immutable.mergeDeepKeepLeft)({
      dummy: oldVal
    }, {
      dummy: value
    }, {
      erase: properties.erase,
      concat: properties.concat
    }).dummy;
    var toMerge = attrPath.reduceRight(function (acc, curr) {
      return _defineProperty({}, curr, acc);
    }, newVal); //Here this has to be concat = false, since we don't want arrays at this point to concat
    //It has been handled before when we are calculating newVal
    //Here we just want to update the path defined by attrPath, make sure every other key has the same reference.

    return (0, _immutable.mergeDeepKeepLeft)(state, toMerge, {
      concat: false
    });
  }

  return function reducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments.length > 1 ? arguments[1] : undefined;
    var newState = state;

    if (action.type === 'UPDATE_' + pageName) {
      newState = updateData(state, action.attrPath, action.value, action.properties);
    }

    return newState;
  };
}