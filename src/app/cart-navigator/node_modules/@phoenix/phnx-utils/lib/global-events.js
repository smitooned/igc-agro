"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function Events(obj) {
  this._events = {};
  return Object.assign(this, obj);
}

Events.prototype.on = function (hash, cb) {
  var _this = this;

  if (typeof hash === 'string') {
    if (!Array.isArray(this._events[hash])) {
      this._events[hash] = [];
    }

    if (this._events[hash].indexOf(cb) === -1) this._events[hash].push(cb);
  } else if (_typeof(hash) === 'object') {
    Object.keys(hash).forEach(function (key) {
      _this.on(key, hash[key]);
    });
  }
};

Events.prototype.trigger = function (name) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (Array.isArray(this._events[name])) this._events[name].forEach(function (fn) {
    if (typeof fn === 'function') fn.apply(void 0, args);
  });
};

Events.prototype.off = function (name, cb) {
  if (name && cb) {
    this._events[name] = this._events[name].filter(function (fn) {
      return cb !== fn;
    });
  } else {
    console.error('Specify an event name and listener function to delete');
  }
};

var GlobalEvents = new Events({});
module.exports = GlobalEvents;