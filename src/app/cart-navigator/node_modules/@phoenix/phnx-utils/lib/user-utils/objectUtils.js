"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shallowObjDiff = shallowObjDiff;
exports.deepMergeKeepDefaults = deepMergeKeepDefaults;
Object.defineProperty(exports, "deepMerge", {
  enumerable: true,
  get: function get() {
    return _immutable.mergeDeep;
  }
});

var _index = require("../index");

var _immutable = require("@phoenix/phnx-internal-utils/lib/immutable");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isObj_notArray = function isObj_notArray(a) {
  return _typeof(a) === 'object' && !(a instanceof Array);
};

function shallowObjDiff(a, b) {
  var updatedKeys = [];

  if (a === null || a === undefined || b === null || b === undefined) {
    return {
      status: false,
      result: 'One of them is undefined or null'
    };
  }

  var keyFilter = function keyFilter(item) {
    return _index.frameworkKeysToIgnore.indexOf(item) === -1;
  };

  var aKeys = Object.keys(a).filter(keyFilter);
  var bKeys = Object.keys(b).filter(keyFilter);
  aKeys.forEach(function (item) {
    if (bKeys.indexOf(item) === -1) {
      updatedKeys.push(item + '__deleted');
    } else if (a[item] !== b[item]) {
      if (typeof a[item] === 'function') {
        updatedKeys.push(item + '__FUNCTION_CHANGING_ISSUE');
      } else {
        updatedKeys.push(item + '__modified');
      }
    }
  });
  bKeys.forEach(function (item) {
    if (aKeys.indexOf(item) === -1) {
      updatedKeys.push(item + '__added');
    }
  });
  return {
    status: true,
    result: updatedKeys
  };
}

function deepMergeKeepDefaults(old, new1) {
  var toReturn = {};

  for (var item in old) {
    if (_typeof(new1[item]) !== _typeof(old[item]) || new1[item] === null || isObj_notArray(new1[item]) !== isObj_notArray(old[item])) {
      toReturn[item] = old[item];
    } else if (isObj_notArray(old[item])) {
      toReturn[item] = deepMergeKeepDefaults(old[item], new1[item]);
    } else {
      toReturn[item] = new1[item];
    }
  }

  return toReturn;
}