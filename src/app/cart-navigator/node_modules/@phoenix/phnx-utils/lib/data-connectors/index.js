"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DataConnector;

var _Socket = _interopRequireDefault(require("./Socket"));

var _Rest = _interopRequireDefault(require("./Rest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function DataConnector(type, properties) {
  /*-----------------------------Variables----------------------------------*/
  this.dataConnector = {
    type: type,
    properties: properties
  };
  /*----------------------------API helpers---------------------------------*/

  /**
   * Connects to various sources based on type
   * @param  {string} type       type of connection
   * @param  {object} properties properties for the connection
   * @return {object}            connectionObject
   */

  function connect(type, properties) {
    // TODO: require.ensure here to ensure that we bring just the connection
    // interfaces that we need
    var connection;
    properties.requestParams.type = type; // should i be mutating this object?
    // TODO: need to make this in such a way that we just need to be able to plugin
    // an data connector interface and it'll start working

    if (/REST/i.test(type)) {
      connection = new _Rest.default(properties.requestParams).connect();
    } else if (/SOCKET/i.test(type)) {
      connection = new _Socket.default(properties.requestParams).connect();
    }

    return connection;
  }

  function start(dataConnector) {
    var properties = dataConnector.properties;
    var type = dataConnector.type;

    try {
      var connection = connect(type, properties).registerCallbacks(properties.callbacks); // intentionally re-setting dataConnector

      dataConnector = Object.assign(dataConnector, _objectSpread({}, connection, {
        isConnected: true
      }));
    } catch (e) {
      console.error(e); //eslint-disable-line
    }

    return dataConnector;
  }

  function sendMessage(dataConnector, event, payload) {
    // look up type of connection object and send accordingly
    var isMessageSent = false;

    try {
      if (dataConnector.isConnected) {
        isMessageSent = dataConnector.connection.sendMessage(event, payload) ? true : false;
      }
    } catch (e) {
      // TODO: what to do when unable to send?
      console.error(e); //eslint-disable-line
    }

    return isMessageSent;
  }

  function end(dataConnector) {
    // look up type of connection object and disconnect
    var isDisconnected = false;

    try {
      if (dataConnector.isConnected) {
        isDisconnected = dataConnector.connection.disconnect();
      }
    } catch (e) {
      // TODO: what do we do when unable to disconnect?
      console.error(e); //eslint-disable-line
    }

    dataConnector = Object.assign(dataConnector, {
      isConnected: !isDisconnected
    });
    return dataConnector.isConnected;
  }
  /*----------------------------API helpers---------------------------------*/

  /*------------------------------APIs--------------------------------------*/

  /**
   * Initiate connection with source using properties
   * @param  {string} type       type of connection
   * @param  {object} properties properties for the connection
   * @return {string}            connection id
   */


  DataConnector.prototype.start = start.bind(null, this.dataConnector);
  /**
   * Sends a message on the specified connection with event and payload
   * @param  {number} id      connection id
   * @param  {string} event   event type
   * @param  {object} payload event object
   * @return {bool}           true if message sent
   */

  DataConnector.prototype.sendMessage = sendMessage.bind(null, this.dataConnector);
  /**
   * Terminates the specified connection
   * @param  {number} id connection id
   * @return {bool}      true if terminated successfully
   */

  DataConnector.prototype.end = end.bind(null, this.dataConnector);
  /*------------------------------APIs--------------------------------------*/
}