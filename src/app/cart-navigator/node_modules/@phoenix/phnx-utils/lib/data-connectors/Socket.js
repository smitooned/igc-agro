"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _socket = _interopRequireDefault(require("socket.io-client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WEB_SOCKET = 'WEB_SOCKET';
var SOCKET_IO = 'SOCKET_IO';

var Socket = function Socket(requestParams) {
  var _this = this;

  _classCallCheck(this, Socket);

  Object.defineProperty(this, "connect", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: function value() {
      if (_this.type === WEB_SOCKET) {
        _this.connectionObj = new WebSocket(_this.url); // this can also take options!
      } else if (_this.type === SOCKET_IO) {
        // this should be enabled dynamically so that the socket.io-client
        // is not bundled unless needed
        _this.connectionObj = (0, _socket.default)(_this.url, _this.opts);
      }

      return _this;
    }
  });
  Object.defineProperty(this, "sendMessage", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: function value(event, payload) {
      if (_this.type === WEB_SOCKET) {
        return _this.connectionObj.send(payload);
      } else if (_this.type === SOCKET_IO) {
        return _this.connectionObj.emit(event, payload);
      }
    }
  });
  Object.defineProperty(this, "registerCallbacks", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: function value(callbacks) {
      Object.keys(callbacks).forEach(function (eventType) {
        if (_this.type === WEB_SOCKET) {
          return _this.connectionObj.onmessage = function (event) {
            return callbacks[eventType](event.data);
          };
        } else if (_this.type === SOCKET_IO) {
          return _this.connectionObj.on(eventType, callbacks[eventType]);
        }
      });
      return _this;
    }
  });
  Object.defineProperty(this, "disconnect", {
    configurable: true,
    enumerable: true,
    writable: true,
    value: function value() {
      if (_this.type === WEB_SOCKET) {
        return _this.connectionObj.close(1000, 'wsdiscon');
      } else if (_this.type === SOCKET_IO) {
        return _this.connectionObj.disconnect().disconnected;
      }
    }
  });
  this.type = requestParams.type;
  this.url = requestParams.url;
  this.opts = requestParams.options;
}
/**
 * Connects to the socket server with the url registered at initialization
 * of the object
 * @return {Socket} A reference to a new socket connection
 */
;

exports.default = Socket;