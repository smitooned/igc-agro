/**
 * This file exports the express middleware to be used for oauth integration
 *
 * @author Aftab Khan
 * @date 14-03-2017
 */

var path = require('path');
var packageJSON = require(path.join(process.cwd(), "./package.json"));
var decoder = require('./decoder.js');

/**
 * Express middleware to intercept the request to do the oauth validations
 * @param  {object}   req  Express request object
 * @param  {object}   res  Express response object
 * @param  {Function} next The continue function of express
 */
module.exports = function(req, res, next) {
	var authorization;

	if(req && req.headers && req.headers.authorization
		&& typeof req.headers.authorization === "string"
		&& req.headers.authorization.trim() !== "") {
		authorization = req.headers.authorization.trim();
	} else if(req.query.access_token
		&& typeof req.query.access_token === "string"
		&& req.query.access_token.trim !== "") {
		authorization = req.query.access_token.trim();
	}

	if(authorization) {
		var clientToken = decoder(authorization);
		if(clientToken && clientToken.aud && clientToken.aud instanceof Array && clientToken.aud.some(function(item) {
			return item === packageJSON.PhnxOAuth.resourceID;
		}) /* && check for token expiry */) {
			//Add relevant stuff here to req
			req.phnxSecurityContext = {
				user: (clientToken.sub || clientToken.user_name || "Anonymous"),
				user_full_name: clientToken.full_name || "Anonymous",
				employee_id: clientToken.employee_id || "Anonymous",
				client: clientToken.client_id,
				resources: clientToken.aud,
				authorities: clientToken.authorities,
				scope: clientToken.scope,
				expiration_time: clientToken.exp,
				email: clientToken.email
			};
			next();
		} else {
			res.status(401).send("Invalid client access token");
		}
	} else {
		res.status(401).send("Unauthorized");
	}
}
