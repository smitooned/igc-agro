"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockedRunCallAction = mockedRunCallAction;
exports.initMock = initMock;
exports.resetMock = resetMock;

var _validators = require("@phoenix/phnx-internal-utils/lib/validators");

var _phnxInternalUtils = require("@phoenix/phnx-internal-utils");

var _phnxUtils = require("@phoenix/phnx-utils");

/**
 * This file will contain APIs which will help in testing CALL actions
 * @author Aftab Khan
 * @date 31-10-2017
 */
var expectedMockArray = {
  actionId: {
    isMan: true,
    type: 'string'
  },
  responseToCall: {
    isMan: true,
    type: 'string'
  },
  payload: {
    isMan: true,
    type: 'any'
  },
  properties: {
    isMan: false,
    type: 'object'
  }
};

function mockedRunCallAction(actionObj, actionId, eventObj) {
  var mockObj = global.mocksArray.find(function (item) {
    return item.actionId === actionId;
  });

  if (mockObj) {
    var callbacks = actionObj.response && actionObj.response[mockObj.responseToCall];

    if (callbacks) {
      _phnxUtils.workflowsInvocator.call(this, callbacks, eventObj, mockObj.payload, mockObj.properties);
    } else {
      console.warn('The mocked callback is not defined in the actual action');
    }
  }
}

function initMock(allMocks) {
  if ((0, _phnxInternalUtils.checkType)(allMocks, 'array')) {
    allMocks.forEach(function (item) {
      (0, _validators.validateAll)('Init mock', item, expectedMockArray, 'Mock Object');
    });
    global.mocksArray = allMocks;
  } else if ((0, _phnxInternalUtils.checkType)(allMocks, 'object')) {
    (0, _validators.validateAll)('Init mock', allMocks, expectedMockArray, 'Mock Object');
    global.mocksArray = [allMocks];
  } else {
    throw new TypeError('Expected the arguments to be either Array or Object');
  }
}

function resetMock() {
  global.mocksArray = [];
}