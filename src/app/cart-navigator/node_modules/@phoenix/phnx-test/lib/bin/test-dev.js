#! /usr/bin/env node
"use strict";

var _path = _interopRequireDefault(require("path"));

var _jest = _interopRequireDefault(require("jest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.env.NODE_ENV = '"test"';
process.env.BABEL_ENV = '"test"';
var jestConfig = {
  collectCoverageFrom: ['src/**/*.{js,jsx,phnx}', 'phoenix-npm/**/src/**/*.{js,jsx}'],
  setupFiles: [_path.default.join(__dirname, '../jest-helpers/shim.js'), _path.default.join(__dirname, '../jest-helpers/mocks.js')],
  testMatch: ['<rootDir>/test/**/*.js?(x)', '<rootDir>/src/**/__tests__/**/*.js?(x)', '<rootDir>/src/**/?(*.)(spec|test).js?(x)'],
  // testURL: 'http://localhost',
  testEnvironment: 'jest-env-jsdom-silent',
  transform: {
    '^.+\\.(js|jsx)$': _path.default.join(__dirname, '../jest-helpers/babelJest.js'),
    '^.+\\.phnx$': _path.default.join(__dirname, '../jest-helpers/phnxJest.js'),
    '^.+\\.css$': _path.default.join(__dirname, '../jest-helpers/cssTransform.js'),
    '^(?!.*\\.(js|jsx|css|json)$)': _path.default.join(__dirname, '../jest-helpers/fileTransform.js')
  },
  transformIgnorePatterns: ['[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$'],
  modulePathIgnorePatterns: ['<rootDir>/dist/', '<rootDir>/phoenix-npm/'],
  moduleFileExtensions: ['js', 'json', 'phnx', 'phnxapp', 'phnxdef']
};
var args = process.argv.slice(2);
var configEntry = args.find(function (a) {
  return a.match(/-config=/);
});

if (configEntry) {
  try {
    var configCLI = configEntry.split('=')[1];

    var configJSPath = _path.default.join(process.cwd(), configCLI);

    var config = require(configJSPath) || {};
    var moduleNameMapper = {};
    Object.keys(config.alias || {}).forEach(function (key) {
      moduleNameMapper['^' + key + '(.*)$'] = '<rootDir>/' + config.alias[key] + '$1';
    });
    jestConfig['moduleNameMapper'] = moduleNameMapper; //Handle globals & runtimeConfig

    var globals = config.globals || {};
    globals.__RUNTIME_CONFIG = config.runtimeConfig || {};
    jestConfig['globals'] = globals;
    args = args.filter(function (a) {
      return !a.match(/-config=/);
    });
  } catch (e) {
    throw new TypeError('Config parameter not passed as intended. Pass it as -config=<path-to-config-file>');
  }
}

args = args.concat(['--config', JSON.stringify(jestConfig)]); // Watch unless on CI or in coverage mode

if (args.indexOf('--coverage') < 0) {
  args.push('--watch');
} else {
  args.push('--forceExit');
}

_jest.default.run(args);