#! /usr/bin/env node
"use strict";

var transforms = _interopRequireWildcard(require("../jest-helpers/transformers"));

var _logger = _interopRequireDefault(require("@phoenix/phnx-internal-utils/lib/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Will generate transpiled output of .phnx files so that we can generate coverage
 *
 * @author Aftab Khan
 * @created 11th May, 2017
 */
//This should change to apply phnxAST before applying loader
var fs = require('fs-extra');

var config = {
  srcDir: process.cwd() + '/src',
  outDir: process.cwd() + '/dest',
  recursive: true
};

function recursiveFileParsing(path) {
  fs.readdirSync(config.srcDir + path).forEach(function (item) {
    var stat = fs.statSync(config.srcDir + path + '/' + item);

    if (stat.isDirectory()) {
      config.recursive && recursiveFileParsing(path + '/' + item);
    } else {
      try {
        fs.mkdirsSync(config.outDir + path);
      } catch (e) {//Cannot create dirs
      }

      var json = fs.readFileSync(config.srcDir + path + '/' + item, 'utf8');

      try {
        if (item.endsWith('phnx')) {
          fs.writeFileSync(config.outDir + path + '/' + item, transforms.transformJustPhnx(json), 'utf8');
        } else if (item.endsWith('phnxapp')) {
          fs.writeFileSync(config.outDir + path + '/' + item, transforms.transformPhnxApp(json), 'utf8');
        } else if (item.endsWith('phnxdef')) {
          fs.writeFileSync(config.outDir + path + '/' + item, transforms.transformPhnxDef(json), 'utf8');
        } else {
          fs.writeFileSync(config.outDir + path + '/' + item, json, 'utf8');
        }
      } catch (e) {
        _logger.default.error('Error occurred while transpiling phnx file', {
          path: path,
          Stack: e.stack || e
        });

        fs.writeFileSync(config.outDir + path + '/' + item, json, 'utf8');
      }
    }
  });

  _logger.default.info('completed migrating components', {
    output: config.srcDir + path
  });
}

try {
  recursiveFileParsing('');
} catch (e) {
  _logger.default.error('migration failed. Following error has occurred', {
    Stack: e.stack || e
  });
}