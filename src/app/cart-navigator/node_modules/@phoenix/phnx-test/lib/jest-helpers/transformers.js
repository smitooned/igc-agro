"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformPhnx = transformPhnx;
exports.transformJustPhnx = transformJustPhnx;
exports.transformPhnxApp = transformPhnxApp;
exports.transformPhnxDef = transformPhnxDef;

var _phnxLoader = _interopRequireDefault(require("@phoenix/phnx-loader"));

var _phnxAppLoader = _interopRequireDefault(require("@phoenix/phnx-loader/lib/phnxAppLoader"));

var _phnxDefLoader = _interopRequireDefault(require("@phoenix/phnx-loader/lib/phnxDefLoader"));

var _core = require("@babel/core");

var _webpackConfig = require("@phoenix/phnx-tools/lib/webpack.config.js");

var _babelConfig = _interopRequireDefault(require("@phoenix/phnx-tools/lib/babelConfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This file will have functions which will transform some piece of code
 * into transpiled output into the ES5 code
 *
 * @author Aftab Khan
 * @date 14-Sept-2017
 */
var NativeModule = require('module');

var mockContext = {
  //webpack/lib/NormalModule.js -> createLoaderContext
  exec: function exec(code, filename) {
    var module = new NativeModule(filename, this);
    module.filename = filename;

    module._compile(code, filename);

    return module.exports;
  },
  resourcePath: 'Phoenix_on_Client'
};

function transformPhnx(source) {
  return (0, _core.transform)(transformJustPhnx(source), _babelConfig.default).code;
}

function transformJustPhnx(source) {
  var jestTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var _transform = (0, _core.transform)(source, _webpackConfig.prePhnxBabelConf),
      code = _transform.code;

  return _phnxLoader.default.call(mockContext, code, null, jestTransform);
}

function transformPhnxApp(source) {
  var jsCode = _phnxAppLoader.default.call(mockContext, source);

  return (0, _core.transform)(jsCode, _babelConfig.default).code;
}

function transformPhnxDef(source) {
  var jsCode = _phnxDefLoader.default.call(mockContext, source);

  return (0, _core.transform)(jsCode, _babelConfig.default).code;
}