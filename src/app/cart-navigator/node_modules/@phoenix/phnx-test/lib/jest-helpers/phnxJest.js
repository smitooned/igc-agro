"use strict";

var _babelPresetJest = _interopRequireDefault(require("babel-preset-jest"));

var _core = require("@babel/core");

var _babelPluginIstanbul = _interopRequireDefault(require("babel-plugin-istanbul"));

var _transformers = require("./transformers");

var _babelConfig = _interopRequireDefault(require("@phoenix/phnx-tools/lib/babelConfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelOpts = Object.assign({}, _babelConfig.default, {
  plugins: _babelConfig.default && _babelConfig.default.plugins || [],
  presets: (_babelConfig.default && _babelConfig.default.presets || []).concat([_babelPresetJest.default]),
  retainLines: true,
  sourceMaps: 'inline'
});
module.exports = {
  process: function process(src, filename, config, transformOptions) {
    src = (0, _transformers.transformJustPhnx)(src, true);
    var finalOpts = Object.assign({
      filename: filename
    }, babelOpts);

    if (transformOptions && transformOptions.instrument) {
      finalOpts.auxiliaryCommentBefore = ' istanbul ignore next '; // Copied from jest-runtime transform.js

      finalOpts.plugins = finalOpts.plugins.concat([[_babelPluginIstanbul.default, {
        cwd: config.rootDir,
        exclude: []
      }]]);
    } // babel v7 might return null in the case when the file has been ignored.


    var transformResult = (0, _core.transform)(src, finalOpts);
    return transformResult ? transformResult.code : src;
  },
  canInstrument: true
};