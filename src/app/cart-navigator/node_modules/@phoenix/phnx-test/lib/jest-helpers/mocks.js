"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _configureStore = _interopRequireDefault(require("@phoenix/phnx-utils/lib/store/configureStore"));

var _dataManager = _interopRequireDefault(require("@phoenix/phnx-utils/lib/data-manager"));

var _mockCallActions = require("../mock-call-actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* -------- Enzyme Config ----------*/
(0, _enzyme.configure)({
  adapter: new _enzymeAdapterReact.default()
});
/* -------- Mock the localStorage --------- */

function mockStorages() {
  var store = {};
  return {
    getItem: function getItem(key) {
      return store[key] || null;
    },
    setItem: function setItem(key, value) {
      store[key] = value.toString();
    },
    removeItem: function removeItem(key) {
      delete store[key];
    },
    clear: function clear() {
      store = {};
    }
  };
}

var localStorageMock = mockStorages();
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
});
var sessionStorageMock = mockStorages();
Object.defineProperty(window, 'sessionStorage', {
  value: sessionStorageMock
});
/* -------- Runtime Config -------------- */

Object.defineProperty(window, 'runtimeConfig', {
  value: __RUNTIME_CONFIG
});
/* -------- initialize index.phnxapp --------- */

(0, _configureStore.default)();
/* -------- Other mocks needed ---------- */

global.GlobalEvents = require('@phoenix/phnx-utils/lib/global-events');

var frameworkUtils = require('@phoenix/phnx-utils');

frameworkUtils.runCallAction = _mockCallActions.mockedRunCallAction;
global.mocksArray = [];

var dynRouting = require('@phoenix/phnx-utils/lib/dynamic-routing');

dynRouting.navigateTo = jest.fn();

dynRouting.RouteLink = function () {
  return 'This is Link';
};