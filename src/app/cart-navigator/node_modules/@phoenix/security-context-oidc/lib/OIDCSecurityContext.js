'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _SecurityContext2 = require('./SecurityContext');

var _SecurityContext3 = _interopRequireDefault(_SecurityContext2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var jwt = require('jwt-simple');
var accessTokenDecoded = void 0;

var getCookie = function getCookie(cname) {
	var name = cname + "=";
	var decodedCookie = decodeURIComponent(document.cookie);
	var ca = decodedCookie.split(';');
	for (var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ') {
			c = c.substring(1);
		}
		if (c.indexOf(name) == 0) {
			return c.substring(name.length, c.length);
		}
	}
	return "";
};

var getUrlParam = function getUrlParam(url, name) {
	if (!url) url = location.href;
	name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
	var regexS = "[\\?&]" + name + "=([^&#]*)";
	var regex = new RegExp(regexS);
	var results = regex.exec(url);
	return results == null ? null : results[1];
};

var OIDCSecurityContext = function (_SecurityContext) {
	_inherits(OIDCSecurityContext, _SecurityContext);

	//options should contain the following
	/**
  * {
  *  appname: The name of the client application. This will be used to store the accesstoken in session storage,
  *  phoenixServicesBaseUrl: The base url of the phoenix services. If phoenix oauth is not used, this is not needed.
  *  appBaseUrl: The base url of the client application.
  *  appbasePath: The base path of the client application.
  *
  *  The other options are
  *  oauthTokenUrl: The url to get the token
  *  validateUrl: The url to check the token
  *  logoutUrl: The logout url which the application will be redirected to when logout function is called
  */
	function OIDCSecurityContext(options) {
		_classCallCheck(this, OIDCSecurityContext);

		var _this = _possibleConstructorReturn(this, (OIDCSecurityContext.__proto__ || Object.getPrototypeOf(OIDCSecurityContext)).call(this, options.defaultUsername));

		_this.phoenixServicesBaseUrl = options.phoenixServicesBaseUrl;
		_this.appBaseUrl = options.appBaseUrl;
		_this.appBasePath = options.appBasePath;
		_this.accessTokenName = options.appname + "_access_token";
		_this.idTokenName = options.appname + "_id_token";

		var completeAppUrl = _this.appBaseUrl.replace(/\/+$/, "") + "/" + _this.appBasePath.replace(/(^\/+|\/$)/, "") + "/";

		//Additional Options
		_this.oauthServiceProxy = options.oauthServiceProxy || "/oauth-service";
		_this.oauthTokenUrl = options.oauthTokenUrl || _this.phoenixServicesBaseUrl.replace(/\/+$/, "") + _this.oauthServiceProxy + "/oauth/token";
		_this.validateUrl = options.validateUrl || _this.phoenixServicesBaseUrl.replace(/\/+$/, "") + _this.oauthServiceProxy + "/oauth/check_token";
		_this.loginUrl = options.loginUrl || completeAppUrl + "/auth/login";
		_this.logoutUrl = options.logoutUrl || _this.phoenixServicesBaseUrl.replace(/\/+$/, "") + _this.oauthServiceProxy + "/logout?redirectUrl=" + completeAppUrl;

		_this._accessToken = "";
		_this._idToken = "";
		_this.validataionFunctions = [];

		if (window.localStorage) {
			var token = window.localStorage.getItem(_this.accessTokenName);
			if (token && token.trim() != "") {
				_this.validateAndSetUsername(token);
				if (_this.isAuthenticated) {
					_this.accessToken = token;
				}
			}
		}
		_this.current = 0;
		return _this;
	}

	_createClass(OIDCSecurityContext, [{
		key: 'attachValidation',
		value: function attachValidation(func) {
			if (Array.isArray(func)) {
				var _validationFunctions;

				(_validationFunctions = this.validationFunctions).push.apply(_validationFunctions, _toConsumableArray(func));
			} else {
				this.validationFunctions.push(func);
			}
		}
	}, {
		key: 'validate',
		value: function validate() {
			if (this.current < this.validataionFunctions.length) {
				this.validataionFunctions[this.current].call(this, Object.assign({}, accessTokenDecoded));
				this.current++;
				this.validate();
			}

			if (this.current && this.current == this.validataionFunctions.length) {
				this.current = 0;
			}
		}

		//Sets the isAuthenticated boolean and the username

	}, {
		key: 'validateAndSetUsername',
		value: function validateAndSetUsername(token) {
			//logic to validate

			if (navigator.onLine) {
				if (token) {
					var decoded = jwt.decode(token, null, true);
					if (decoded.exp && Date.now() < decoded.exp * 1000) {
						this.isAuthenticated = true;
						var sub = decoded.sub.includes('@') ? decoded.sub.split('@')[0] : decoded.sub;
						this.username = decoded.sub.toLowerCase();
						this.fullname = decoded.name || sub;
					}
				}
			} else {
				var user = getCookie("phnxUsername");
				this.username = user ? user : localStorage.username;
				this.isAuthenticated = true;
			}
		}
	}, {
		key: 'cookieValidation',
		value: function cookieValidation(data) {
			var cookieUsername = getCookie("phnxUsername");
			this.isAuthenticated = cookieUsername === this.username;
		}
	}, {
		key: 'redirect',
		value: function redirect() {
			//redirecting to the oauth login url
			if (!this.isAuthenticated) window.location.href = this.loginUrl;
		}
	}, {
		key: 'verifyToken',
		value: function verifyToken() {
			var location = window.location.href;
			var path = location.split("?");

			var host = window.location.protocol + "//" + window.location.host;

			var query = path[1];

			if (query != null && query.trim() != "" && query.includes("token")) {
				var id_token = getUrlParam(location, 'access_token');
				var access_token = getUrlParam(location, 'id_token');
				if (access_token != null && access_token.trim() != "") {
					this.validateAndSetUsername(access_token);
					if (this.isAuthenticated) {
						this.accessToken = access_token;
						this.idToken = id_token;
					}

					window.history.pushState("", "", path[0].replace(host, ""));
				}
			}
		}
	}, {
		key: 'logout',
		value: function logout() {
			_get(OIDCSecurityContext.prototype.__proto__ || Object.getPrototypeOf(OIDCSecurityContext.prototype), 'logout', this).call(this);
			this.accessToken = "";
			this.idToken = "";
			localStorage.removeItem(this.accessTokenName);
			localStorage.removeItem(this.idTokenName);
			window.location.assign(this.logoutUrl);
		}
	}, {
		key: 'reload',
		value: function reload() {
			window.location.reload();
		}
	}, {
		key: 'accessToken',
		set: function set(token) {
			localStorage.setItem(this.accessTokenName, token);
		},
		get: function get() {
			return localStorage.getItem(this.accessTokenName);
		}
	}, {
		key: 'idToken',
		set: function set(token) {
			localStorage.setItem(this.idTokenName, token);
		},
		get: function get() {
			return localStorage.getItem(this.idTokenName);
		}
	}, {
		key: 'tokenInfo',
		get: function get() {
			return accessTokenDecoded;
		}
	}, {
		key: 'isAuthenticated',
		get: function get() {
			this.validate();
			return _get(OIDCSecurityContext.prototype.__proto__ || Object.getPrototypeOf(OIDCSecurityContext.prototype), 'isAuthenticated', this);
		},
		set: function set(bool) {
			_set(OIDCSecurityContext.prototype.__proto__ || Object.getPrototypeOf(OIDCSecurityContext.prototype), 'isAuthenticated', bool, this);
		}
	}]);

	return OIDCSecurityContext;
}(_SecurityContext3.default);

exports.default = OIDCSecurityContext;