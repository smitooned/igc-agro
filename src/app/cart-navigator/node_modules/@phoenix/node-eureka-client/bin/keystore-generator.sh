#!/bin/bash
#Script to generate a p12 file with a given hostname

# Function definitions - start
trap "exit 1" TERM
export TOP_PID=$$
check_validity(){
    if [ -z "$1" ]; then
        write 1 "$2"
        kill -s TERM $TOP_PID
    fi
}

# param1 - color (0-Black, 1-Red, 2-Green, 3-Yellow, 4-Blue, 5-Magenta, 6-Cyan, 7-White)[0-7]
# param2 - message
write(){
    if [[ $1 =~ ^[0-9]$ ]]; then
        # color is specified
        local color=$1
        local message=$2
    else
        # color is not specified
        local color=7
        local message=$1
    fi

    if [ "$3" = "-sl" ]; then
        echo -ne "$(tput bold)$(tput setaf $color)$message$(tput sgr0)"
    else
        echo "$(tput bold)$(tput setaf $color)$message$(tput sgr0)"
    fi
}

get_from(){
    echo $1 | grep -Po \""$2"\"':"\K[^"]*'
}

#varname, default
get_default(){
    local varname=$1
    if [ -z "${!varname}" ]; then
        echo "$2"
    else
        echo "${!varname}"
    fi
}
# Function definitions - end

# user=Raghudevan.S
# pass=Raghudevan@5253
# ip=1.1.1.1
# check for all arguments
while test $# -gt 0; do
    case "$1" in
        -h|--help)
            write "------------------------------------------------------------"
            write "This shell script will help you generate a keystore that"
            write "you can use to register your application with the eureka server"
            write "    -h  |--help                          show help"
            write "    -ns |--no-secure                     when you want to see the password you type in interactive mode"
            write "    -ni |--no-interactive                when you want to specify all the inputs via cli"
            write "    -u  |--username                      specify the username"
            write "    -p  |--password                      specify the password"
            write "    -ip |--hostname                      specify the hostname/ip address"
            write "    -kf |--keystore-file(optional)       specify the path the keystore file"
            write "    -oep|--oauth-endpoint(optional)      specify the oauth end point"
            write "    -kep|--keystore-endpoint(optional)   specify the keystore end point"
            write "------------------------------------------------------------"
            exit 0
            ;;
        -u|--username)
            shift
            export user="$1"
            shift
            ;;
        -p|--password)
            shift
            export pass="$1"
            shift
            ;;
        -ip|--hostname)
            shift
            export ip="$1"
            shift
            ;;
        -kf|--keystore-file)
            shift
            export keystore_file_name="$1"
            shift
            ;;
        -oep|--oauth-endpoint)
            shift
            export oauth_endpoint="$1"
            shift
            ;;
        -kep|--keystore-endpoint)
            shift
            export keystore_endpoint="$1"
            shift
            ;;
        -ns|--no-secure)
            shift
            export nosecure="-no-secure"
            ;;
        -ni|--no-interactive)
            shift
            export nointeractive="-no-interactive"
            export display_pass="***"
            ;;
        *)
            write 1 "some unexpected cli argument!"
            break
            ;;
    esac
done

write 6 "-------------Keystore Generator-------------"
write ""

if [ -z "$nointeractive" ]; then

    if [ -z "$user" ]; then
        write 5 "LDAP Username: " -sl
        read user
    fi

    if [ -z "$pass" ]; then
        write 5 "LDAP Password: " -sl
        if [ -n "$nosecure" ]; then
            read pass
            display_pass=$pass
        else
            read -s pass
            display_pass="***"
            write ""
        fi
    fi

    if [ -z "$ip" ]; then
        write 5 "Common name for the certificate (host name or ip address): " -sl
        read ip
    fi

    write 5 "keystore file(keystore.p12): " -sl
    read keystore_file_name

    write 5 "OAUTH end point(qa): " -sl
    read oauth_endpoint

    write 5 "Keystore end point(qa): " -sl
    read keystore_endpoint

    write ""
fi

# default to the dev end point
oauth_endpoint=$(get_default oauth_endpoint \
    "https://qa.ird.mu-sigma.com/phoenix/auth-service/oauth/token")

# default to the dev endpoint
keystore_endpoint=$(get_default keystore_endpoint \
    "https://qa.ird.mu-sigma.com/keystore-generator/generate")

# default to keystore.p12
keystore_file_name=$(get_default keystore_file_name \
    "keystore.p12")

keystore_file_name=$(readlink -f `pwd`"/$keystore_file_name")

check_validity "$user" "Username cannot be left empty"
check_validity "$pass" "Password cannot be left empty"
check_validity "$ip" "Hostname(ip) cannot be left empty"

write 4 "------------Credentials Used-------------"
write 4 "Username     : "$user
write 4 "Password     : "$display_pass
write 4 "Hostname     : "$ip
write 4 "oauth        : "$oauth_endpoint
write 4 "keystore     : "$keystore_endpoint
write 4 "keystore file: "$keystore_file_name
write 4 "-----------------------------------------"
write ""


# remove the old keystore
rm $keystore_file_name
# curl -o $keystore_file_name \
#     "$keystore_endpoint/$ip/" \
#     --header "Authorization: Bearer $token"
curl -o $keystore_file_name \
    "$keystore_endpoint/$ip/?username=$user&password=$pass"
write ""

# read the keystore from the file, to check if it is proper
keystore=$(cat $keystore_file_name 2>/dev/null)

error=$(get_from "$keystore" error)

if [ -n "$error" ]; then
    message=$(get_from "$keystore" message)
    error_description=$(get_from "$keystore" error_description)

    write 1 "Unable to generate keystore: $message $error_description"
elif [ -n "$keystore" ];then
    # write some crap into the keystore file
    exit_code=$(keytool -list -keystore $keystore_file_name -storepass musigma123 > /dev/null 2>&1 || echo "$?" && echo "$?")

    if [ $exit_code -ne 0 ]; then
        write 1 "Uh oh! Looks like someone has messed up the service that makes the keystore, this should not have happened! Communicate this to the Phoenix team please :)"
    else
        # no error and keystore is populated
        write 2 "Keystore has been generated at " -sl
        write 3 $keystore_file_name
    fi
else
    write 1 "Uh oh! We're unable to connect to " -sl
    write 3 "$keystore_endpoint"
    write 1 "(check if you're connected to the network)"
fi