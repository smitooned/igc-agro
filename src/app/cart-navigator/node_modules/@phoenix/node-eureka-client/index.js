'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

exports._validateOptions = _validateOptions;

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

var _eurekaJsClient = require('eureka-js-client');

var _eurekaJsClient2 = _interopRequireDefault(_eurekaJsClient);

var _death = require('death');

var _death2 = _interopRequireDefault(_death);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import sslRoot from 'ssl-root-cas/latest';

var optionsValidator = {
    ip: "string",
    port: "number",
    name: "string",
    infoRoute: "string",
    listeners: "object",
    instance: "object",
    eureka: "object"
};

var KILL = false;

// sslRoot.inject().addFile(__dirname + '/phoenixCA.crt');

/**
 * Validates the options object used to configure the client-server connection
 * @param  {object} options object which configures the connection to the eureka server
 * @return {object}         an object which contains the errors, options; errors is an array of errors
 */
function _validateOptions(options, optionsValidator) {
    var errors = [];
    Object.keys(optionsValidator).forEach(function (optionKey) {
        switch (optionsValidator[optionKey]) {
            case "string":
            case "number":
                {
                    if ((0, _typeof3.default)(options[optionKey]) !== optionsValidator[optionKey]) {
                        errors.push('Expected ' + optionKey + ' to be of type ' + optionsValidator[optionKey]);
                    }
                    break;
                }
            case "object":
                {
                    if (options[optionKey] === undefined) {
                        options[optionKey] = {};
                    } else if ((0, _typeof3.default)(options[optionKey]) !== optionsValidator[optionKey] || Array.isArray(options[optionKey])) {
                        errors.push('Expected ' + optionKey + ' to be of type object');
                    }
                }
            default:
                {
                    // dont need to do anything here the cases cover all scenarios
                    break;
                }
        }
    });

    return { errors: errors, options: options };
}

/**
 * Registers the node application as a eureka client
 * @param  {object} options object which configures connection to the eureka server
 * @return {client}         eureka client object
 */

exports.default = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(options) {
        var postValidation, IP, PORT, NAME, INFO_ROUTE, LISTENERS, INSTANCE, EUREKA, toWrap, newListeners, listenersToUse, eureka, instance, client;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        postValidation = _validateOptions(options, optionsValidator);

                        if (!postValidation.errors.length) {
                            _context.next = 4;
                            break;
                        }

                        console.log((postValidation.errors.join('\n\n') + "").red);
                        return _context.abrupt('return');

                    case 4:

                        options = postValidation.options;
                        IP = options.ip;
                        PORT = options.port;
                        NAME = options.name;
                        INFO_ROUTE = options.infoRoute.replace(/^\/*/, "");
                        LISTENERS = options.listeners;
                        INSTANCE = options.instance;
                        EUREKA = options.eureka;

                        // want to wrap these methods with some functionality - logging something

                        toWrap = ['started', 'registered', 'deregistered'];
                        newListeners = {};

                        toWrap.forEach(function (wrap) {
                            newListeners[wrap] = function () {
                                if (wrap === 'deregistered' && KILL) {
                                    process.exit();
                                } else {
                                    console.log(('Eureka client ' + wrap).green);
                                }
                                typeof LISTENERS[wrap] === "function" && LISTENERS[wrap]();
                            };
                        });

                        // this will override the old listeners
                        listenersToUse = Object.assign({}, LISTENERS, newListeners);


                        console.log('connecting to eureka server'.yellow);
                        eureka = Object.assign({
                            servicePath: options.servicePath || '/eureka/apps/',
                            serviceUrls: {
                                default: [options.eurekaXML || 'https://dev.ird.mu-sigma.com/eureka/apps/']
                            }
                        }, options.eureka);
                        instance = Object.assign(options.instance, {
                            app: NAME,
                            instanceId: IP + ':' + NAME + ':' + PORT,
                            hostName: IP,
                            ipAddr: IP,
                            securePort: {
                                '$': PORT,
                                '@enabled': true
                            },
                            port: {
                                '$': PORT,
                                '@enabled': true
                            },
                            statusPageUrl: 'https://' + IP + ':' + PORT + '/' + INFO_ROUTE,
                            vipAddress: NAME,
                            secureVipAddress: NAME,
                            dataCenterInfo: {
                                '@class': 'com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo',
                                name: 'MyOwn'
                            }
                        });
                        // ignored requestMiddleware and logger

                        client = new _eurekaJsClient2.default({ instance: instance, eureka: eureka });

                        // take the listeners from the user

                        Object.keys(listenersToUse).forEach(function (listener) {
                            client.addListener(listener, listenersToUse[listener]);
                        });

                        _context.next = 23;
                        return new Promise(function (resolve, reject) {
                            client.start(function (err) {
                                for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                                    rest[_key - 1] = arguments[_key];
                                }

                                if (err) {
                                    reject(err);
                                }

                                resolve(rest);
                            });
                        });

                    case 23:

                        (0, _death2.default)(function (signal, err) {
                            console.log('Stop signal received! Deregistering with eureka before killing process.'.red);
                            client.config.eureka.maxRetries = 0;

                            // SIGINT  - Ctrl + c
                            // SIGQUIT - Ctrl + /
                            // SIGTERM - kill pid
                            if (signal === 'SIGINT' || signal === 'SIGQUIT' || signal === 'SIGTERM') {
                                //Set the kill flag. Process will exit when deregistration completes successfully.
                                KILL = true;
                                client.stop(function () {
                                    console.log('Deregisteration failed. Killing regardless'.red);
                                    //This will be triggered when deregistration fails
                                    process.exit();
                                });
                            }
                        });

                        return _context.abrupt('return', client);

                    case 25:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    function startEurekaClient(_x) {
        return _ref.apply(this, arguments);
    }

    return startEurekaClient;
}();
