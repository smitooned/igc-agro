'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var winston = require('winston');
var amqpLogger = require('./amqpLogger').AMQP;
var httpLogger = require("./httpLogger");

var PhoenixLogger = function () {
	function PhoenixLogger(options) {
		var _this = this;

		_classCallCheck(this, PhoenixLogger);

		//Default winston configuration
		this._logger = new winston.Logger({ colors: { error: 'red', warn: 'yellow', info: 'green', verbose: 'orange', debug: 'blue', silly: 'white' } });
		this._logger.add(winston.transports.Console, { colorize: true, level: 'silly' });
		options = options || [];
		options.forEach(function (item) {
			var key;
			var transportOptions;
			if (typeof item === 'string') {
				key = item;
			} else {
				key = item.name;
				transportOptions = item.options;
			}

			switch (key) {
				case 'https':
					{
						_this._logger.add(httpLogger, transportOptions || {});
						break;
					}
				case 'amqp':
					{
						_this._logger.add(amqpLogger, transportOptions || {});
						break;
					}
				case 'console':
					{
						_this._logger.remove(winston.transports.Console);
						_this._logger.add(winston.transports.Console, transportOptions || {});
						break;
					}
				default:
					{
						break;
					}
			}
		});
	}

	_createClass(PhoenixLogger, [{
		key: 'instance',
		get: function get() {
			return this._logger;
		}
	}]);

	return PhoenixLogger;
}();

module.exports = PhoenixLogger;
