 var util = require('util'),
      winston = require('winston');
var http = require('https');

  var httpLogger = winston.transports.httpLogger = function (options) {
    //
    // Name this logger
    //
    this.name = 'httpLogger';

    //
    // Set the level from your options
    //
    this.level = options.level || 'silly';
    this.logPath = options.logPath || '/phoenix/logging-service-debug/addLogs/postHttp/';
    this.appName = options.appName || 'nodeApp';
    // this.level = 'info';

    //
    // Configure your storage backing as you see fit
    //
  };

  //
  // Inherit from `winston.Transport` so you can take advantage
  // of the base functionality and `.handleExceptions()`.
  //
  util.inherits(httpLogger, winston.Transport);

  httpLogger.prototype.log = function (level, msg, meta, callback) {
    //
    // Store this message and metadata, maybe use some custom logic
    // then callback indicating success.
    //
    var options = {
      host: 'qa.ird.mu-sigma.com',
      path: this.logPath,
      // path: '/phoenix/logging-service-debug/addLogs/postHttp/',
      //since we are listening on a custom port, we need to specify it by hand
      port: '443',
      //This is what changes the request to a POST request
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      // console.log(`STATUS: ${res.statusCode}`);
      // console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
      res.setEncoding('utf8');
      res.on('data', (chunk) => {
        // console.log(`BODY: ${chunk}`);
      });
      res.on('end', () => {
        // console.log('No more data in response.');
      });
    });

    req.on('error', (e) => {
      console.error(`problem with request: ${e.message}`, e);
    });

    // write data to request body
    logMessage = {'logMethod': 'HTTPS', 'serviceName': this.appName, 'level': level.toUpperCase(), 'message': msg}
    req.write(JSON.stringify(Object.assign(logMessage,meta)));
    req.end();
    callback(null, true);
  };

  module.exports = httpLogger;