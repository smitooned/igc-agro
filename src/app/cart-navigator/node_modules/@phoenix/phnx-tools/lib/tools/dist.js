"use strict";

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _express = _interopRequireDefault(require("express"));

var _connectHistoryApiFallback = _interopRequireDefault(require("connect-history-api-fallback"));

var _path = _interopRequireDefault(require("path"));

var _runtimeUtils = require("./runtime-utils");

var _logger = _interopRequireDefault(require("@phoenix/phnx-internal-utils/lib/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Has methods to start the dist server.
 *
 * @author: Raghudevan S
 * @date: Dec, 2016
 */
var runtimeConfigReplace = /\/\*PHNX_RUNTIME_CONFIG\*\/[\s\S]*\/\*PHNX_RUNTIME_CONFIG_END\*\//i;

var htmlFile = _path.default.join(__dirname, 'index.html');

var options = (0, _runtimeUtils.getOptions)(process.argv); //Update the runtime config

try {
  var htmlContent = _fsExtra.default.readFileSync(htmlFile, 'utf8');

  htmlContent = htmlContent.replace(runtimeConfigReplace, "/*PHNX_RUNTIME_CONFIG*/\nObject.defineProperty(window, 'runtimeConfig', {value:Object.freeze(".concat(JSON.stringify(options.runtimeConfig, null, 4), "),writable:false});\n/*PHNX_RUNTIME_CONFIG_END*/"));

  _fsExtra.default.writeFileSync(htmlFile, htmlContent, 'utf8');
} catch (e) {
  console.warn('\nUnable to update the runtime config', e);
}

if (typeof options.server.entry === 'string') {
  // get the function returned by the file @entry
  options.server.entry = (0, _runtimeUtils.getEntry)(_path.default.join(process.cwd(), options.server.entry));
} // here the fallback must be the last middleware registered
// else in dev, the fallback will not work correctly


options.middlewares = [(0, _connectHistoryApiFallback.default)(), [options.basepath, _express.default.static(__dirname)], _express.default.static(__dirname)];
(0, _runtimeUtils.startServer)(options);