#! /usr/bin/env node
"use strict";

var _webpack = _interopRequireDefault(require("webpack"));

var _connectHistoryApiFallback = _interopRequireDefault(require("connect-history-api-fallback"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _path = _interopRequireDefault(require("path"));

var _webpack2 = _interopRequireDefault(require("../webpack.config"));

var _runtimeUtils = require("../tools/runtime-utils");

var _compilationUtils = require("../tools/compilation-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This script will build the application and then host it according to
 * the configurations specified in config.js
 *
 * @author: Raghudevan S
 * @date: Dec, 2016
 */
var env = 'development';
process.env.NODE_ENV = JSON.stringify(env);
process.env.BABEL_ENV = JSON.stringify(env);
var tmpDir = '/phnx-tmp-server';
var options = (0, _runtimeUtils.getOptions)(process.argv);
options.env = env;
var projRoot = process.cwd();
(0, _compilationUtils.removeDir)(_path.default.join(projRoot, tmpDir));

if (typeof options.server.entry === 'string') {
  // transpile the server files into some temp location
  (0, _compilationUtils.transpile)(options.server.entry, _path.default.join(projRoot, tmpDir)); // set options.server.entry with the function defn

  options.server.entry = (0, _runtimeUtils.getEntry)(_path.default.join(projRoot, tmpDir));
}

var webpackConfig = (0, _webpack2.default)(env, options);
var bundler = (0, _webpack.default)(webpackConfig); // To see the module building info, set chunks, chunkModules, cached to true

var middleware = (0, _webpackDevMiddleware.default)(bundler, {
  publicPath: webpackConfig.output.publicPath,
  logLevel: 'info',
  stats: {
    //https://webpack.js.org/configuration/stats/
    cachedAssets: false,
    children: false,
    chunks: false,
    chunkModules: false,
    chunkOrigins: false,
    performance: false,
    colors: true,
    hash: false,
    modules: false,
    reasons: false,
    source: false,
    version: true,
    warnings: true
  }
});
options.middlewares = [(0, _connectHistoryApiFallback.default)(), middleware, (0, _webpackHotMiddleware.default)(bundler)];
(0, _runtimeUtils.startServer)(options);