"use strict";

/**
 * Loader to resolve prefixes inside the phnxdef files
 * @param  {string} source Source string
 * @return {string}        Parsed source
 * @author Aftab Khan
 * @date 17-01-2017
 */

/**
 * This is to parse the prefixes that the user may write in the extensible definition
 * @param  {string} evalString Source
 * @return {string}            Parsed Source
 */
function resolvePrefixes(evalString) {
  var ret_str = evalString;

  if (ret_str.search(/(__utils__|__appModel__|__fn__|__prop__|__wf__|__lvar__)/) !== -1) {
    ret_str = ret_str.replace(/__wf__/g, 'this.wf_');
    ret_str = ret_str.replace(/__lvar__\b/g, 'this.__localVars');
    ret_str = ret_str.replace(/__evar__\b/g, 'this.__localProps'); //FUTURE: Make sure any function from utils is a function call NOT ASSIGNMENT

    ret_str = ret_str.replace(/__utils__RouteLink/g, 'phnxUtils.RouteLink');
    ret_str = ret_str.replace(/__utils__([A-Za-z0-9_]+)\s*\(\s*\)/g, 'phnxUtils.$1.call(this)');
    ret_str = ret_str.replace(/__utils__([A-Za-z0-9_]+)\s*\(/g, 'phnxUtils.$1.call(this, ');
    ret_str = ret_str.replace(/__fn__\b/g, 'this');
    ret_str = ret_str.replace(/__fn__/g, 'this.');
    ret_str = ret_str.replace(/__prop__\b/g, 'this.props');
    ret_str = ret_str.replace(/__prop__/g, 'this.props.');
    ret_str = ret_str.replace(/__appModel__\b/g, 'this.props.__appModel');
    ret_str = ret_str.replace(/__appModel__/g, 'this.props.__appModel.');
  }

  return ret_str;
}

function phnxDefLoader(source) {
  var ret_str = resolvePrefixes(source);
  ret_str = "import * as phnxUtils from '@phoenix/phnx-utils/lib/user-utils/frameworkUtils';\n" + ret_str;
  return ret_str;
}

module.exports = phnxDefLoader;