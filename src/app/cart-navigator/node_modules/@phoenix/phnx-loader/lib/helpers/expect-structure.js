"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateStructure;

var _validators = require("@phoenix/phnx-internal-utils/lib/validators");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* ------------- Where constants ---------------*/
var RLA = 'Root level attributes';
var DCN = 'Data Connections';
var DCP = 'Data Connections Request Parameters';
var IMP = 'Imports';
var MODIMP = 'moduleImports';
var VAR = 'Variables';
var ACT = 'Actions';
var EVH = 'Event Handlers';
var EVE = 'Event Emitters';
var LTS = 'Local Templates';
var STR = 'Structure';
var RTS = 'Routes';
/* ------------ Expected structures -------------*/

var expectPhnxRootLevel = {
  name: {
    isMan: true,
    type: 'string'
  },
  includesDef: {
    isMan: false,
    type: 'string'
  },
  defVarMap: {
    isMan: false,
    type: 'object'
  },
  useProtectedVars: {
    isMan: false,
    type: 'array',
    childObjStructure: {
      '__CHECK-ALL__': {
        type: 'string'
      }
    }
  },
  imports: {
    isMan: false,
    type: 'array'
  },
  variables: {
    isMan: false,
    type: 'array'
  },
  actions: {
    isMan: false,
    type: 'array'
  },
  workflows: {
    isMan: false,
    type: 'object',
    childObjStructure: {
      '__CHECK-ALL__': {
        type: 'function'
      }
    }
  },
  functions: {
    isMan: false,
    type: 'object',
    childObjStructure: {
      '__CHECK-ALL__': {
        type: 'function'
      }
    }
  },
  eventHandlers: {
    isMan: false,
    type: 'array'
  },
  eventEmitters: {
    isMan: false,
    type: 'array'
  },
  localTemplates: {
    isMan: false,
    type: 'object'
  },
  structure: {
    isMan: true,
    type: ['object', 'string']
  },
  lifecycleHooks: {
    isMan: false,
    type: 'object',
    childObjStructure: {
      init: {
        isMan: false,
        type: 'object',
        childObjStructure: {
          before: {
            isMan: false,
            type: 'function'
          },
          after: {
            isMan: false,
            type: 'function'
          }
        }
      },
      onModelChange: {
        isMan: false,
        type: 'function'
      },
      reRender: {
        isMan: false,
        type: 'object',
        childObjStructure: {
          shouldAllow: {
            isMan: false,
            type: 'function'
          },
          before: {
            isMan: false,
            type: 'function'
          },
          after: {
            isMan: false,
            type: 'function'
          }
        }
      },
      cleanup: {
        isMan: false,
        type: 'function'
      }
    }
  }
};
var expectedPhnxDataConnRoot = {
  id: {
    isMan: true,
    type: 'string'
  },
  type: {
    isMan: true,
    type: 'string',
    values: ['REST', 'SOCKET_IO', 'WEB_SOCKET']
  },
  requestParams: {
    isMan: true,
    type: 'object'
  }
};
var expectedPhnxRestConn = {
  url: {
    isMan: true,
    type: 'string'
  },
  method: {
    isMan: true,
    type: 'string'
  },
  headers: {
    isMan: false,
    type: ['object', 'string']
  },
  body: {
    isMan: false,
    type: 'object'
  },
  responseType: {
    isMan: false,
    type: 'string'
  },
  credentials: {
    isMan: false,
    type: 'string',
    values: ['include', 'omit']
  }
};
var expectedPhnxSocketConn = {
  url: {
    isMan: true,
    type: 'string'
  },
  options: {
    isMan: false,
    type: 'object'
  }
};
var expectedPhnxModuleImportStr = {
  type: {
    isMan: true,
    type: 'string'
  },
  take: {
    isMan: true,
    type: ['array', 'object', 'string']
  },
  from: {
    isMan: true,
    type: 'string'
  }
};
var expectedPhnxAppModuleImportStr = {
  take: {
    isMan: true,
    type: ['array', 'object', 'string']
  },
  from: {
    isMan: true,
    type: 'string'
  }
};
var expectedPhnxCompImportStr = {
  type: {
    isMan: true,
    type: 'string'
  },
  take: {
    isMan: true,
    type: 'string'
  },
  lazyLoad: {
    isMan: false,
    type: 'boolean'
  },
  from: {
    isMan: true,
    type: 'string'
  }
};
var expectedPhnxAssetImportStr = {
  type: {
    isMan: true,
    type: 'string'
  },
  take: {
    isMan: true,
    type: 'string'
  },
  from: {
    isMan: true,
    type: 'string'
  }
};
var expectedPhnxScriptCSSImportStr = {
  type: {
    isMan: true,
    type: 'string'
  },
  from: {
    isMan: true,
    type: 'string'
  }
}; //For scope = 'private': type, isMandatory & validatorFn doesn't matter

var expectedPhnxVarsStr = {
  name: {
    isMan: true,
    type: 'string'
  },
  type: {
    isMan: false,
    type: 'string',
    values: ['array', 'boolean', 'function', 'number', 'object', 'string', 'any', 'element', 'definition']
  },
  metadata: {
    isMan: false,
    type: ['array', 'object']
  },
  properties: {
    isMan: false,
    type: 'object',
    childObjStructure: {
      erase: {
        isMan: false,
        type: 'boolean'
      }
    }
  },
  defaultValue: {
    isMan: false,
    type: 'any'
  },
  scope: {
    isMan: true,
    type: 'string',
    values: ['model', 'private', 'protected', 'public']
  },
  isMandatory: {
    isMan: false,
    type: 'boolean'
  },
  //Defaults to false
  validatorFn: {
    isMan: false,
    type: 'function'
  }
};
var expectedTargetsActionStr = {
  id: {
    isMan: true,
    type: 'string'
  },
  type: {
    isMan: true,
    type: 'string'
  },
  update: {
    isMan: true,
    type: 'object',
    childObjStructure: {
      '__CHECK-ALL__': {
        isMan: false,
        type: 'object',
        childObjStructure: {
          payloadModifier: {
            isMan: true,
            type: 'function'
          },
          properties: {
            isMan: false,
            type: 'object',
            childObjStructure: {
              concat: {
                isMan: false,
                type: ['boolean', 'function']
              },
              erase: {
                isMan: false,
                type: ['boolean', 'function']
              },
              shouldUpdate: {
                isMan: false,
                type: ['boolean', 'function']
              }
            }
          }
        }
      }
    }
  }
};
var expectedCallActionStr = {
  id: {
    isMan: true,
    type: 'string'
  },
  type: {
    isMan: true,
    type: 'string'
  },
  what: {
    isMan: true,
    type: 'string'
  },
  body: {
    isMan: true,
    type: 'function'
  },
  properties: {
    isMan: false,
    type: 'object',
    childObjStructure: {
      concat: {
        isMan: false,
        type: ['boolean', 'function']
      },
      erase: {
        isMan: false,
        type: ['boolean', 'function']
      }
    }
  },
  response: {
    isMan: false,
    type: 'object',
    childObjStructure: {
      '__CHECK-ALL__': {
        isMan: false,
        type: 'array'
      }
    }
  },
  responseTimeout: {
    isMan: false,
    type: 'number'
  },
  retries: {
    isMan: false,
    type: 'object',
    childObjStructure: {
      count: {
        isMan: false,
        type: 'number'
      },
      timeoutBetween: {
        isMan: false,
        type: 'number'
      }
    }
  }
};
var expectedPhnxEventHandlerStr = {
  id: {
    isMan: true,
    type: 'string'
  },
  from: {
    isMan: true,
    type: 'object'
  },
  workflow: {
    isMan: true,
    type: 'array'
  }
};
var expectedPhnxEventEmitterStr = {
  id: {
    isMan: true,
    type: 'string'
  },
  from: {
    isMan: true,
    type: 'object'
  },
  emit: {
    isMan: true,
    type: 'object',
    childObjStructure: {
      '__CHECK-ALL__': {
        type: 'object'
      }
    }
  }
};
var expectedPhnxStrStr = {
  id: {
    isMan: false,
    type: 'string'
  },
  type: {
    isMan: true,
    type: 'string'
  },
  isComp: {
    isMan: false,
    type: ['boolean']
  },
  props: {
    isMan: false,
    type: ['object', 'string']
  },
  defaults: {
    isMan: false,
    type: ['object', 'string']
  },
  children: {
    isMan: false,
    type: ['array', 'object', 'string']
  }
};
var expectedPhnxAppStr = {
  moduleImports: {
    isMan: false,
    type: 'array'
  },
  dataConnections: {
    isMan: false,
    type: 'array'
  },
  name: {
    isMan: true,
    type: 'string'
  },
  appModel: {
    isMan: false,
    type: 'object'
  },
  cssImports: {
    isMan: false,
    type: 'array'
  },
  routesConfig: {
    isMan: true,
    type: 'object',
    childObjStructure: {
      basepath: {
        isMan: true,
        type: 'string'
      },
      routes: {
        isMan: true,
        type: 'array'
      }
    }
  }
};
var expectedRouteStr = {
  id: {
    isMan: true,
    type: 'number'
  },
  url: {
    isMan: false,
    type: 'string'
  },
  componentPath: {
    isMan: true,
    type: 'string'
  },
  name: {
    isMan: true,
    type: 'string'
  },
  routes: {
    isMan: false,
    type: 'array'
  },
  onEnter: {
    isMan: false,
    type: 'function'
  },
  lazyLoad: {
    isMan: false,
    type: 'boolean'
  }
};
/* ----------------- phnx validations -------------------*/

/**
 * This function validates objects inside dataConnections
 * @param  {array } dataConnections Array of data connection objects
 * @param  {string} name            File name after src/
 */

function validatePhnxAppDataConn(dataConnections, name) {
  dataConnections.forEach(function (obj) {
    (0, _validators.validateAll)(name, obj, expectedPhnxDataConnRoot, DCN);

    if (obj.type === 'REST') {
      (0, _validators.validateAll)(name, obj.requestParams, expectedPhnxRestConn, DCP);
    } else {
      (0, _validators.validateAll)(name, obj.requestParams, expectedPhnxSocketConn, DCP);
    }
  });
}

function validatePhnxImports(imports, name) {
  imports.forEach(function (obj) {
    if (obj.type && typeof obj.type === 'string') {
      switch (obj.type) {
        case 'module':
          (0, _validators.validateAll)(name, obj, expectedPhnxModuleImportStr, IMP);
          break;

        case 'component':
          (0, _validators.validateAll)(name, obj, expectedPhnxCompImportStr, IMP);
          break;

        case 'asset':
          (0, _validators.validateAll)(name, obj, expectedPhnxAssetImportStr, IMP);
          break;

        case 'css':
        case 'script':
          (0, _validators.validateAll)(name, obj, expectedPhnxScriptCSSImportStr, IMP);
          break;

        default:
          throw new Error("Expected import type ".concat(obj.type, " to be one of (module, script, component, asset, css)"));
      }
    } else {
      throw new Error("Expected import object to have a type attribute");
    }
  });
}

function validatePhnxActions(actions, name) {
  actions.forEach(function (obj) {
    if (obj.type && obj.type === 'TARGETS') {
      (0, _validators.validateAll)(name, obj, expectedTargetsActionStr, ACT);
    } else if (obj.type && obj.type === 'CALL') {
      (0, _validators.validateAll)(name, obj, expectedCallActionStr, ACT);
    } else {
      throw new Error("Expected action type to be either TARGETS or CALL in ".concat(ACT));
    }
  });
}

function validatePhnxStr(str, name, where) {
  if (typeof str === 'string') {
    return;
  }

  (0, _validators.validateAll)(name, str, expectedPhnxStrStr, where);
  var cchildren = str.children;

  if (cchildren !== undefined) {
    if (_typeof(cchildren) === 'object') {
      if (cchildren instanceof Array) {
        cchildren.forEach(function (item) {
          if (_typeof(item) === 'object') {
            validatePhnxStr(item, name, where);
          }
        });
      } else {
        validatePhnxStr(cchildren, name, where);
      }
    }
  }
}
/**
 * This function is the entry function for all phnx validations
 * @param  {object} viewData The view's Root level object
 * @param  {string} name     File name after src/
 */


function validatePHNX(viewData, name) {
  /*Root level Attrs*/
  (0, _validators.validateAll)(name, viewData, expectPhnxRootLevel, RLA);
  /*Imports*/

  var imports = viewData.imports || [];
  validatePhnxImports(imports, name);
  /*Variables*/

  var variables = viewData.variables || [];
  variables.forEach(function (obj) {
    (0, _validators.validateAll)(name, obj, expectedPhnxVarsStr, VAR);
  });
  var actions = viewData.actions || [];
  validatePhnxActions(actions, name);
  /*Event Handlers*/

  var eventHandlers = viewData.eventHandlers || [];
  eventHandlers.forEach(function (obj) {
    (0, _validators.validateAll)(name, obj, expectedPhnxEventHandlerStr, EVH);
  });
  /*Event Emitters*/

  var eventEmitters = viewData.eventEmitters || [];
  eventEmitters.forEach(function (obj) {
    (0, _validators.validateAll)(name, obj, expectedPhnxEventEmitterStr, EVE);
  });
  /*local templates*/

  var localTemplates = viewData.localTemplates || {};
  Object.keys(localTemplates).forEach(function (item) {
    validatePhnxStr(localTemplates[item], name, LTS + ' ' + item);
  });
  /*Structure*/

  var structure = viewData.structure;
  validatePhnxStr(structure, name, STR);
}
/* --------------- phnxapp validations ---------------*/

/**
 * Function to validate the routes inside phnxapp
 * @param  {array } routes The routes array
 * @param  {string} name   Name of the file
 */


function validatePhnxAppRoutes(routes, name) {
  routes.forEach(function (routeObj) {
    (0, _validators.validateAll)(name, routeObj, expectedRouteStr, RTS);

    if (routeObj.routes) {
      validatePhnxAppRoutes(routeObj.routes, name);
    }
  });
}
/**
 * This function validates the Root level attributes of phnxapp
 * @param  {object} viewData Root level object
 * @param  {string} name     Name of the file
 */


function validatePHNXAPP(viewData, name) {
  (0, _validators.validateAll)(name, viewData, expectedPhnxAppStr, RLA);
  var routes = viewData.routesConfig.routes;
  validatePhnxAppRoutes(routes, name);
  /*Data Connections*/

  var dataConn = viewData.dataConnections || [];
  validatePhnxAppDataConn(dataConn, name);
  var moduleImports = viewData.moduleImports || [];
  moduleImports.forEach(function (obj) {
    (0, _validators.validateAll)(name, obj, expectedPhnxAppModuleImportStr, MODIMP);
  });
}
/**
 * This is the API entry to this file for validations
 * @param  {object} viewData The view's Root level object
 * @param  {string} type     One of 'phnx' or 'phnxapp'
 * @param  {string} resPath  Fully qualified path to the file
 */


function validateStructure(viewData, type, resPath) {
  var fileName = resPath.replace(/^.*?\/src\//, '');

  if (type === 'phnx') {
    validatePHNX(viewData, fileName);
  } else if (type === 'phnxapp') {
    validatePHNXAPP(viewData, fileName);
  }
}