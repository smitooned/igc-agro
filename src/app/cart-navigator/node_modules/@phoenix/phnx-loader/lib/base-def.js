"use strict";

var secret_utils = _interopRequireWildcard(require("@phoenix/phnx-utils"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * This is the base definition for all the phnx components
 * Does basic setup for all the functionality to work
 *
 * Variables expected (added by @phoenix/phnx-loader or react)
 * this.__finalEventMap - object
 * this.__compDefaults - object
 * this.__localVars - object
 * this.__extVarValidations - object
 * this.__finalDefVarMap - object
 *
 * this.refs - object
 * this.forceUpdate() - function
 *
 * @type {Object}
 */
module.exports = {
  varMap: {},
  componentWillMount: function componentWillMount() {
    secret_utils.applyDefaults.call(this, false);
    secret_utils.applyProps.call(this, undefined);
  },
  componentDidMount: function componentDidMount() {
    this.componentWillReceiveProps.call(this, this.props);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _this = this;

    Object.keys(this.__extVarValidations).forEach(function (item) {
      var fn = _this.__extVarValidations[item];
      var data = nextProps.__passedProps ? nextProps.__passedProps[item] : _this.__localProps[item];

      if (fn(data) === false) {
        console.error('The incoming value for ' + item + ' failed the validation'); //eslint-disable-line
      }
    });
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    var result = secret_utils.phnxShouldUpdate(this.props, nextProps);
    result = result || secret_utils.phnxShouldUpdate(this.state, nextState);
    return result;
  },
  componentWillUpdate: function componentWillUpdate(nextProps) {
    secret_utils.applyProps.call(this, nextProps);
  },
  componentDidUpdate: function componentDidUpdate() {
    var _this2 = this;

    var eventMapTmp = {};
    var currRefs = Object.keys(this.refs);
    currRefs.forEach(function (key) {
      eventMapTmp[key] = _this2.__finalEventMap[key];
    });
    this.__finalEventMap = eventMapTmp;
  }
};